import cv2
import json
import paho.mqtt.client as mqtt
from ultralytics import YOLO

# üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ThingsBoard
THINGSBOARD_HOST = "10.34.112.192"  # IP ‡∏Ç‡∏≠‡∏á ThingsBoard
ACCESS_TOKEN = "jGQrkRDNbJFtmPSZ5bGT"  # Device ID ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Token
MQTT_TOPIC = "v1/devices/cameraAI/telemetry"

# üîπ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT
client = mqtt.Client()
client.username_pw_set(ACCESS_TOKEN)  # ‡πÉ‡∏ä‡πâ Device ID ‡πÄ‡∏õ‡πá‡∏ô Token
client.connect(THINGSBOARD_HOST, 1883, 60)

# üîπ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO
model = YOLO("yolov8x.pt")

# üîπ RTSP URL ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á Hikvision
rtsp_url = "rtsp://admin:MUICT123$%@10.34.12.206:554/Streaming/Channels/101"

# üîπ ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
cap = cv2.VideoCapture(rtsp_url)

if not cap.isOpened():
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
    exit()

print("‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á...")

while True:
    ret, frame = cap.read()
    if not ret:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
        break

    # üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
    print("Frame Size:", frame.shape)

    # üîπ ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ YOLO ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    frame = cv2.resize(frame, None, fx=2.0, fy=2.0, interpolation=cv2.INTER_LINEAR)

    person_count = 0  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô

    # üîπ ‡πÉ‡∏ä‡πâ YOLO ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏û
    results = model(frame)
    for r in results:
        for box in r.boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            conf = box.conf[0].item()
            cls = int(box.cls[0].item())

            # üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ "‡∏Ñ‡∏ô" (class=0) ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î threshold
            if cls == 0 and conf > 0.3 and (x2-x1) > 30 and (y2-y1) > 30:
                person_count += 1
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 3)
                cv2.putText(frame, f"Person ({conf:.2f})", (x1, y1 - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

    # üîπ ‡∏™‡πà‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á ThingsBoard
    payload = json.dumps({"people_count": person_count})
    client.publish(MQTT_TOPIC, payload)
    print(f"üì° ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á ThingsBoard: {payload}")

    # üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÉ‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    cv2.putText(frame, f"People Count: {person_count}", (50, 50),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 3)

    # üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    cv2.imshow("Hikvision Stream", frame)

    # üîπ ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô
    if person_count > 0:
        print("üí° ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü (‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏¢‡∏π‡πà)")
    else:
        print("üîå ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô)")

    # üîπ ‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# üîπ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á
cap.release()
client.disconnect()
cv2.destroyAllWindows()
