[
    {
        "id": "5596b8303f231669",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a413c66ea5885fbd",
        "type": "tab",
        "label": "AC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4b1b5ee444aaf88c",
        "type": "tab",
        "label": "1phase",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1b6bbf26415dcee7",
        "type": "tab",
        "label": "Control AC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "349d863a9104bad1",
        "type": "tab",
        "label": "ControlLight2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bbd8743ed4f40463",
        "type": "group",
        "z": "5596b8303f231669",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2ab67508bb7023d0",
            "fb55966416e38922",
            "4b064cad881cdd6a",
            "8656f504663b8da8",
            "fa046be5fbfa4b9d",
            "ee06d2b1279c9e5c",
            "bf8f7c5cc2297386",
            "4132be183bd50a08",
            "d70a3108c888ee81",
            "75e90c692ee6cfdf",
            "85fac43dd7431abd",
            "d64b7a6325bcc0f8",
            "70490be2ee7167e7",
            "3eebe2f3cfa324c4",
            "e54f8af4aa72a3a0",
            "ba4da4f7ec9ae5f7",
            "22a2d4b97e560a91",
            "67f09a8af8a7f9dc",
            "652cdef8de9cbf37",
            "6bcdfbb26a968122",
            "d2517ab3e8695aa7",
            "4631802004a69b18",
            "4c5ae72cfe40d36a",
            "21795e262f9c7828",
            "a51247cbfde58bc2",
            "85d6fbd64ec79fe0",
            "2fa4e20b7aca203b",
            "a7ef8ff5a48aea39",
            "5e790cfe26452fc9",
            "6c5ba31d70855788",
            "e37eeb46cca334b5",
            "7a19a38b3329866c",
            "0f0c8a411e906d78",
            "7011057478bfedbf",
            "ab8ff55618c2920c",
            "8c949fa5f34bbc2f",
            "0c35247d16f946ca",
            "06051cc79825ef02",
            "5b43b7da5c0bc0b6",
            "c149f3c67c7a9e78",
            "f797126e1b5fe5f0",
            "198164266ff7178f",
            "0a7a2510936c39b0",
            "e17459ae26383d8d",
            "41f241c2e508d4f5",
            "b0fe041e9981ada1",
            "4033da6b106960c0",
            "95c34fc2a42d482e",
            "dfa09b119b5e579e",
            "f5c5ccf8cf887ae2",
            "cc930f6d65c221d4",
            "795eef5445b6f54c",
            "39c603ae9be5139e",
            "d49b95394ea1beb9",
            "9ac102533def3973",
            "6819990f207a5fb3",
            "41525f69a1ce7ca6",
            "d76e5308d5ee4f07",
            "6b78742f06230f11",
            "a1211b8e91a999a4",
            "e1f861963a90019b"
        ],
        "x": 4,
        "y": 19,
        "w": 1182,
        "h": 1382
    },
    {
        "id": "b948bb12e7f7f6a6",
        "type": "group",
        "z": "5596b8303f231669",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "57dc7f135c4f1f70",
            "c1b1bbab5f61bc2f",
            "66e90c3fe2db4232",
            "42f1f0c7996f7c72",
            "f99003d4c8e4116f",
            "a08b7da23691a984",
            "34aa1e22770cd99b",
            "e84f4abeaad2adf3",
            "60b40494bf40de89",
            "88ea96861dcc91ef",
            "a47f2850587c366f",
            "ce8dcd00a6eac70a",
            "9c1b239f62dd6ccf",
            "f0c30a61b49b4fcb",
            "90822c544f1d76db",
            "b263b95bee94d434",
            "8702a23dec44bf78",
            "5b3654bba289c7ba",
            "5add218a8e86168b",
            "f2f2a7fa95d549a2",
            "6131640f4a5f732c",
            "d14007d6bda7b498",
            "219e93d49e9410f3",
            "140147318b03a9fb",
            "706d67e5accb6992",
            "67ad7c4bc2ae7c0f",
            "8730d57353c448ee",
            "3c9cbaf7e0d4906d",
            "6107a312e718e5cc",
            "3720b9b54a39b431",
            "02a9cc0c21529ba1",
            "39fa7bcd075128de"
        ],
        "x": 14,
        "y": 1419,
        "w": 1022,
        "h": 742
    },
    {
        "id": "3b3316ddd49a42c5",
        "type": "group",
        "z": "5596b8303f231669",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "56124e35b93fe695",
            "ad7dfe98ae066042",
            "bfee625c10a92120",
            "f173318e08c099c8",
            "ad588e60a64433f5",
            "3f2c0856bedf04f9",
            "b5c13a8c5b47a3e7",
            "3fca027094dbf031",
            "86756bd552ce5cc1",
            "5ec9f7c16f55c39c",
            "3307a4715e88cdd6",
            "8c0c55e3b9dc9db2",
            "47c8e678dfa97255",
            "942b19b5acc93a09",
            "b6c22b7f3662e050",
            "6a0628989b2766de",
            "f71472b137c8b968"
        ],
        "x": 1194,
        "y": 19,
        "w": 1012,
        "h": 402
    },
    {
        "id": "96605e5f4ca80cbd",
        "type": "group",
        "z": "5596b8303f231669",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "faa629858b7a04b2",
            "cd380803ca7e2f55",
            "9b0c2101e0804d04",
            "2843af1687a67adf",
            "8d7dd5aef67d5dd3",
            "b16a40620f61fd12",
            "0fd628e1061306b0",
            "433be1ed6e89cca6",
            "13d34a9ac0328814",
            "27011c37b0deae9e",
            "7b84681ee3a2df7b",
            "c98bd362c6cd428c",
            "968f930da5b2c2b2",
            "a252c3e2c9c1dba2",
            "0b084ca7907139cf",
            "57787dc47fd01688",
            "bc017de29d5b5e07",
            "36b2e28259e4e6c3",
            "79bbf36f3b20e9ea",
            "79477aaf325342b8"
        ],
        "x": 1214,
        "y": 1319,
        "w": 1472,
        "h": 502
    },
    {
        "id": "6d7dcbd9ddb5454f",
        "type": "group",
        "z": "5596b8303f231669",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5c4045466e260fe9",
            "148e62ae538319af",
            "9e51c555566d2cb5",
            "ea9c9fbb801b5a94",
            "7c88bf71966f76e8",
            "5c46abdf794cddf0",
            "39087e74c181a191",
            "a908914b172dddb9",
            "ca8af7ea28e9e4b5",
            "89034716ad2bfac2",
            "5ba33bfd8cc9d09a",
            "47414ac03fa0d3a5",
            "3a6fecd208ca379e",
            "4f4679437d48814b",
            "b5b8364de27ff624",
            "f4d291e49d32029d",
            "dc29b43b1ff9bae3",
            "b1f8e950c8d6fa22",
            "c438da07068f688c",
            "d78350918f208299",
            "4fa1a0a5fe16d131",
            "9da302ae32e5c758",
            "6c7b4670657e68d1",
            "fc01659ff09e9a0d",
            "541c85cb011584e5",
            "af-roomstatus-resend-switch",
            "af-roomstatus-resend-function",
            "2698d99296e69421",
            "aba32a9b3aad775f",
            "0b857a00928cba83",
            "5759399d1e4b7c71",
            "ec72cc034e3c32b5",
            "05f56bd6bc5aee69"
        ],
        "x": 1194,
        "y": 499,
        "w": 1832,
        "h": 742
    },
    {
        "id": "e3a224fe0a1c6f3b",
        "type": "group",
        "z": "5596b8303f231669",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d451987c0975a60b",
            "227a8612fc5d51aa",
            "861ee25b0fb6b480",
            "be036c600013afd7",
            "bc8d170588494567",
            "2b39921d41801532",
            "4491f558cc2f35d0",
            "a2662dbf68cbaecb",
            "8b5cf54a661b7f46",
            "789c9be079e1c222",
            "0eef365a65c55ede",
            "548ddee97e76acca",
            "cfd8c3295b5d0231"
        ],
        "x": 834,
        "y": 2459,
        "w": 772,
        "h": 342
    },
    {
        "id": "ce3c07d1175290fc",
        "type": "group",
        "z": "5596b8303f231669",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7fc8be584eb6c62e",
            "40d51309cb12f373",
            "794adaa953d5905b",
            "644d7049b103c8a9",
            "8ca7c584fb476a3b",
            "7307dd0cf971d8d2",
            "41630a3138c4d126"
        ],
        "x": 834,
        "y": 2819,
        "w": 992,
        "h": 162
    },
    {
        "id": "34c14c64b43476ca",
        "type": "group",
        "z": "a413c66ea5885fbd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a16cf6d06d0b7061",
            "9d60fa49570d1503",
            "7abe3cdac4099ffc",
            "5494f6a5d6e0dd95",
            "d70eec653ecb1793",
            "466130a44284544f",
            "7a78933db8441867",
            "1fa012964d69f3fa",
            "7b24c8cad3fdc1a8",
            "e363004b14ea5b44",
            "815b76421f480944",
            "abb1de2227f0c9b9",
            "acc821f729452e13",
            "f19ec2c8607922ec",
            "29efe3bc53da3a55",
            "dbec85f0af8c531e",
            "f3788badb1d3b6c6",
            "4bf15c1aff5fca2b",
            "d1c4edd752c1d5de",
            "679ba6712665d99e",
            "80f447cfc7273001",
            "65188e1484fd940a",
            "8b7e5968724a81e0",
            "187274ec4e1d195b",
            "786982ba041f72c4",
            "2d3cc6188ba06e52"
        ],
        "x": 74,
        "y": 139,
        "w": 1392,
        "h": 522
    },
    {
        "id": "cf666bf942b0cfd0",
        "type": "group",
        "z": "a413c66ea5885fbd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "667cf1192349f430",
            "193474297e8df55a",
            "93c2da34a5bb4bc8",
            "ea67b08382555dd7",
            "c81ec1b658a99154",
            "a4ca5645aa081e1a",
            "087e92483d4d8409",
            "232a31c36d461d40",
            "661e55bcd9e15d21",
            "6e6f45cf1a9c3197",
            "1a792fbbe46dae16",
            "dbae0b9c2cc633f3",
            "168334e73d81e138",
            "376286cd5c333e3f",
            "1c7608a1a39046d7",
            "55d49ba99e2ed1e0",
            "a662dfe7d7841cee",
            "0baf850f5468a2c6",
            "90c1d1cfa51a371f",
            "29a88ad39d8a418b",
            "2b3c079bdb9eea64",
            "02da94b1ba091bd7",
            "22b161cc16833238",
            "edcf8d5fbdb360a9",
            "36e675a6886349aa",
            "edc6a7a85cc18cdf"
        ],
        "x": 74,
        "y": 719,
        "w": 1372,
        "h": 522
    },
    {
        "id": "59a3775b6a1fa638",
        "type": "group",
        "z": "a413c66ea5885fbd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "187c3601b9ac2d69",
            "9d20b8ef9f265329",
            "c8d86406ac61e932",
            "5da16bd214f6fee2",
            "874eb5fe2e529d61",
            "72d661678d908be0",
            "90e28ecce5504973",
            "295d94e73f3902b4",
            "3cd18aa3f9a06f90",
            "cad583eabc96a61d",
            "82b9c052aa4e9de4",
            "e162c8bdf11fabe5",
            "3b2a37e3719ea1cc",
            "670bc0165ee5e6f7",
            "746bc2015fe2fd76",
            "323f810693357ab5",
            "6341b972e1113dc7",
            "22a72dddd296a621"
        ],
        "x": 74,
        "y": 1279,
        "w": 1112,
        "h": 522
    },
    {
        "id": "64bd2d33d84681c2",
        "type": "group",
        "z": "4b1b5ee444aaf88c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "18b69d7d6638ebe4",
            "a0f22cc77c17c350",
            "8bb0f22d12ce1e98",
            "64229bd1e39693de",
            "bf422610d71af8f2",
            "9dfea100925ad79f",
            "b83cc4f5d4e44574",
            "92a4adbe4ff95b2b",
            "7d0a0bc3eca53d90",
            "f887ff593daba409",
            "c8ea9fa07464d0db",
            "8e6acd1e28986b09",
            "f64aa8eb75b93330",
            "07f742170e1dcd8b",
            "06971d0993042ab2",
            "516905746465ba49",
            "834329b85a295e13",
            "d756b41a67920c9f"
        ],
        "x": 294,
        "y": 19,
        "w": 1432,
        "h": 422
    },
    {
        "id": "4c56f08f3e0f9784",
        "type": "group",
        "z": "4b1b5ee444aaf88c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e38179ae6d1747de",
            "069f50838c7f5f1e",
            "de7a6f38f1aaca14",
            "f115677e7df2599a",
            "96e684e27677f277",
            "2970c46ec59741f8",
            "7e9326c7705950f7",
            "a78d50d1215142e9",
            "9ad8295c1f1252af",
            "57304a4b63c0f763",
            "dda80c49b17db049",
            "c77fb7458e70cce5",
            "61afa7b871be307d",
            "e682710f770c681d",
            "dfbca8f5e91ea80b",
            "0280b59440f99eba",
            "c8ce3c5fc4febc46",
            "1dcfff385e58f350"
        ],
        "x": 154,
        "y": 499,
        "w": 1572,
        "h": 462
    },
    {
        "id": "3954618d0304767a",
        "type": "group",
        "z": "4b1b5ee444aaf88c",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "96815fb95ea52770",
            "fc794c74b792fc0c",
            "a8fa216ec32fc0ae",
            "81efaf4ebba19a16",
            "b7f6fdd4da662e51",
            "0dc03e2d36089f9a",
            "afaf3597b77535da",
            "b0bcc072aeca11f5",
            "bee15d5fe68e1203",
            "9cb6cb5c73db0b3c",
            "d78a2b3bdb36b09f",
            "939436d12dba0cbf",
            "57f9b4e85e29343d",
            "309f7193048920da",
            "7dc0c9b3f1839e2b",
            "0621d8abf198d53a",
            "9c2e889fa205f019",
            "1e1682c46cf26deb",
            "559dbd57a9346134",
            "0c047b8ef3aa155c",
            "f3384f08587eb1ac",
            "32ba2eb5fbece778",
            "2608358110ca97ed",
            "36a9750e75446b5e",
            "586a23563a570cef",
            "877ffecefb90791f",
            "abf56078d974f8dc",
            "d3379929b15f6aa8",
            "7353de8527f23603",
            "10212861d825b894",
            "e1d1fce2ce9650e4"
        ],
        "x": 1794,
        "y": 19,
        "w": 2112,
        "h": 502
    },
    {
        "id": "f8528b6842fcf749",
        "type": "group",
        "z": "4b1b5ee444aaf88c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cec6a521c3b74ded",
            "7f2601cbd404ae83",
            "49b766911d365f37",
            "3aa8b23a1176b856",
            "07708fc0665b79ed",
            "6f587e119f19fa9a",
            "3708deb94b6cd326",
            "60462aecfc3827ff",
            "d6b7a2bae7f9a7b5",
            "d98d9eb3a441a985",
            "84489ad8523c038f",
            "e8287dd494923223",
            "48bf7c993d6e5845",
            "0c8e4539e200c24f",
            "027df6e410098993",
            "1bb0ac45335bda0e",
            "5891940a3edce9dd",
            "6ad2585920ce0f2d",
            "3a36c55563c46d35",
            "a979468af919986e",
            "a2f04095745460a9"
        ],
        "x": 274,
        "y": 1339,
        "w": 1452,
        "h": 522
    },
    {
        "id": "b5e0e481b6a6835f",
        "type": "group",
        "z": "1b6bbf26415dcee7",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c11d00d0486828a4",
            "64ec79cdf85726a1",
            "873df16fbdd75e28",
            "160e1c5c916e4f7d",
            "dcacfbb5ebb00b69",
            "111b3bb26cc59f27",
            "89f9d32fcb6c0167",
            "ee68e749a9cdcfd5",
            "386eaf88265c170e",
            "5ef3440d42c16127",
            "7c2c7550836d912a",
            "84bef34c26910b85",
            "6fc684c9a1043afe",
            "310524b44728bf22",
            "796235c1ee08e9e5",
            "1a7872be8d797f02",
            "aaed738d91f88626",
            "0949f071b7c75887",
            "70509297170be64e",
            "a5879f8e4840a955",
            "310c9cf76cd7ce1a",
            "f20606f668223743",
            "162a374b4d4e10a3",
            "ab63e189b485136f",
            "9e260abfcfe2ff3c",
            "f51b70d7ee6b2f15",
            "trigger-get-room-status",
            "9255fc6469b588dc",
            "2e568986d52d7472",
            "a94240aedbe66b3d",
            "bd4118096ef81bc2",
            "8a13cbc0699f9930",
            "0dc44af802c3e4f7",
            "7b40ebceb8feefe1",
            "8521b24da888f486",
            "026281ec6ed965f7",
            "4717ba891da19c3c",
            "9a8702797b9536a7",
            "11f8ccebcc15d5b9",
            "379d5c352952ced1",
            "6461f71a422fcca3",
            "c373df4e45b0485a"
        ],
        "x": 34,
        "y": 79,
        "w": 3812,
        "h": 1042
    },
    {
        "id": "a529d2c2ae1dc88d",
        "type": "group",
        "z": "a413c66ea5885fbd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c3d9fb1534b897e7",
            "e92a99a26f7520d9",
            "aae8ea16b442dcd7",
            "9195a16e66fff9a5",
            "670aab34d414b2b8",
            "ece15c25724c01e7",
            "c92e677e56a93dc4",
            "eb92af694112bc62",
            "d936cb25167c5fdf",
            "eb2e0a93aca55a44",
            "1ca960c03824a549",
            "2d944ac2014a5a2c",
            "cc1fc00acc22a648",
            "9895cc057e327ef9",
            "da8189362ef73e64",
            "de85a41190348821",
            "f2ee9c1603884ab0",
            "ed5f85918ca8a80d",
            "cdf8822138412a7b",
            "26d71fd2ae5a5406",
            "c5334dfe8374d34f"
        ],
        "x": 1554,
        "y": 139,
        "w": 1392,
        "h": 542
    },
    {
        "id": "3e59bc73e6af50a3",
        "type": "group",
        "z": "349d863a9104bad1",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "465601fd40700769",
            "1a03b9b25b37cf45",
            "4e3f2c308792eacb",
            "87e6740a5f01145c",
            "379f3ea14a3524d6",
            "42a63506866ef395",
            "e46266b5e5ba0b0e",
            "c6ac4d06da35d971",
            "1a49106bd8705dff",
            "94a5b103db97cfa6",
            "dbdaab1301aa41c6",
            "6c1522bc2bf60ea3",
            "028fb3d1fdcecccb",
            "1f0937208be36009",
            "b50df5d59139d159",
            "87e570b28815eab5"
        ],
        "x": 34,
        "y": 1419,
        "w": 1432,
        "h": 422
    },
    {
        "id": "c6ac78d48d03ba38",
        "type": "group",
        "z": "349d863a9104bad1",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5639e0fd73aa45a0",
            "757a1d365ce48a0e",
            "a0cb6011a347f058",
            "dae1a8bc6d93b776",
            "a62d22f4b84a196a",
            "bd35ce1ed27c2f42",
            "360c1d98a618c509",
            "4f64f7e8aab2cf17",
            "2c0745a7e711696a",
            "8e204c57beeba35a",
            "3d259e7bc4ad3185",
            "32da724035e3e0fd",
            "cc919c5c0d120414",
            "2936e1a383647ec1",
            "ab61c48d0dbfca25"
        ],
        "x": 44,
        "y": 1879,
        "w": 1322,
        "h": 402
    },
    {
        "id": "fa0ee0548f5b861a",
        "type": "group",
        "z": "349d863a9104bad1",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "120e05dd7330a26f",
            "c0cd116cea37f534",
            "dee43fa3f2ed4816",
            "317bee3988b3c36b",
            "b9279e20a1a5c35c",
            "cc83299223b11184",
            "6d83de751c302837",
            "bc1dda776841f7c9",
            "571626ddd36d0615",
            "c59549582893dfc7",
            "1bff5aa82f08ca4e",
            "0964a06901ac7763",
            "bc73d5c3896f48c6",
            "f41a442ce7f94082",
            "765cacc5b1e8cb89",
            "0e6bc0f950faaa57",
            "6ca636fac26796bf",
            "f3c22d3f58c83ebb",
            "2b5eca51ba17981e",
            "b81ff0216226047c",
            "7144cc332c5b5e42",
            "aae9ef46a2d34c69",
            "288ae2786e47e689",
            "64bd81a15786ee67",
            "4910c98a0c4b8977",
            "cdff913a782f0120",
            "4fc861f3dbdb13e5",
            "5e1ac8ab976c7550",
            "32ed2712df29f221",
            "7c25610a5f7cfd74",
            "a18b9a0b24b2999a",
            "e7a307ab9e54d0b8"
        ],
        "x": 14,
        "y": 2339,
        "w": 2222,
        "h": 782
    },
    {
        "id": "9de92811d3e7f1b3",
        "type": "group",
        "z": "4b1b5ee444aaf88c",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "947bb1e38720f382",
            "785327542d0ae2e4",
            "1057f840b605dbc7",
            "3dd3c49f83387e75",
            "d43016c2faeabd76",
            "8bd0ae669f6ec8d8",
            "523e16e942c1a5c4",
            "ef8c4b3f15b66a6b",
            "33e045eff9194802",
            "8ee4cb597080130a",
            "88b210f49af8f075",
            "74e5262d7f6becc9",
            "0e1c7e12b99dc255",
            "cfa584d62e6d4487",
            "66fa475acc62d355",
            "a68120b6c7ee01fb",
            "0c5a36b67a8dc761",
            "784433bd9b71cb60",
            "cc32b217f328563c",
            "1a2674c1763b81e8",
            "035bfc45fda2e9f4",
            "12fa8030d18b18fa",
            "a91f2ddb77a104b2",
            "90e911a56183a780",
            "e256895e9d9103f9",
            "9d760be1997a136c",
            "36b3d96a34fd8aa0",
            "dcf01330c01f04e7",
            "13d8a3d0e1082d29",
            "2cda52f1c5459162",
            "b02030168dc034a4",
            "5dced4af14021595"
        ],
        "x": 1794,
        "y": 559,
        "w": 2112,
        "h": 502
    },
    {
        "id": "ad30a05ccf560b61",
        "type": "mqtt-broker",
        "name": "ADMmainDocker",
        "broker": "10.34.112.192",
        "port": "1883",
        "clientid": "ac808c50-f96a-11ef-8636-93168e2858a5",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "22a2b25621754385",
        "type": "mqtt-broker",
        "name": "ADM3PH",
        "broker": "10.34.112.192",
        "port": "1883",
        "clientid": "74b6fc50-f96f-11ef-8636-93168e2858a5",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e60d06a0a8f09ffe",
        "type": "mqtt-broker",
        "name": "ADMAirConThingsBoard",
        "broker": "10.34.112.192",
        "port": "1883",
        "clientid": "390c9ec0-f96b-11ef-8636-93168e2858a5",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "dbb746f7998c46e0",
        "type": "modbus-client",
        "name": "ADM-5832G",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": true,
        "failureLogEnabled": true,
        "tcpHost": "10.34.12.202",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "",
        "commandDelay": 2000,
        "clientTimeout": 5000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false,
        "showErrors": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "da0d36f433b2c5b3",
        "type": "modbus-client",
        "name": "ADM2-Relays",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": true,
        "failureLogEnabled": true,
        "tcpHost": "10.34.12.204",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "",
        "commandDelay": 1,
        "clientTimeout": 5000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false,
        "showErrors": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "6a2fde34a04406db",
        "type": "modbus-client",
        "name": "ADM3PH",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.34.12.205",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "",
        "commandDelay": 5,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": false,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "dfba42d4e98ee249",
        "type": "mqtt-broker",
        "name": "RoomStatus",
        "broker": "mqtt://10.34.112.192:1883",
        "port": 1883,
        "clientid": "c3eb4890-ece4-11ef-8636-93168e2858a5",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "29c9eb9186255316",
        "type": "modbus-client",
        "name": "CompressorBox",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.34.12.203",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ae0562e5159bc84d",
        "type": "mqtt-broker",
        "name": "StatusGateway",
        "broker": "10.34.112.192",
        "port": 1883,
        "clientid": "143f6330-085b-11f0-8636-93168e2858a5",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "mqtt_adm",
        "type": "mqtt-broker",
        "name": "ThingsBoard ADM",
        "broker": "10.34.112.192",
        "port": "1883",
        "clientid": "ADMClient",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "mqtt_air",
        "type": "mqtt-broker",
        "name": "ThingsBoard AIR",
        "broker": "10.34.112.192",
        "port": "1883",
        "clientid": "AIRClient",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true
    },
    {
        "id": "mqtt_status",
        "type": "mqtt-broker",
        "name": "ThingsBoard STATUS",
        "broker": "10.34.112.192",
        "port": "1883",
        "clientid": "STATUSClient",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true
    },
    {
        "id": "443d21697edcc464",
        "type": "mqtt-broker",
        "name": "RoomBooking",
        "broker": "10.34.112.192",
        "port": 1883,
        "clientid": "c3eb4890-ece4-11ef-8636-93168e2858a5",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2c02a42164ec91cc",
        "type": "modbus-client",
        "name": "ModbusRelay-Test",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.34.12.202",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "",
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "4e6a5b74c5abf363",
        "type": "mqtt-broker",
        "name": "TestLightControl",
        "broker": "10.34.112.192",
        "port": 1883,
        "clientid": "c4a8f1c0-105b-11f0-8636-93168e2858a5",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "51f796d92c532e29",
        "type": "mqtt-broker",
        "name": "Kwh",
        "broker": "10.34.112.192",
        "port": 1883,
        "clientid": "f3dff480-217b-11f0-8636-93168e2858a5",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4132be183bd50a08",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 60,
        "wires": []
    },
    {
        "id": "d70a3108c888ee81",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 140,
        "wires": []
    },
    {
        "id": "75e90c692ee6cfdf",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 220,
        "wires": []
    },
    {
        "id": "85fac43dd7431abd",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 300,
        "wires": []
    },
    {
        "id": "d64b7a6325bcc0f8",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 380,
        "wires": []
    },
    {
        "id": "70490be2ee7167e7",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 460,
        "wires": []
    },
    {
        "id": "3eebe2f3cfa324c4",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 540,
        "wires": []
    },
    {
        "id": "e54f8af4aa72a3a0",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW1-Function",
        "func": "// Retrieve the raw data from the Modbus Read node\n\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\n\n// Write the low word (second register) into the buffer at position 2\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Format the float value to 3 decimal places\nlet formattedValue = parseFloat(floatValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\n//msg.payload = formattedValue;\nmsg.payload = {\"adl200N_kW1\":formattedValue};\n//flow.set(\"currentNode1\",msg.payload);\n// Return the formatted value\nflow.set(\"adl200n-kW1\", formattedValue);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 100,
        "wires": [
            [
                "0a7a2510936c39b0",
                "41f241c2e508d4f5"
            ]
        ]
    },
    {
        "id": "ba4da4f7ec9ae5f7",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW2-Function",
        "func": "// Retrieve the raw data from the Modbus Read node\n\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\n\n// Write the low word (second register) into the buffer at position 2\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Format the float value to 3 decimal places\nlet formattedValue = parseFloat(floatValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\n//msg.payload = formattedValue;\nmsg.payload = {\"adl200N_kW2\":formattedValue};\n//flow.set(\"currentNode1\",msg.payload);\n// Return the formatted value\nflow.set(\"adl200n-kW2\", formattedValue);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 361.1999816894531,
        "y": 182,
        "wires": [
            [
                "0a7a2510936c39b0",
                "41f241c2e508d4f5"
            ]
        ]
    },
    {
        "id": "22a2d4b97e560a91",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW3-Function",
        "func": "// Retrieve the raw data from the Modbus Read node\n\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\n\n// Write the low word (second register) into the buffer at position 2\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Format the float value to 3 decimal places\nlet formattedValue = parseFloat(floatValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\n//msg.payload = formattedValue;\nmsg.payload = {\"adl200N_kW3\":formattedValue};\n//flow.set(\"currentNode1\",msg.payload);\n// Return the formatted value\nflow.set(\"adl200n-kW3\", formattedValue);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 260,
        "wires": [
            [
                "0a7a2510936c39b0",
                "41f241c2e508d4f5"
            ]
        ]
    },
    {
        "id": "67f09a8af8a7f9dc",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW4-Function",
        "func": "// Retrieve the raw data from the Modbus Read node\n\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\n\n// Write the low word (second register) into the buffer at position 2\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Format the float value to 3 decimal places\nlet formattedValue = parseFloat(floatValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\n//msg.payload = formattedValue;\nmsg.payload = {\"adl200N_kW4\":formattedValue};\n//flow.set(\"currentNode1\",msg.payload);\n// Return the formatted value\nflow.set(\"adl200n-kW4\", formattedValue);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 340,
        "wires": [
            [
                "0a7a2510936c39b0",
                "41f241c2e508d4f5"
            ]
        ]
    },
    {
        "id": "652cdef8de9cbf37",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW5-Function",
        "func": "// Retrieve the raw data from the Modbus Read node\n\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\n\n// Write the low word (second register) into the buffer at position 2\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Format the float value to 3 decimal places\nlet formattedValue = parseFloat(floatValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\n//msg.payload = formattedValue;\nmsg.payload = {\"adl200N_kW5\":formattedValue};\n//flow.set(\"currentNode1\",msg.payload);\n// Return the formatted value\nflow.set(\"adl200n-kW5\", formattedValue);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "0a7a2510936c39b0",
                "41f241c2e508d4f5"
            ]
        ]
    },
    {
        "id": "6bcdfbb26a968122",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW6-Function",
        "func": "// Retrieve the raw data from the Modbus Read node\n\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\n\n// Write the low word (second register) into the buffer at position 2\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Format the float value to 3 decimal places\nlet formattedValue = parseFloat(floatValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\n//msg.payload = formattedValue;\nmsg.payload = {\"adl200N_kW6\":formattedValue};\nflow.set(\"currentNode1\", formattedValue);\n// Return the formatted value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 500,
        "wires": [
            [
                "0a7a2510936c39b0",
                "4033da6b106960c0"
            ]
        ]
    },
    {
        "id": "d2517ab3e8695aa7",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW7-Function",
        "func": "// Retrieve the raw data from the Modbus Read node\n\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\n\n// Write the low word (second register) into the buffer at position 2\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Format the float value to 3 decimal places\nlet formattedValue = parseFloat(floatValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\n//msg.payload = formattedValue;\nmsg.payload = {\"adl200N_kW7\":formattedValue};\nflow.set(\"currentNode1\", formattedValue);\n// Return the formatted value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 580,
        "wires": [
            [
                "0a7a2510936c39b0",
                "4033da6b106960c0"
            ]
        ]
    },
    {
        "id": "5e790cfe26452fc9",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 700,
        "wires": []
    },
    {
        "id": "6c5ba31d70855788",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 780,
        "wires": []
    },
    {
        "id": "e37eeb46cca334b5",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 880,
        "wires": []
    },
    {
        "id": "7a19a38b3329866c",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 980,
        "wires": []
    },
    {
        "id": "0f0c8a411e906d78",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 1080,
        "wires": []
    },
    {
        "id": "7011057478bfedbf",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 1180,
        "wires": []
    },
    {
        "id": "ab8ff55618c2920c",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 1280,
        "wires": []
    },
    {
        "id": "8c949fa5f34bbc2f",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200N_kWh1_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\nlet formattedValue = parseFloat(doubleValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl200N_kWh1\": formattedValue};\nflow.set(\"adl200n-kWh1\", formattedValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 740,
        "wires": [
            [
                "0a7a2510936c39b0",
                "f5c5ccf8cf887ae2",
                "5e790cfe26452fc9"
            ]
        ]
    },
    {
        "id": "0c35247d16f946ca",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200N_kWh2_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\nlet formattedValue = parseFloat(doubleValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl200N_kWh2\": formattedValue};\nflow.set(\"adl200n-kWh2\",formattedValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 840,
        "wires": [
            [
                "0a7a2510936c39b0",
                "f5c5ccf8cf887ae2",
                "6c5ba31d70855788"
            ]
        ]
    },
    {
        "id": "06051cc79825ef02",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200N_kWh3_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\nlet formattedValue = parseFloat(doubleValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl200N_kWh3\": formattedValue};\nflow.set(\"adl200n-kWh3\", formattedValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 940,
        "wires": [
            [
                "0a7a2510936c39b0",
                "f5c5ccf8cf887ae2",
                "e37eeb46cca334b5"
            ]
        ]
    },
    {
        "id": "5b43b7da5c0bc0b6",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200N_kWh4_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\nlet formattedValue = parseFloat(doubleValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl200N_kWh4\": formattedValue};\nflow.set(\"adl200n-kWh4\", formattedValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1040,
        "wires": [
            [
                "0a7a2510936c39b0",
                "f5c5ccf8cf887ae2",
                "7a19a38b3329866c"
            ]
        ]
    },
    {
        "id": "c149f3c67c7a9e78",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200N_kWh5_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\nlet formattedValue = parseFloat(doubleValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl200N_kWh5\": doubleValue};\nflow.set(\"adl200n-kWh5\", formattedValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1140,
        "wires": [
            [
                "0a7a2510936c39b0",
                "f5c5ccf8cf887ae2"
            ]
        ]
    },
    {
        "id": "f797126e1b5fe5f0",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200N_kWh6_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\nlet formattedValue = parseFloat(doubleValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl200N_kWh6\": doubleValue};\nflow.set(\"adl200n-kWh6\", formattedValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1240,
        "wires": [
            [
                "0a7a2510936c39b0",
                "cc930f6d65c221d4",
                "7011057478bfedbf"
            ]
        ]
    },
    {
        "id": "198164266ff7178f",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200N_kWh7_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\nlet formattedValue = parseFloat(doubleValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl200N_kWh7\": formattedValue};\nflow.set(\"adl200n-kWh7\", formattedValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1360,
        "wires": [
            [
                "0a7a2510936c39b0",
                "cc930f6d65c221d4",
                "dfa09b119b5e579e",
                "ab8ff55618c2920c"
            ]
        ]
    },
    {
        "id": "0a7a2510936c39b0",
        "type": "mqtt out",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "MainBoxEnergyMQTTOutToThingsBoard",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 880,
        "y": 640,
        "wires": []
    },
    {
        "id": "e17459ae26383d8d",
        "type": "comment",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "kW and kWh from Computer Groups and Lightings",
        "info": "",
        "x": 930,
        "y": 460,
        "wires": []
    },
    {
        "id": "f99003d4c8e4116f",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n-kW1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 1460,
        "wires": []
    },
    {
        "id": "a08b7da23691a984",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n-kW2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 1540,
        "wires": []
    },
    {
        "id": "34aa1e22770cd99b",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n-kW3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 1620,
        "wires": []
    },
    {
        "id": "e84f4abeaad2adf3",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n-kW4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 1700,
        "wires": []
    },
    {
        "id": "60b40494bf40de89",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n-kWh1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1800,
        "wires": []
    },
    {
        "id": "88ea96861dcc91ef",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n-kWh2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1900,
        "wires": []
    },
    {
        "id": "a47f2850587c366f",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n-kWh3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1980,
        "wires": []
    },
    {
        "id": "ce8dcd00a6eac70a",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n-kWh4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 2060,
        "wires": []
    },
    {
        "id": "8702a23dec44bf78",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n-kW1-Function",
        "func": "// Retrieve the raw data from the Modbus Read node\n\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\n\n// Write the low word (second register) into the buffer at position 2\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Format the float value to 3 decimal places\nlet formattedValue = parseFloat(floatValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\n//msg.payload = formattedValue;\nmsg.payload = {\"adl400N_kW1\":formattedValue};\n//flow.set(\"currentNode1\",msg.payload);\n// Return the formatted value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1500,
        "wires": [
            [
                "706d67e5accb6992"
            ]
        ]
    },
    {
        "id": "5b3654bba289c7ba",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n-kW1-Function",
        "func": "// Retrieve the raw data from the Modbus Read node\n\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\n\n// Write the low word (second register) into the buffer at position 2\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Format the float value to 3 decimal places\nlet formattedValue = parseFloat(floatValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\n//msg.payload = formattedValue;\nmsg.payload = {\"adl400N_kW1\":formattedValue};\n//flow.set(\"currentNode1\",msg.payload);\n// Return the formatted value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1580,
        "wires": [
            [
                "706d67e5accb6992"
            ]
        ]
    },
    {
        "id": "5add218a8e86168b",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n-kW1-Function",
        "func": "// Retrieve the raw data from the Modbus Read node\n\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\n\n// Write the low word (second register) into the buffer at position 2\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Format the float value to 3 decimal places\nlet formattedValue = parseFloat(floatValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\n//msg.payload = formattedValue;\nmsg.payload = {\"adl400N_kW1\":formattedValue};\n//flow.set(\"currentNode1\",msg.payload);\n// Return the formatted value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1660,
        "wires": [
            [
                "706d67e5accb6992"
            ]
        ]
    },
    {
        "id": "f2f2a7fa95d549a2",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n-kW1-Function",
        "func": "// Retrieve the raw data from the Modbus Read node\n\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\n\n// Write the low word (second register) into the buffer at position 2\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Format the float value to 3 decimal places\nlet formattedValue = parseFloat(floatValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\n//msg.payload = formattedValue;\nmsg.payload = {\"adl400N_kW1\":formattedValue};\n//flow.set(\"currentNode1\",msg.payload);\n// Return the formatted value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1740,
        "wires": [
            [
                "706d67e5accb6992"
            ]
        ]
    },
    {
        "id": "6131640f4a5f732c",
        "type": "function",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "adl400N_kWh1_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\nlet formattedValue = parseFloat(doubleValue.toFixed(3));\n\nglobal.set(\"adl400n1-kWh1_last_seen\", Date.now());\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl400N_kWh1\": formattedValue};\nflow.set(\"adl400n-kWh1\", formattedValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1860,
        "wires": [
            [
                "706d67e5accb6992",
                "8730d57353c448ee",
                "3720b9b54a39b431"
            ]
        ]
    },
    {
        "id": "d14007d6bda7b498",
        "type": "function",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "adl400N_kWh2_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\nlet formattedValue = parseFloat(doubleValue.toFixed(3));\n\nglobal.set(\"adl400n1-kWh2_last_seen\", Date.now());\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl400N_kWh2\": formattedValue};\nflow.set(\"adl400n-kWh2\", formattedValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1940,
        "wires": [
            [
                "706d67e5accb6992",
                "6107a312e718e5cc",
                "3720b9b54a39b431"
            ]
        ]
    },
    {
        "id": "219e93d49e9410f3",
        "type": "function",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "adl400N_kWh3_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\nlet formattedValue = parseFloat(doubleValue.toFixed(3));\n\nglobal.set(\"adl400n1-kWh3_last_seen\", Date.now());\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl400N_kWh3\": formattedValue};\nflow.set(\"adl400n-kWh3\",formattedValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2020,
        "wires": [
            [
                "706d67e5accb6992",
                "3720b9b54a39b431"
            ]
        ]
    },
    {
        "id": "140147318b03a9fb",
        "type": "function",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "adl400N_kWh4_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\nlet formattedValue = parseFloat(doubleValue.toFixed(3));\n\nglobal.set(\"adl400n1-kWh4_last_seen\", Date.now());\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl400N_kWh4\": formattedValue};\nflow.set(\"adl400n-kWh4\", formattedValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2120,
        "wires": [
            [
                "706d67e5accb6992",
                "3720b9b54a39b431"
            ]
        ]
    },
    {
        "id": "706d67e5accb6992",
        "type": "mqtt out",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "A/CEnergyMQTTOutToThingsBoard",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "22a2b25621754385",
        "x": 800,
        "y": 1780,
        "wires": []
    },
    {
        "id": "67ad7c4bc2ae7c0f",
        "type": "comment",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "kW and kWh from A/C",
        "info": "",
        "x": 790,
        "y": 1500,
        "wires": []
    },
    {
        "id": "56124e35b93fe695",
        "type": "mqtt out",
        "z": "5596b8303f231669",
        "g": "3b3316ddd49a42c5",
        "name": "SensorDataTBTelemetry",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 2070,
        "y": 260,
        "wires": []
    },
    {
        "id": "ad7dfe98ae066042",
        "type": "rbe",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "LuxFilter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1680,
        "y": 100,
        "wires": [
            [
                "56124e35b93fe695"
            ]
        ]
    },
    {
        "id": "bfee625c10a92120",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "Lux_Funciton",
        "func": "let value = msg.payload[0];\nmsg.payload = {\"LuxVal\":value};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 100,
        "wires": [
            [
                "ad7dfe98ae066042",
                "ad588e60a64433f5"
            ]
        ]
    },
    {
        "id": "ad588e60a64433f5",
        "type": "rbe",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "Temp10Filter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1690,
        "y": 180,
        "wires": [
            [
                "56124e35b93fe695"
            ]
        ]
    },
    {
        "id": "3f2c0856bedf04f9",
        "type": "rbe",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "Humi10Filter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1690,
        "y": 240,
        "wires": [
            [
                "56124e35b93fe695"
            ]
        ]
    },
    {
        "id": "b5c13a8c5b47a3e7",
        "type": "rbe",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "Temp8Filter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1690,
        "y": 300,
        "wires": [
            [
                "56124e35b93fe695"
            ]
        ]
    },
    {
        "id": "3fca027094dbf031",
        "type": "rbe",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "Humi8Filter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1690,
        "y": 380,
        "wires": [
            [
                "56124e35b93fe695"
            ]
        ]
    },
    {
        "id": "86756bd552ce5cc1",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "temp-ID10",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Scale the value by dividing it by 10\nlet scaledValue = floatValue;\n\n// Format the scaled value to 1 decimal place\nlet formattedValue = parseFloat(scaledValue.toFixed(1));\n\n// Assign the formatted value to msg.payload\nmsg.payload ={\"Temperature-ID10\" :formattedValue};\n\n// Return the formatted value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 180,
        "wires": [
            [
                "ad588e60a64433f5"
            ]
        ]
    },
    {
        "id": "5ec9f7c16f55c39c",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "humi-ID10",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[2], 0); // High word\nbuffer.writeUInt16BE(rawData[3], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Scale the value by dividing it by 10\nlet scaledValue = floatValue;\n\n// Format the scaled value to 1 decimal place\nlet formattedValue = parseFloat(scaledValue.toFixed(1));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"Humidity-ID10\":formattedValue};\n\n// Return the formatted value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 220,
        "wires": [
            [
                "3f2c0856bedf04f9"
            ]
        ]
    },
    {
        "id": "47c8e678dfa97255",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "temp-ID8",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Scale the value by dividing it by 10\nlet scaledValue = floatValue;\n\n// Format the scaled value to 1 decimal place\nlet formattedValue = parseFloat(scaledValue.toFixed(1));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"Temperature-ID8\":formattedValue};\n\n// Return the formatted value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 300,
        "wires": [
            [
                "b5c13a8c5b47a3e7"
            ]
        ]
    },
    {
        "id": "942b19b5acc93a09",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "humi-ID8F",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[2], 0); // High word\nbuffer.writeUInt16BE(rawData[3], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Scale the value by dividing it by 10\nlet scaledValue = floatValue;\n\n// Format the scaled value to 1 decimal place\nlet formattedValue = parseFloat(scaledValue.toFixed(1));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"HumidityID8\":formattedValue};\n\n// Return the formatted value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 360,
        "wires": [
            [
                "3fca027094dbf031"
            ]
        ]
    },
    {
        "id": "b6c22b7f3662e050",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "Lux",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 60,
        "wires": []
    },
    {
        "id": "6a0628989b2766de",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "temp",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 140,
        "wires": []
    },
    {
        "id": "f71472b137c8b968",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "humi",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 260,
        "wires": []
    },
    {
        "id": "faa629858b7a04b2",
        "type": "mqtt in",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "MainBoxRelayControl",
        "topic": "v1/devices/me/rpc/request/+",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "ad30a05ccf560b61",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1340,
        "y": 1440,
        "wires": [
            [
                "cd380803ca7e2f55",
                "0b084ca7907139cf"
            ]
        ]
    },
    {
        "id": "cd380803ca7e2f55",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "MainBoxRelayDebug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 1360,
        "wires": []
    },
    {
        "id": "2843af1687a67adf",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "MainBoxRelayStatus",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 1520,
        "wires": []
    },
    {
        "id": "8d7dd5aef67d5dd3",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "MainBoxRelayStatusFunction",
        "func": "let statuses = msg.payload;\n\n// let gauge1 = statuses[0] ? 1 : 0 ;\n// let gauge2 = statuses[1] ? 1 : 0 ; \n// let gauge3 = statuses[2] ? 1 : 0 ; \n// let gauge4 = statuses[3] ? 1 : 0 ; \n// let gauge5 = statuses[4] ? 1 : 0 ; \n// let gauge6 = statuses[5] ? 1 : 0 ; \n// let gauge7 = statuses[6] ? 1 : 0 ; \n// let gauge8 = statuses[7] ? 1 : 0 ; \n\n// msg.payload = {\n//     \"gauge1\":gauge1,\n//     \"gauge2\":gauge2,\n//     \"gauge3\":gauge3,\n//     \"gauge4\":gauge4,\n//     \"gauge5\":gauge5,\n//     \"gauge6\":gauge6,\n//     \"gauge7\":gauge7,\n//     \"gauge8\":gauge8\n// };\n\nlet Switch1 = statuses[0] ? 1 : 0;\nlet Switch2 = statuses[1] ? 1 : 0 ;\nlet Switch3 = statuses[2] ? 1 : 0 ; \nlet Switch4 = statuses[3] ? 1 : 0 ; \nlet Switch5 = statuses[4] ? 1 : 0 ; \nlet Switch6 = statuses[5] ? 1 : 0 ; \n// let Switch7 = statuses[6] ? 1 : 0 ; \n// let Switch8 = statuses[7] ? 1 : 0 ; \n\nmsg.payload = {\n    \"gauge1\": Switch1,\n    \"gauge2\": Switch2,\n    \"gauge3\": Switch3,\n    \"gauge4\": Switch4,\n    \"gauge5\": Switch5,\n    \"gauge6\": Switch6,\n    // \"gauge7\": Switch7,\n    // \"gauge8\": Switch8\n};\n\n// node.warn(\"Status Update: \" + JSON.stringify(msg.payload)); // Debug\n\nreturn msg;\n\n\n// let coilStatuses = msg.payload.fc1 || [];  // ค่ารีเลย์จาก FC1\n// let switchStatuses = msg.payload.fc2 || []; // ค่า Switch จาก FC2\n\n// // ถ้ามีค่าให้ใช้ค่าจาก Switch จริง (FC2) ถ้าไม่มีให้ใช้ค่าจาก Relay (FC1)\n// let Switch1 = switchStatuses[0] !== undefined ? (switchStatuses[0] ? 1 : 0) : (coilStatuses[0] ? 1 : 0);\n// let Switch2 = switchStatuses[1] !== undefined ? (switchStatuses[1] ? 1 : 0) : (coilStatuses[1] ? 1 : 0);\n// let Switch3 = switchStatuses[2] !== undefined ? (switchStatuses[2] ? 1 : 0) : (coilStatuses[2] ? 1 : 0);\n// let Switch4 = switchStatuses[3] !== undefined ? (switchStatuses[3] ? 1 : 0) : (coilStatuses[3] ? 1 : 0);\n// let Switch5 = switchStatuses[4] !== undefined ? (switchStatuses[4] ? 1 : 0) : (coilStatuses[4] ? 1 : 0);\n// let Switch6 = switchStatuses[5] !== undefined ? (switchStatuses[5] ? 1 : 0) : (coilStatuses[5] ? 1 : 0);\n\n// msg.payload = {\n//     \"gauge1\": Switch1,\n//     \"gauge2\": Switch2,\n//     \"gauge3\": Switch3,\n//     \"gauge4\": Switch4,\n//     \"gauge5\": Switch5,\n//     \"gauge6\": Switch6\n// };\n\n// node.warn(\"Updated Relay Status: \" + JSON.stringify(msg.payload));\n// return msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 1620,
        "wires": [
            [
                "b16a40620f61fd12",
                "bc017de29d5b5e07"
            ]
        ]
    },
    {
        "id": "b16a40620f61fd12",
        "type": "rbe",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "MainBoxRelayStatusFilter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1890,
        "y": 1600,
        "wires": [
            [
                "0fd628e1061306b0",
                "433be1ed6e89cca6"
            ]
        ]
    },
    {
        "id": "0fd628e1061306b0",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "MainBoxRelayStatusDebug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2200,
        "y": 1660,
        "wires": []
    },
    {
        "id": "433be1ed6e89cca6",
        "type": "mqtt out",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "MainBoxRelayStatusTB",
        "topic": "v1/devices/me/attributes",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 2190,
        "y": 1540,
        "wires": []
    },
    {
        "id": "13d34a9ac0328814",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "MainBoxRelayControlFunction",
        "func": "const addressMap = {\n    \"Switch1\": 0,\n    \"Switch2\": 1,\n    \"Switch3\": 2,\n    \"Switch4\": 3,\n    \"Switch5\": 4,\n    \"Switch6\": 5\n};\n\nconst switchNo = msg.payload.params.switchNo;\nconst value = msg.payload.params.value;\nconst modbusAddress = addressMap[switchNo];\n\nif (modbusAddress !== undefined) {\n    msg.payload = {\n        //\"value\": [value ? 0xFF00 : 0x0000],\n        value: value ? 1 : 0,\n        \"fc\": 5,\n        \"unitid\": \"11\",\n        \"quantity\": \"1\",\n        \"address\": modbusAddress\n    };\n    return msg;\n} else {\n    node.error(\"Error\", msg);\n    return null; // stop the flow\n}\n\n\n// const addressMap = {\n//     \"Switch1\": 0,\n//     \"Switch2\": 1,\n//     \"Switch3\": 2,\n//     \"Switch4\": 3,\n//     \"Switch5\": 4,\n//     \"Switch6\": 5\n// };\n\n// // ✅ ดึงค่าที่ส่งมาจาก ThingsBoard\n// const switchNo = msg.payload?.params?.switchNo;\n// const value = msg.payload?.params?.value; // ค่า true/false\n\n// if (!switchNo || !(switchNo in addressMap)) {\n//     node.error(\"❌ Error: Invalid Switch Number\", msg);\n//     return null; // หยุด Flow ถ้าหมายเลข Switch ไม่ถูกต้อง\n// }\n\n// const modbusAddress = addressMap[switchNo];\n\n// // ✅ อัปเดตค่า Switch Array ใน Flow Context\n// let statuses = flow.get(\"lighting_status\") || [false, false, false, false, false, false, false, false]; // ถ้ายังไม่มีให้ตั้งเป็น false\n// statuses[modbusAddress] = value; // อัปเดตสถานะใหม่\n// flow.set(\"lighting_status\", statuses); // บันทึกลง Flow Context\n\n// // ✅ ต้องดึงค่าใหม่จาก Flow Context อีกครั้ง เพื่อให้แน่ใจว่าอัปเดตล่าสุด\n// statuses = flow.get(\"lighting_status\");\n\n// // ✅ แปลงค่า Array เป็น JSON สำหรับ ThingsBoard\n// let gaugeStatus = {\n//     \"gauge1\": statuses[0],\n//     \"gauge2\": statuses[1],\n//     \"gauge3\": statuses[2],\n//     \"gauge4\": statuses[3],\n//     \"gauge5\": statuses[4],\n//     \"gauge6\": statuses[5]\n//     // สามารถเพิ่ม gauge7, gauge8 ได้ถ้ามีการเพิ่ม Switch\n// };\n\n// node.warn(\"🟢 Updated Status: \" + JSON.stringify(gaugeStatus)); // Debugging\n\n// // ✅ ส่งค่าไปยัง Modbus และ ThingsBoard พร้อมกัน\n// return [msg, { payload: gaugeStatus }];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1440,
        "wires": [
            [
                "57787dc47fd01688",
                "36b2e28259e4e6c3"
            ]
        ]
    },
    {
        "id": "27011c37b0deae9e",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "MainBoxRelayControlFunctionDebug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 1360,
        "wires": []
    },
    {
        "id": "c98bd362c6cd428c",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "MainBoxRelayControlADM",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2520,
        "y": 1460,
        "wires": []
    },
    {
        "id": "5c4045466e260fe9",
        "type": "mqtt in",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Box2AirConControlRPC",
        "topic": "v1/devices/me/rpc/request/+",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e60d06a0a8f09ffe",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1340,
        "y": 660,
        "wires": [
            [
                "148e62ae538319af",
                "b5b8364de27ff624",
                "9da302ae32e5c758",
                "af-roomstatus-resend-switch"
            ]
        ]
    },
    {
        "id": "148e62ae538319af",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "AirConControlThingsBoardRPCDebug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 600,
        "wires": []
    },
    {
        "id": "ea9c9fbb801b5a94",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Box2RelayControlAir",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2880,
        "y": 580,
        "wires": []
    },
    {
        "id": "5c46abdf794cddf0",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Box2RelayStatusDebug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 1180,
        "wires": []
    },
    {
        "id": "39087e74c181a191",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Box2RelayStatusFunction",
        "func": "let statuses = msg.payload;\n\n// let gauge1 = statuses[0] ? 1 : 0 ;\n// let gauge2 = statuses[1] ? 1 : 0 ; \n// let gauge3 = statuses[2] ? 1 : 0 ; \n// let gauge4 = statuses[3] ? 1 : 0 ; \n// let gauge5 = statuses[4] ? 1 : 0 ; \n// let gauge6 = statuses[5] ? 1 : 0 ; \n// let gauge7 = statuses[6] ? 1 : 0 ; \n// let gauge8 = statuses[7] ? 1 : 0 ; \n\n// msg.payload = {\n//     \"ACgauge1\":gauge1,\n//     \"ACgauge2\":gauge2,\n//     \"ACgauge3\":gauge3,\n//     \"ACgauge4\":gauge4,\n//     \"ACgauge5\":gauge5,\n//     \"ACgauge6\":gauge6,\n//     \"ACgauge7\":gauge7,\n//     \"ACgauge8\":gauge8\n// };\nlet gauge7 = statuses[0] ? 1 : 0;\nlet gauge8 = statuses[1] ? 1 : 0;\nlet gauge3 = statuses[2] ? 1 : 0;\nlet gauge4 = statuses[3] ? 1 : 0;\nlet gauge5 = statuses[4] ? 1 : 0;\nlet gauge6 = statuses[5] ? 1 : 0;\nlet gauge1 = statuses[6] ? 1 : 0;\nlet gauge2 = statuses[7] ? 1 : 0;\n\nmsg.payload = {\n    \"ACgauge7\": gauge1, \n    \"ACgauge8\": gauge2,\n    \"ACgauge3\": gauge3,\n    \"ACgauge4\": gauge4,\n    \"ACgauge5\": gauge5,\n    \"ACgauge6\": gauge6,\n    \"ACgauge2\": gauge7, \n    \"ACgauge1\": gauge8\n};\nflow.set(\"relayStatusNode\",msg.payload);\n\nreturn msg;\n\n\n// let statuses = msg.payload || []; // ป้องกันกรณี msg.payload เป็น null หรือ undefined\n\n// // ตรวจสอบว่าข้อมูลมีขนาดเพียงพอ\n// if (statuses.length < 8) {\n//     node.error(\"Error: Modbus data length is invalid\", msg);\n//     return null;\n// }\n\n// // แปลงค่า Boolean เป็น 1 (ON) หรือ 0 (OFF)\n// let gauge1 = statuses[0] ? 1 : 0;\n// let gauge2 = statuses[1] ? 1 : 0;\n// let gauge3 = statuses[2] ? 1 : 0;\n// let gauge4 = statuses[3] ? 1 : 0;\n// let gauge5 = statuses[4] ? 1 : 0;\n// let gauge6 = statuses[5] ? 1 : 0;\n// let gauge7 = statuses[6] ? 1 : 0;\n// let gauge8 = statuses[7] ? 1 : 0;\n\n// // สร้าง payload ส่งไปยัง ThingsBoard\n// msg.payload = {\n//     \"ACgauge1\": gauge1,\n//     \"ACgauge2\": gauge2,\n//     \"ACgauge3\": gauge3,\n//     \"ACgauge4\": gauge4,\n//     \"ACgauge5\": gauge5,\n//     \"ACgauge6\": gauge6,\n//     \"ACgauge7\": gauge7,\n//     \"ACgauge8\": gauge8\n// };\n\n// // เก็บค่าล่าสุดใน flow\n// flow.set(\"relayStatusNode\", msg.payload);\n\n// // Debug ข้อมูลก่อนส่งออก\n// node.warn(\"Relay Status: \" + JSON.stringify(msg.payload));\n\n// return msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1160,
        "wires": [
            [
                "ca8af7ea28e9e4b5"
            ]
        ]
    },
    {
        "id": "a908914b172dddb9",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Box2RelayStatusFunctionDebug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 1120,
        "wires": []
    },
    {
        "id": "ca8af7ea28e9e4b5",
        "type": "rbe",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Box2RelayControlFilter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1890,
        "y": 1180,
        "wires": [
            [
                "a908914b172dddb9",
                "5ba33bfd8cc9d09a"
            ]
        ]
    },
    {
        "id": "89034716ad2bfac2",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Box2RelayControlFunction",
        "func": "const addressMap = {\n    \"Switch1\": 0,\n    \"Switch2\": 1,\n    \"Switch3\": 2,\n    \"Switch4\": 3,\n    \"Switch5\": 4,\n    \"Switch6\": 5,\n    \"Switch7\": 6,\n    \"Switch8\": 7\n};\n\n\n\nconst switchNo = msg.payload.params.switchNo;\nconst value = msg.payload.params.value;\nconst modbusAddress = addressMap[switchNo];\n\nfunction checkDependencySwitch(switchNo) {\n    const relayStatus = flow.get(\"relayStatusNode\") || {};\n    \n    switch(switchNo){\n        case \"Switch1\": return relayStatus.ACgauge2 == 0;\n        case \"Switch3\": return relayStatus.ACgauge4 == 0;\n        case \"Switch5\": return relayStatus.ACgauge6 == 0;\n        case \"Switch7\": return relayStatus.ACgauge8 == 0;\n        default: return true;\n    }\n}\n\nif (modbusAddress !== undefined) {\n    // Check for Switch 1, 3, 5, 7 (momentary ON/OFF)\n    if ([\"Switch1\", \"Switch3\", \"Switch5\", \"Switch7\"].includes(switchNo)) {\n        // Create ON and OFF messages for momentary behavior\n        if (checkDependencySwitch(switchNo)){\n        let onMessage = {\n            payload: {\n                value: true, // ON state\n                \"fc\": 5,\n                \"unitid\": \"11\",\n                \"quantity\": \"1\",\n                \"address\": modbusAddress\n            }\n        };\n\n        let offMessage = {\n            payload: {\n                value: false, // OFF state\n                \"fc\": 5,\n                \"unitid\": \"11\",\n                \"quantity\": \"1\",\n                \"address\": modbusAddress\n            }\n        };\n\n        // Send ON message immediately\n        node.send(onMessage);\n\n        // Send OFF message after 1 second\n        setTimeout(() => {\n            node.send(offMessage);\n        }, 1000);\n\n        return null;}\n        else {\n            return node.error(\"my error message\", msg);\n        } \n    } else if ([\"Switch2\", \"Switch4\", \"Switch6\", \"Switch8\"].includes(switchNo)) {\n        // Normal ON/OFF behavior for Switch 0, 2, 4, 6\n        let message = {\n            payload: {\n                value: value ? true : false, // ON when true, OFF when false\n                \"fc\": 5,\n                \"unitid\": \"11\",\n                \"quantity\": \"1\",\n                \"address\": modbusAddress\n            }\n        };\n\n        return message; // Send the message\n    }\n} else {\n    //node.error(\"Error: Invalid switch number\", msg);\n    return null; // Stop the flow\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "5ba33bfd8cc9d09a",
        "type": "mqtt out",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Box2AirConRelayStatusTB",
        "topic": "v1/devices/me/attributes",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e60d06a0a8f09ffe",
        "x": 2220,
        "y": 1180,
        "wires": []
    },
    {
        "id": "47414ac03fa0d3a5",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Box2RelayOption2Function",
        "func": "// const addressMap = {\n//     \"211A_OFF\": 0,\n//     \"211A_ON\": 1,\n//     \"211B_OFF\": 2,\n//     \"211B_ON\": 3,\n//     \"212A_OFF\": 4,\n//     \"212A_ON\": 5,\n//     \"212B_OFF\": 6,\n//     \"212B_ON\": 7\n// };\nconst addressMap = {\n    \"212B_OFF\": 0,\n    \"212B_ON\": 1,\n    \"211B_OFF\": 2,\n    \"211B_ON\": 3,\n    \"212A_OFF\": 4,\n    \"212A_ON\": 5,\n    \"211A_OFF\": 6,\n    \"211A_ON\": 7\n};\n\nconst switchNo = msg.payload.switchNo;\n//const value = msg.payload.params.value;\nconst modbusAddress = addressMap[switchNo];\n\nif (modbusAddress !== undefined) {\n    // Create an array to hold both ON and OFF messages\n    let messages = [];\n    \n    // Create the ON message\n    let onMessage = {\n        payload: {\n            value: true, // ON state\n            \"fc\": 5,\n            \"unitid\": \"1\",\n            \"quantity\": \"1\",\n            \"address\": modbusAddress\n        }\n    };\n\n    // Create the OFF message\n    let offMessage = {\n        payload: {\n            value: false, // OFF state\n            \"fc\": 5,\n            \"unitid\": \"1\",\n            \"quantity\": \"1\",\n            \"address\": modbusAddress\n        }\n    };\n\n    // Add ON message to the array\n    messages.push(onMessage);\n\n    // Add OFF message to the array after a 500ms delay\n    setTimeout(() => {\n        node.send(offMessage); // Send OFF message\n    }, 2000);\n\n    // Return the ON message immediately\n    return onMessage;\n} else {\n    node.error(\"Error: Invalid switch number\", msg);\n    return null; // Stop the flow\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 600,
        "wires": [
            [
                "ea9c9fbb801b5a94",
                "9e51c555566d2cb5"
            ]
        ]
    },
    {
        "id": "41f241c2e508d4f5",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "Computer Groups Total kW",
        "func": "let kW1 = flow.get(\"adl200n-kW1\");\nlet kW2 = flow.get(\"adl200n-kW2\");\nlet kW3 = flow.get(\"adl200n-kW3\");\nlet kW4 = flow.get(\"adl200n-kW4\");\nlet kW5 = flow.get(\"adl200n-kW5\");\nlet total = kW1 + kW2 + kW3 + kW4 + kW5;\nmsg.payload = {\"Computer Groups Total kW\": total};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 280,
        "wires": [
            [
                "b0fe041e9981ada1",
                "0a7a2510936c39b0"
            ]
        ]
    },
    {
        "id": "b0fe041e9981ada1",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "Computer Groups Total kW",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 240,
        "wires": []
    },
    {
        "id": "4033da6b106960c0",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "Lightings Total kW",
        "func": "let kW6 = flow.get(\"adl200N_kW6\");\nlet kW7 = flow.get(\"adl200N-kW7\");\nlet total = kW6 + kW7;\nmsg.payload = {\"Lightings Total kW\": total};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 380,
        "wires": [
            [
                "95c34fc2a42d482e",
                "0a7a2510936c39b0"
            ]
        ]
    },
    {
        "id": "95c34fc2a42d482e",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "Lightings Total kW",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 360,
        "wires": []
    },
    {
        "id": "dfa09b119b5e579e",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "Total kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1360,
        "wires": []
    },
    {
        "id": "05f56bd6bc5aee69",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Box2AirConStatusDebug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 1200,
        "wires": []
    },
    {
        "id": "cc3c3f300d352c2a",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "name": "Box2RelayStatusFunction",
        "func": "let statuses = msg.payload;\n\nlet gauge1 = statuses[0] ? 0 : 1 ; //AC211A\nlet gauge2 = statuses[1] ? 0 : 1 ; //AC212A\nlet gauge3 = statuses[2] ? 0 : 1 ; //AC211B\nlet gauge4 = statuses[3] ? 0 : 1 ;  //AC212B\n\n//edit\nmsg.payload = {\n    \"AC212B\":gauge4,\n    \"AC211B\":gauge3,\n    \"AC212A\":gauge2,\n    \"AC211A\":gauge1\n};\n// msg.payload = {\n//     \"AC211A\":gauge4,\n//     \"AC211B\":gauge3,\n//     \"AC212A\":gauge2,\n//     \"AC212B\":gauge1\n// };\nflow.set(\"ACStatusNode\",msg.payload);\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1260,
        "wires": [
            [
                "7e4ae600543efd7a"
            ]
        ]
    },
    {
        "id": "9b90a601fdd79fdd",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "name": "Box2AirConStatusDebug-Funtion",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2160,
        "y": 1260,
        "wires": []
    },
    {
        "id": "7e4ae600543efd7a",
        "type": "rbe",
        "z": "5596b8303f231669",
        "d": true,
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1870,
        "y": 1260,
        "wires": [
            [
                "9b90a601fdd79fdd",
                "5ba33bfd8cc9d09a"
            ]
        ]
    },
    {
        "id": "8730d57353c448ee",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n-kWh1-Funtion",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1860,
        "wires": []
    },
    {
        "id": "50bde397b80c61ce",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "name": "function 10",
        "func": "msg.payload = flow.get(\"adl400n-kWh1\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 727,
        "y": 1695,
        "wires": [
            [
                "3c9cbaf7e0d4906d"
            ]
        ]
    },
    {
        "id": "3c9cbaf7e0d4906d",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "b948bb12e7f7f6a6",
        "name": "debug 41",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1680,
        "wires": []
    },
    {
        "id": "6107a312e718e5cc",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n-kWh2-Funtion",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1920,
        "wires": []
    },
    {
        "id": "47555bc6ce0d4e5f",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "name": "debug 42",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 2200,
        "wires": []
    },
    {
        "id": "3720b9b54a39b431",
        "type": "function",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "A/C-TotalkWh",
        "func": "let kWh1 = flow.get(\"adl400n-kWh1\");\nlet kWh2 = flow.get(\"adl400n-kWh2\");\nlet kWh3 = flow.get(\"adl400n-kWh3\");\nlet kWh4 = flow.get(\"adl400n-kWh4\");\n\nlet totalkWh = kWh1 + kWh2 + kWh3 + kWh4;\nmsg.payload = {\"AC-TotalkWh\": totalkWh};\nflow.set(\"AC-TotalkWh\",totalkWh);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1980,
        "wires": [
            [
                "02a9cc0c21529ba1",
                "8cd66e700af499b8",
                "96a2c3d0f8ef8399"
            ]
        ]
    },
    {
        "id": "02a9cc0c21529ba1",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "A/C-TotalkWh",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 2060,
        "wires": []
    },
    {
        "id": "f5c5ccf8cf887ae2",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "CG-TotalkWh",
        "func": "let kWh1 = flow.get(\"adl200n-kWh1\");\nlet kWh2 = flow.get(\"adl200n-kWh2\");\nlet kWh3 = flow.get(\"adl200n-kWh3\");\nlet kWh4 = flow.get(\"adl200n-kWh4\");\nlet kWh5 = flow.get(\"adl200n-kWh5\");\n\nlet totalkWh = kWh1 + kWh2 + kWh3 + kWh4 + kWh5;\nmsg.payload = {\"CG-TotalkWh\": totalkWh};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 920,
        "wires": [
            [
                "0a7a2510936c39b0"
            ]
        ]
    },
    {
        "id": "cc930f6d65c221d4",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "Lighting-TotalkWh",
        "func": "let kWh6 = flow.get(\"adl200n-kWh6\");\nlet kWh7 = flow.get(\"adl200n-kWh7\");\n\nlet totalkWh = kWh6 + kWh7;\nmsg.payload = {\"Lighting-TotalkWh\": totalkWh};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1260,
        "wires": [
            [
                "0a7a2510936c39b0"
            ]
        ]
    },
    {
        "id": "3a6fecd208ca379e",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "function 11",
        "func": "// // Initialize states for each switch (if not already stored in flow)\n// let states = flow.get(\"states_withTimeStamp\") || {\n//     \"211A\": 0,\n//     \"211B\": 0,\n//     \"212A\": 0,\n//     \"212B\": 0\n// };\n\n// let lastOfftimes = flow.get(\"ON_OFF_lastOffTimes\") || {\n//     \"211A\": 0,\n//     \"211B\": 0,\n//     \"212A\": 0,\n//     \"212B\": 0\n// };\n\n// // let states = flow.get(\"states_withTimeStamp\") || {\n// //     \"212B\": 0,\n// //     \"211B\": 0,\n// //     \"212A\": 0,\n// //     \"211A\": 0\n// // };\n\n// // let lastOfftimes = flow.get(\"ON_OFF_lastOffTimes\") || {\n// //     \"212B\": 0,\n// //     \"211B\": 0,\n// //     \"212A\": 0,\n// //     \"211A\": 0\n// // };\n\n// const COOLDOWN_PERIOD = 10000; // 10 seconds in milliseconds\n// const currentTime = Date.now();\n\n\n// // // ✅ ตั้งค่าช่วงเวลาป้องกันการกดเปิด/ปิดซ้ำ (15 นาที)\n// // const COOLDOWN_PERIOD = 15 * 60 * 1000; // 15 นาที (มิลลิวินาที)\n// // const currentTime = Date.now();\n\n// // Initialize outputs\n// let output1 = null; // For operation (both ON and OFF)\n// let output2 = null; // For warnings\n\n// // Extract switch base name (e.g., \"211A_ON\" -> \"211A\")\n// const switchNo = msg.payload.params.switchNo;\n// const baseSwitchNo = switchNo.split('_')[0];\n// const operation = switchNo.split('_')[1];\n// const elapsed = currentTime - (lastOfftimes[baseSwitchNo] || 0);\n\n// if (operation === \"ON\") {\n//     if (states[baseSwitchNo] === 1) {\n//         // Already ON - send warning\n//         msg.payload = { \n//             \"warning\": \"It is already ON\",\n//             \"switchNo\": switchNo\n//         };\n//         output2 = msg;\n//     } else {\n//         if (elapsed < COOLDOWN_PERIOD) {\n//             // In cooldown period - send warning\n//             const remainingMs = COOLDOWN_PERIOD - elapsed;\n//             const remainingSeconds = Math.ceil(remainingMs / 1000);\n//             msg.payload = { \n//                 \"warning\": `Wait Until ${remainingSeconds} Seconds!`,\n//                 \"switchNo\": switchNo\n//             };\n//             output2 = msg;\n//         } else {\n//             // Allow ON operation\n//             states[baseSwitchNo] = 1;\n//             msg.payload = { \n//                 Switch1: \"ON\",\n//                 \"switchNo\": switchNo,\n//                 \"Last Off Time\": new Date(lastOfftimes[baseSwitchNo]).toISOString(),\n//                 \"Current Time\": new Date(currentTime).toISOString()\n//             };\n//             output1 = msg;\n//         }\n//     }\n// } else if (operation === \"OFF\") {\n//     if (states[baseSwitchNo] === 0) {\n//         // Already OFF - send warning\n//         msg.payload = { \n//             \"warning\": \"It is already OFF\",\n//             \"switchNo\": switchNo\n//         };\n//         output2 = msg;\n//     } else {\n//         // Allow OFF operation\n//         states[baseSwitchNo] = 0;\n//         lastOfftimes[baseSwitchNo] = currentTime;\n//         msg.payload = { \n//             Switch1: \"OFF\",\n//             \"switchNo\": switchNo\n//         };\n//         output1 = msg;\n//     }\n// }\n\n// // Persist states and lastOfftimes\n// flow.set(\"states_withTimeStamp\", states);\n// flow.set(\"ON_OFF_lastOffTimes\", lastOfftimes);\n\n// // Return array with two outputs: [operation, warning]\n// return [output1, output2];\n\n\n\n// // Initialize states for each switch (if not already stored in flow)\n// let states = flow.get(\"states_withTimeStamp\") || {\n//     \"211A\": 0,\n//     \"211B\": 0,\n//     \"212A\": 0,\n//     \"212B\": 0\n// };\n\n// let lastChangeTimes = flow.get(\"ON_OFF_lastChangeTimes\") || {\n//     \"211A\": 0,\n//     \"211B\": 0,\n//     \"212A\": 0,\n//     \"212B\": 0\n// };\n\n// // ตั้งค่าช่วงเวลาป้องกันการเปลี่ยนสถานะ (15 นาที)\n// const COOLDOWN_PERIOD = 15 * 60 * 1000; // 15 นาที (900,000 มิลลิวินาที)\n// const currentTime = Date.now();\n\n// // Initialize outputs\n// let output1 = null; // สำหรับการเปลี่ยนสถานะ (ON / OFF)\n// let output2 = null; // สำหรับคำเตือน\n\n// // ตรวจสอบ msg.payload.params และ switchNo\n// if (!msg.payload || !msg.payload.params || !msg.payload.params.switchNo) {\n//     msg.payload = { \"error\": \"Invalid input: switchNo is missing\" };\n//     return [null, msg]; // ส่ง error ออกที่ output2\n// }\n\n// // ดึงหมายเลขสวิตช์และประเภทของคำสั่ง (ON หรือ OFF)\n// const switchNo = msg.payload.params.switchNo;\n// const parts = switchNo.split('_');\n\n// if (parts.length !== 2) {\n//     msg.payload = { \"error\": \"Invalid switchNo format. Expected format: 'XXX_ON' or 'XXX_OFF'\" };\n//     return [null, msg];\n// }\n\n// const baseSwitchNo = parts[0]; // เช่น \"211A\"\n// const operation = parts[1]; // เช่น \"ON\" หรือ \"OFF\"\n\n// const elapsed = currentTime - (lastChangeTimes[baseSwitchNo] || 0);\n\n// if (operation === \"ON\") {\n//     if (states[baseSwitchNo] === 1) {\n//         // สวิตช์อยู่ในสถานะเปิดแล้ว\n//         msg.payload = {\n//             \"warning\": \"It is already ON\",\n//             \"switchNo\": switchNo\n//         };\n//         output2 = msg;\n//     } else {\n//         if (elapsed < COOLDOWN_PERIOD) {\n//             // ยังอยู่ในช่วงหน่วงเวลา\n//             const remainingMs = COOLDOWN_PERIOD - elapsed;\n//             const remainingMinutes = Math.ceil(remainingMs / (60 * 1000));\n//             msg.payload = {\n//                 \"warning\": `Wait ${remainingMinutes} minutes before turning ON!`,\n//                 \"switchNo\": switchNo\n//             };\n//             output2 = msg;\n//         } else {\n//             // อนุญาตให้เปิด\n//             states[baseSwitchNo] = 1;\n//             lastChangeTimes[baseSwitchNo] = currentTime;\n//             msg.payload = {\n//                 \"Switch1\": \"ON\",\n//                 \"switchNo\": switchNo,\n//                 \"Last Change Time\": new Date(lastChangeTimes[baseSwitchNo]).toISOString(),\n//                 \"Current Time\": new Date(currentTime).toISOString()\n//             };\n//             output1 = msg;\n//         }\n//     }\n// } else if (operation === \"OFF\") {\n//     if (states[baseSwitchNo] === 0) {\n//         // สวิตช์อยู่ในสถานะปิดแล้ว\n//         msg.payload = {\n//             \"warning\": \"It is already OFF\",\n//             \"switchNo\": switchNo\n//         };\n//         output2 = msg;\n//     } else {\n//         if (elapsed < COOLDOWN_PERIOD) {\n//             // ยังอยู่ในช่วงหน่วงเวลา\n//             const remainingMs = COOLDOWN_PERIOD - elapsed;\n//             const remainingMinutes = Math.ceil(remainingMs / (60 * 1000));\n//             msg.payload = {\n//                 \"warning\": `Wait ${remainingMinutes} minutes before turning OFF!`,\n//                 \"switchNo\": switchNo\n//             };\n//             output2 = msg;\n//         } else {\n//             // อนุญาตให้ปิด\n//             states[baseSwitchNo] = 0;\n//             lastChangeTimes[baseSwitchNo] = currentTime;\n//             msg.payload = {\n//                 \"Switch1\": \"OFF\",\n//                 \"switchNo\": switchNo,\n//                 \"Last Change Time\": new Date(lastChangeTimes[baseSwitchNo]).toISOString(),\n//                 \"Current Time\": new Date(currentTime).toISOString()\n//             };\n//             output1 = msg;\n//         }\n//     }\n// } else {\n//     // กรณี operation ไม่ใช่ \"ON\" หรือ \"OFF\"\n//     msg.payload = { \"error\": \"Invalid operation. Expected 'ON' or 'OFF'\" };\n//     return [null, msg];\n// }\n\n// // บันทึกค่าลง flow\n// flow.set(\"states_withTimeStamp\", states);\n// flow.set(\"ON_OFF_lastChangeTimes\", lastChangeTimes);\n\n// // คืนค่าผลลัพธ์ออกไปยัง Node-RED\n// return [output1, output2];\n\n\n// โหลดค่าจาก flow context (เก็บสถานะปัจจุบัน)\nlet states = flow.get(\"states_withTimeStamp\") || {\n    \"211A\": 0,\n    \"211B\": 0,\n    \"212A\": 0,\n    \"212B\": 0\n};\n\nlet lastChangeTimes = flow.get(\"ON_OFF_lastChangeTimes\") || {\n    \"211A\": 0,\n    \"211B\": 0,\n    \"212A\": 0,\n    \"212B\": 0\n};\n\n// ตั้งค่าช่วงเวลาหน่วง (15 นาที)\nconst COOLDOWN_PERIOD = 15 * 60 * 1000; // 15 นาที (900,000 มิลลิวินาที)\nconst currentTime = Date.now();\n\n// Initialize outputs\nlet output1 = null; // ใช้สำหรับเปลี่ยนสถานะ (ส่งค่าไป ThingsBoard)\nlet output2 = null; // ใช้สำหรับแจ้งเตือน (Cooldown หรือ Error)\n\n// ตรวจสอบ payload\nif (!msg.payload || !msg.payload.params || !msg.payload.params.switchNo) {\n    msg.payload = { \"error\": \"Invalid input: switchNo is missing\" };\n    return [null, msg]; // ส่ง error ไปยัง output2\n}\n\n// ดึงค่าหมายเลขสวิตช์\nconst switchNo = msg.payload.params.switchNo;\nconst parts = switchNo.split('_');\n\nif (parts.length !== 2) {\n    msg.payload = { \"error\": \"Invalid switchNo format. Expected format: 'XXX_ON' or 'XXX_OFF'\" };\n    return [null, msg];\n}\n\nconst baseSwitchNo = parts[0]; // เช่น \"211A\"\nconst operation = parts[1]; // เช่น \"ON\" หรือ \"OFF\"\n\nconst elapsed = currentTime - (lastChangeTimes[baseSwitchNo] || 0);\nconst remainingMs = COOLDOWN_PERIOD - elapsed;\nconst remainingMinutes = Math.ceil(remainingMs / (60 * 1000));\n\n// สร้าง payload ที่จะส่งไปยัง ThingsBoard\nlet telemetryData = {\n    \"switchNo\": switchNo,\n    \"ready\": elapsed >= COOLDOWN_PERIOD ? \"ready\" : \"cooldown\",\n    \"remaining_time\": elapsed >= COOLDOWN_PERIOD ? 0 : remainingMinutes\n};\n\nif (operation === \"ON\") {\n    if (states[baseSwitchNo] === 1) {\n        msg.payload = { \"warning\": \"It is already ON\", \"switchNo\": switchNo };\n        output2 = msg;\n    } else if (elapsed < COOLDOWN_PERIOD) {\n        msg.payload = { \"warning\": `Wait ${remainingMinutes} minutes before turning ON!`, \"switchNo\": switchNo };\n        output2 = msg;\n    } else {\n        states[baseSwitchNo] = 1;\n        lastChangeTimes[baseSwitchNo] = currentTime;\n        telemetryData[\"Switch1\"] = \"ON\";\n        telemetryData[\"Last Change Time\"] = new Date(lastChangeTimes[baseSwitchNo]).toISOString();\n        output1 = { payload: telemetryData };\n    }\n} else if (operation === \"OFF\") {\n    if (states[baseSwitchNo] === 0) {\n        msg.payload = { \"warning\": \"It is already OFF\", \"switchNo\": switchNo };\n        output2 = msg;\n    } else if (elapsed < COOLDOWN_PERIOD) {\n        msg.payload = { \"warning\": `Wait ${remainingMinutes} minutes before turning OFF!`, \"switchNo\": switchNo };\n        output2 = msg;\n    } else {\n        states[baseSwitchNo] = 0;\n        lastChangeTimes[baseSwitchNo] = currentTime;\n        telemetryData[\"Switch1\"] = \"OFF\";\n        telemetryData[\"Last Change Time\"] = new Date(lastChangeTimes[baseSwitchNo]).toISOString();\n        output1 = { payload: telemetryData };\n    }\n} else {\n    msg.payload = { \"error\": \"Invalid operation. Expected 'ON' or 'OFF'\" };\n    return [null, msg];\n}\n\n// บันทึกค่าลง flow\nflow.set(\"states_withTimeStamp\", states);\nflow.set(\"ON_OFF_lastChangeTimes\", lastChangeTimes);\n\n// คืนค่าผลลัพธ์\nreturn [output1, output2];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 660,
        "wires": [
            [
                "4f4679437d48814b",
                "47414ac03fa0d3a5",
                "aba32a9b3aad775f",
                "0b857a00928cba83",
                "5759399d1e4b7c71"
            ],
            [
                "56124e35b93fe695",
                "5759399d1e4b7c71"
            ]
        ]
    },
    {
        "id": "4f4679437d48814b",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "operation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 680,
        "wires": []
    },
    {
        "id": "d49b95394ea1beb9",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW1-Function",
        "func": "// Retrieve the raw data from the Modbus Read node\n\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\n\n// Write the low word (second register) into the buffer at position 2\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Format the float value to 3 decimal places\nlet formattedValue = parseFloat(floatValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\n//msg.payload = formattedValue;\nmsg.payload = {\"adl200N_amp1\":formattedValue};\n//flow.set(\"currentNode1\",msg.payload);\n// Return the formatted value\nflow.set(\"adl200n-amp1\", formattedValue);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 60,
        "wires": [
            [
                "6819990f207a5fb3"
            ]
        ]
    },
    {
        "id": "9ac102533def3973",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW1-Function",
        "func": "// Retrieve the raw data from the Modbus Read node\n\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\n\n// Write the low word (second register) into the buffer at position 2\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Format the float value to 3 decimal places\nlet formattedValue = parseFloat(floatValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\n//msg.payload = formattedValue;\nmsg.payload = {\"adl200N_volt1\":formattedValue};\n//flow.set(\"currentNode1\",msg.payload);\n// Return the formatted value\nflow.set(\"adl200n-volt1\", formattedValue);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 140,
        "wires": [
            [
                "41525f69a1ce7ca6"
            ]
        ]
    },
    {
        "id": "6819990f207a5fb3",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "debug 43",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 100,
        "wires": []
    },
    {
        "id": "41525f69a1ce7ca6",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "debug 44",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 200,
        "wires": []
    },
    {
        "id": "d76e5308d5ee4f07",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1240,
        "wires": []
    },
    {
        "id": "6b78742f06230f11",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW1-Function",
        "func": "//msg.payload = [49156, 23069, 0, 0]; // Example input, replace with your actual input source\n\n// Function to convert a 16-bit integer to big-endian bytes\nfunction toBigEndian(num) {\n  const buf = Buffer.allocUnsafe(2); // Allocate a 2-byte buffer\n  buf.writeUInt16BE(num, 0); // Write the number in big-endian at offset 0\n  return buf; // Return the buffer\n}\n\n// Method 1: Accessing individual elements and converting\nlet buf1 = toBigEndian(msg.payload[0]);\nlet buf2 = toBigEndian(msg.payload[1]);\nlet buf3 = toBigEndian(msg.payload[2]);\nlet buf4 = toBigEndian(msg.payload[3]);\n\nmsg.buf1 = buf1; // Store the buffers\nmsg.buf2 = buf2;\nmsg.buf3 = buf3;\nmsg.buf4 = buf4;\n\n\n// Method 2: Looping and converting (more flexible)\nlet bigEndianBuffers = [];\nfor (let i = 0; i < msg.payload.length; i++) {\n  let buf = toBigEndian(msg.payload[i]);\n  bigEndianBuffers.push(buf);\n}\n\nmsg.bigEndianBuffers = bigEndianBuffers;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1320,
        "wires": [
            [
                "d76e5308d5ee4f07"
            ]
        ]
    },
    {
        "id": "a1211b8e91a999a4",
        "type": "catch",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "",
        "scope": [
            "4631802004a69b18"
        ],
        "uncaught": false,
        "x": 910,
        "y": 900,
        "wires": [
            [
                "e1f861963a90019b"
            ]
        ]
    },
    {
        "id": "e1f861963a90019b",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "ErrorCatch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 840,
        "wires": []
    },
    {
        "id": "0c4f7e6537e7a591",
        "type": "inject",
        "z": "5596b8303f231669",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 2660,
        "wires": [
            [
                "d4085c04dfcded16"
            ]
        ]
    },
    {
        "id": "4b4475d6062d880b",
        "type": "switch",
        "z": "5596b8303f231669",
        "name": "",
        "property": "unitid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "9",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "10",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 10,
        "x": 530,
        "y": 2700,
        "wires": [
            [
                "2b39921d41801532"
            ],
            [
                "4491f558cc2f35d0"
            ],
            [
                "a2662dbf68cbaecb"
            ],
            [
                "8b5cf54a661b7f46"
            ],
            [
                "789c9be079e1c222"
            ],
            [
                "794adaa953d5905b"
            ],
            [
                "644d7049b103c8a9"
            ],
            [
                "f41d4585742b7278",
                "f85aaaeb986db2dc"
            ],
            [
                "dc174abb745eaec2"
            ],
            [
                "f4b9c06b9693eedf",
                "10eace509e2404e9"
            ]
        ]
    },
    {
        "id": "d451987c0975a60b",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "e3a224fe0a1c6f3b",
        "name": "adl200n-1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 2500,
        "wires": []
    },
    {
        "id": "227a8612fc5d51aa",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "e3a224fe0a1c6f3b",
        "name": "adl200n-2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 2560,
        "wires": []
    },
    {
        "id": "861ee25b0fb6b480",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "e3a224fe0a1c6f3b",
        "name": "adl200n-3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 2620,
        "wires": []
    },
    {
        "id": "be036c600013afd7",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "e3a224fe0a1c6f3b",
        "name": "adl200n-4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 2680,
        "wires": []
    },
    {
        "id": "bc8d170588494567",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "e3a224fe0a1c6f3b",
        "name": "adl200n-5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 2740,
        "wires": []
    },
    {
        "id": "7fc8be584eb6c62e",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "ce3c07d1175290fc",
        "name": "adl200n-6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 2860,
        "wires": []
    },
    {
        "id": "40d51309cb12f373",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "ce3c07d1175290fc",
        "name": "adl200n-7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 2920,
        "wires": []
    },
    {
        "id": "5f0ad80002600313",
        "type": "debug",
        "z": "5596b8303f231669",
        "name": "ID-8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 3040,
        "wires": []
    },
    {
        "id": "a2ea45a575ea5270",
        "type": "debug",
        "z": "5596b8303f231669",
        "name": "ID-9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 3120,
        "wires": []
    },
    {
        "id": "7d37a607a230a136",
        "type": "debug",
        "z": "5596b8303f231669",
        "name": "ID-10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 3160,
        "wires": []
    },
    {
        "id": "2b39921d41801532",
        "type": "function",
        "z": "5596b8303f231669",
        "g": "e3a224fe0a1c6f3b",
        "name": "adl200N_kWh1_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\nlet formattedValue = parseFloat(doubleValue);\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl200n-kWh1-ComG1\": doubleValue};\nflow.set(\"adl200n-kWh1-ComG1\", doubleValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2520,
        "wires": [
            [
                "d451987c0975a60b",
                "0eef365a65c55ede",
                "8cd66e700af499b8"
            ]
        ]
    },
    {
        "id": "4491f558cc2f35d0",
        "type": "function",
        "z": "5596b8303f231669",
        "g": "e3a224fe0a1c6f3b",
        "name": "adl200N_kWh2_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\n//let formattedValue = parseFloat(doubleValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl200n-kWh2-ComG2\": doubleValue};\nflow.set(\"adl200n-kWh2-ComG2\",doubleValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2580,
        "wires": [
            [
                "227a8612fc5d51aa",
                "0eef365a65c55ede",
                "8cd66e700af499b8"
            ]
        ]
    },
    {
        "id": "a2662dbf68cbaecb",
        "type": "function",
        "z": "5596b8303f231669",
        "g": "e3a224fe0a1c6f3b",
        "name": "adl200N_kWh3_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\n//let formattedValue = parseFloat(doubleValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\nmsg.payload = { \"adl200n-kWh3-ComG3\": doubleValue };\nflow.set(\"adl200n-kWh3-ComG3\", doubleValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2640,
        "wires": [
            [
                "861ee25b0fb6b480",
                "0eef365a65c55ede",
                "8cd66e700af499b8"
            ]
        ]
    },
    {
        "id": "8b5cf54a661b7f46",
        "type": "function",
        "z": "5596b8303f231669",
        "g": "e3a224fe0a1c6f3b",
        "name": "adl200N_kWh4_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\n//let formattedValue = parseFloat(doubleValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl200n-kWh4-ComG4\": doubleValue};\nflow.set(\"adl200n-kWh4-ComG4\", doubleValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2700,
        "wires": [
            [
                "be036c600013afd7",
                "0eef365a65c55ede",
                "8cd66e700af499b8"
            ]
        ]
    },
    {
        "id": "789c9be079e1c222",
        "type": "function",
        "z": "5596b8303f231669",
        "g": "e3a224fe0a1c6f3b",
        "name": "adl200N_kWh5_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\n//let formattedValue = parseFloat(doubleValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl200n-kWh5-Instructor\": doubleValue};\nflow.set(\"adl200n-kWh5-Instructor\", doubleValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2760,
        "wires": [
            [
                "bc8d170588494567",
                "0eef365a65c55ede",
                "8cd66e700af499b8"
            ]
        ]
    },
    {
        "id": "794adaa953d5905b",
        "type": "function",
        "z": "5596b8303f231669",
        "g": "ce3c07d1175290fc",
        "name": "adl200N_kWh6_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\n//let formattedValue = parseFloat(doubleValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl200n-kWh6-NormalLine\": doubleValue};\nflow.set(\"adl200n-kWh6-NormalLine\", doubleValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2880,
        "wires": [
            [
                "7fc8be584eb6c62e",
                "8ca7c584fb476a3b",
                "8cd66e700af499b8"
            ]
        ]
    },
    {
        "id": "644d7049b103c8a9",
        "type": "function",
        "z": "5596b8303f231669",
        "g": "ce3c07d1175290fc",
        "name": "adl200N_kWh7_Funtion",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 64-bit double (Big Endian format)\nlet buffer = Buffer.alloc(8);\n\n// Write the four 16-bit registers into the buffer in Big Endian format\nbuffer.writeUInt16BE(rawData[0], 0); // Highest word\nbuffer.writeUInt16BE(rawData[1], 2);\nbuffer.writeUInt16BE(rawData[2], 4);\nbuffer.writeUInt16BE(rawData[3], 6); // Lowest word\n\n// Read the combined value as a 64-bit double\nlet doubleValue = buffer.readDoubleBE(0);\n\n// Format the double value to 3 decimal places\n//let formattedValue = parseFloat(doubleValue.toFixed(3));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"adl200n-kWh7-EmergencyLine\": doubleValue};\nflow.set(\"adl200n-kWh7-EmergencyLine\", doubleValue);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2940,
        "wires": [
            [
                "40d51309cb12f373",
                "8ca7c584fb476a3b",
                "8cd66e700af499b8"
            ]
        ]
    },
    {
        "id": "dc174abb745eaec2",
        "type": "function",
        "z": "5596b8303f231669",
        "name": "Lux_Funciton",
        "func": "let value = msg.payload[0];\nmsg.payload = {\"LuxVal\":value};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 3120,
        "wires": [
            [
                "a2ea45a575ea5270",
                "8cd66e700af499b8"
            ]
        ]
    },
    {
        "id": "f4b9c06b9693eedf",
        "type": "function",
        "z": "5596b8303f231669",
        "name": "temp-ID10",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Scale the value by dividing it by 10\nlet scaledValue = floatValue;\n\n// Format the scaled value to 1 decimal place\nlet formattedValue = parseFloat(scaledValue.toFixed(1));\n\n// Assign the formatted value to msg.payload\nmsg.payload ={\"Temperature-ID10\" :formattedValue};\n\n// Return the formatted value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 3160,
        "wires": [
            [
                "7d37a607a230a136",
                "8cd66e700af499b8"
            ]
        ]
    },
    {
        "id": "f85aaaeb986db2dc",
        "type": "function",
        "z": "5596b8303f231669",
        "name": "humi-ID8F",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[2], 0); // High word\nbuffer.writeUInt16BE(rawData[3], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Scale the value by dividing it by 10\nlet scaledValue = floatValue;\n\n// Format the scaled value to 1 decimal place\nlet formattedValue = parseFloat(scaledValue.toFixed(1));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"HumidityID8\":formattedValue};\n\n// Return the formatted value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 3080,
        "wires": [
            [
                "523c709f51490c81",
                "8cd66e700af499b8"
            ]
        ]
    },
    {
        "id": "10eace509e2404e9",
        "type": "function",
        "z": "5596b8303f231669",
        "name": "humi-ID10",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[2], 0); // High word\nbuffer.writeUInt16BE(rawData[3], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Scale the value by dividing it by 10\nlet scaledValue = floatValue;\n\n// Format the scaled value to 1 decimal place\nlet formattedValue = parseFloat(scaledValue.toFixed(1));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"Humidity-ID10\":formattedValue};\n\n// Return the formatted value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 3200,
        "wires": [
            [
                "f2bfccd61225934b",
                "8cd66e700af499b8"
            ]
        ]
    },
    {
        "id": "f41d4585742b7278",
        "type": "function",
        "z": "5596b8303f231669",
        "name": "temp-ID8",
        "func": "// Retrieve the raw data from the Modbus Read node\nlet rawData = msg.payload;\n\n// Create a buffer to hold the 32-bit float (Big Endian format)\nlet buffer = Buffer.alloc(4);\n\n// Write the high word (first register) into the buffer at position 0\nbuffer.writeUInt16BE(rawData[0], 0); // High word\nbuffer.writeUInt16BE(rawData[1], 2); // Low word\n\n// Read the combined value as a 32-bit float\nlet floatValue = buffer.readFloatBE(0);\n\n// Scale the value by dividing it by 10\nlet scaledValue = floatValue;\n\n// Format the scaled value to 1 decimal place\nlet formattedValue = parseFloat(scaledValue.toFixed(1));\n\n// Assign the formatted value to msg.payload\nmsg.payload = {\"Temperature-ID8\":formattedValue};\n\n// Return the formatted value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 3040,
        "wires": [
            [
                "5f0ad80002600313",
                "8cd66e700af499b8"
            ]
        ]
    },
    {
        "id": "f2bfccd61225934b",
        "type": "debug",
        "z": "5596b8303f231669",
        "name": "ID-10-humi",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1189,
        "y": 3201,
        "wires": []
    },
    {
        "id": "523c709f51490c81",
        "type": "debug",
        "z": "5596b8303f231669",
        "name": "ID-8-humi",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 3080,
        "wires": []
    },
    {
        "id": "0eef365a65c55ede",
        "type": "function",
        "z": "5596b8303f231669",
        "g": "e3a224fe0a1c6f3b",
        "name": "CG-TotalkWh-ComGroup",
        "func": "let kWh1 = flow.get(\"adl200n-kWh1-ComG1\");\nlet kWh2 = flow.get(\"adl200n-kWh2-ComG2\");\nlet kWh3 = flow.get(\"adl200n-kWh3-ComG3\");\nlet kWh4 = flow.get(\"adl200n-kWh4-ComG4\");\nlet kWh5 = flow.get(\"adl200n-kWh5-Instructor\");\n\nlet totalkWh = kWh1 + kWh2 + kWh3 + kWh4 + kWh5;\nmsg.payload = {\"CG-TotalkWh\": totalkWh};\nflow.set(\"CG-TotalkWh\", totalkWh);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 2640,
        "wires": [
            [
                "8cd66e700af499b8",
                "548ddee97e76acca",
                "96a2c3d0f8ef8399",
                "e68258c7b580b1e4"
            ]
        ]
    },
    {
        "id": "8cd66e700af499b8",
        "type": "mqtt out",
        "z": "5596b8303f231669",
        "name": "MainBoxEnergyMQTTOutToThingsBoard",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 1840,
        "y": 2740,
        "wires": []
    },
    {
        "id": "8ca7c584fb476a3b",
        "type": "function",
        "z": "5596b8303f231669",
        "g": "ce3c07d1175290fc",
        "name": "Lighting-TotalkWh",
        "func": "let kWh6 = flow.get(\"adl200n-kWh6-NormalLine\");\nlet kWh7 = flow.get(\"adl200n-kWh7-EmergencyLine\");\n\nlet totalkWh = kWh6 + kWh7;\nmsg.payload = {\"Lighting-TotalkWh\": totalkWh};\nflow.set(\"Lighting-TotalkWh\", totalkWh);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 2880,
        "wires": [
            [
                "8cd66e700af499b8",
                "7307dd0cf971d8d2",
                "96a2c3d0f8ef8399",
                "e68258c7b580b1e4"
            ]
        ]
    },
    {
        "id": "548ddee97e76acca",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "e3a224fe0a1c6f3b",
        "name": "CG-TotalkWh",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 2560,
        "wires": []
    },
    {
        "id": "7307dd0cf971d8d2",
        "type": "debug",
        "z": "5596b8303f231669",
        "g": "ce3c07d1175290fc",
        "name": "Lighting-TotalkWh",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 2900,
        "wires": []
    },
    {
        "id": "96a2c3d0f8ef8399",
        "type": "function",
        "z": "5596b8303f231669",
        "name": "totalkWh (EnergyConsumption)",
        "func": "let kWh1 = flow.get(\"CG-TotalkWh\");\nlet kWh2 = flow.get(\"Lighting-TotalkWh\");\nlet kWh3 = flow.get(\"AC-TotalkWh\");\nlet totalkWh = kWh1 + kWh2 + kWh3;\nmsg.payload = {\"totalEnergyConsumption\":totalkWh};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2300,
        "wires": [
            [
                "706d67e5accb6992",
                "85a6a8cad4085613"
            ]
        ]
    },
    {
        "id": "85a6a8cad4085613",
        "type": "debug",
        "z": "5596b8303f231669",
        "name": "totalkWh",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2120,
        "y": 2140,
        "wires": []
    },
    {
        "id": "2ab67508bb7023d0",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW1",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "8212",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 100,
        "wires": [
            [
                "e54f8af4aa72a3a0",
                "4132be183bd50a08"
            ],
            []
        ]
    },
    {
        "id": "fb55966416e38922",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW2",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "2",
        "dataType": "HoldingRegister",
        "adr": "8192",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 180,
        "wires": [
            [
                "d70a3108c888ee81",
                "ba4da4f7ec9ae5f7"
            ],
            []
        ]
    },
    {
        "id": "4b064cad881cdd6a",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW3",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "3",
        "dataType": "HoldingRegister",
        "adr": "8236",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 260,
        "wires": [
            [
                "75e90c692ee6cfdf",
                "22a2d4b97e560a91"
            ],
            []
        ]
    },
    {
        "id": "8656f504663b8da8",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW4",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "4",
        "dataType": "HoldingRegister",
        "adr": "8216",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 340,
        "wires": [
            [
                "85fac43dd7431abd",
                "67f09a8af8a7f9dc"
            ],
            []
        ]
    },
    {
        "id": "fa046be5fbfa4b9d",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW5",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "5",
        "dataType": "HoldingRegister",
        "adr": "8212",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 420,
        "wires": [
            [
                "d64b7a6325bcc0f8",
                "652cdef8de9cbf37"
            ],
            []
        ]
    },
    {
        "id": "ee06d2b1279c9e5c",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW6",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "6",
        "dataType": "HoldingRegister",
        "adr": "8212",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 500,
        "wires": [
            [
                "70490be2ee7167e7",
                "6bcdfbb26a968122"
            ],
            []
        ]
    },
    {
        "id": "bf8f7c5cc2297386",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kW7",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "7",
        "dataType": "HoldingRegister",
        "adr": "8212",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 580,
        "wires": [
            [
                "3eebe2f3cfa324c4",
                "d2517ab3e8695aa7"
            ],
            []
        ]
    },
    {
        "id": "4631802004a69b18",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh1",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 740,
        "wires": [
            [
                "8c949fa5f34bbc2f"
            ],
            []
        ]
    },
    {
        "id": "4c5ae72cfe40d36a",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh2",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "2",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 840,
        "wires": [
            [
                "0c35247d16f946ca"
            ],
            []
        ]
    },
    {
        "id": "21795e262f9c7828",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh3",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "3",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 940,
        "wires": [
            [
                "06051cc79825ef02"
            ],
            []
        ]
    },
    {
        "id": "a51247cbfde58bc2",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh4",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "4",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "5b43b7da5c0bc0b6"
            ],
            []
        ]
    },
    {
        "id": "85d6fbd64ec79fe0",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh5",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "5",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 1140,
        "wires": [
            [
                "c149f3c67c7a9e78",
                "0f0c8a411e906d78"
            ],
            []
        ]
    },
    {
        "id": "2fa4e20b7aca203b",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh6",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "6",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 1240,
        "wires": [
            [
                "f797126e1b5fe5f0"
            ],
            []
        ]
    },
    {
        "id": "a7ef8ff5a48aea39",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-kWh7",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "7",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 1340,
        "wires": [
            [
                "198164266ff7178f",
                "6b78742f06230f11"
            ],
            []
        ]
    },
    {
        "id": "57dc7f135c4f1f70",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n1-kW1",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "8460",
        "quantity": "2",
        "rate": "2",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 140,
        "y": 1500,
        "wires": [
            [
                "8702a23dec44bf78",
                "f99003d4c8e4116f"
            ],
            []
        ]
    },
    {
        "id": "c1b1bbab5f61bc2f",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n1-kW2",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "2",
        "dataType": "HoldingRegister",
        "adr": "8474",
        "quantity": "2",
        "rate": "2",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 140,
        "y": 1580,
        "wires": [
            [
                "a08b7da23691a984",
                "5b3654bba289c7ba"
            ],
            []
        ]
    },
    {
        "id": "66e90c3fe2db4232",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n1-kW3",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "3",
        "dataType": "HoldingRegister",
        "adr": "8218",
        "quantity": "2",
        "rate": "2",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 140,
        "y": 1660,
        "wires": [
            [
                "34aa1e22770cd99b",
                "5add218a8e86168b"
            ],
            []
        ]
    },
    {
        "id": "42f1f0c7996f7c72",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n1-kW4",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "4",
        "dataType": "HoldingRegister",
        "adr": "8218",
        "quantity": "2",
        "rate": "2",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 140,
        "y": 1740,
        "wires": [
            [
                "e84f4abeaad2adf3",
                "f2f2a7fa95d549a2"
            ],
            []
        ]
    },
    {
        "id": "9c1b239f62dd6ccf",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n1-kWh1",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 150,
        "y": 1860,
        "wires": [
            [
                "60b40494bf40de89",
                "6131640f4a5f732c",
                "d49d8750923e437c"
            ],
            []
        ]
    },
    {
        "id": "f0c30a61b49b4fcb",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n1-kWh2",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "2",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 150,
        "y": 1940,
        "wires": [
            [
                "88ea96861dcc91ef",
                "d14007d6bda7b498",
                "d49d8750923e437c"
            ],
            []
        ]
    },
    {
        "id": "90822c544f1d76db",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n1-kWh3",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "3",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 150,
        "y": 2020,
        "wires": [
            [
                "a47f2850587c366f",
                "219e93d49e9410f3",
                "d49d8750923e437c"
            ],
            []
        ]
    },
    {
        "id": "b263b95bee94d434",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "adl400n1-kWh4",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "4",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 150,
        "y": 2120,
        "wires": [
            [
                "ce8dcd00a6eac70a",
                "140147318b03a9fb",
                "d49d8750923e437c"
            ],
            []
        ]
    },
    {
        "id": "f173318e08c099c8",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "BH1750_lux",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "9",
        "dataType": "InputRegister",
        "adr": "4",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 1310,
        "y": 120,
        "wires": [
            [
                "bfee625c10a92120",
                "b6c22b7f3662e050"
            ],
            []
        ]
    },
    {
        "id": "3307a4715e88cdd6",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "BH1750-ID10",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "10",
        "dataType": "InputRegister",
        "adr": "5",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 1310,
        "y": 220,
        "wires": [
            [
                "86756bd552ce5cc1",
                "5ec9f7c16f55c39c",
                "6a0628989b2766de"
            ],
            []
        ]
    },
    {
        "id": "8c0c55e3b9dc9db2",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "3b3316ddd49a42c5",
        "name": "BH1750-ID8",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "8",
        "dataType": "InputRegister",
        "adr": "5",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 1310,
        "y": 340,
        "wires": [
            [
                "47c8e678dfa97255",
                "942b19b5acc93a09",
                "f71472b137c8b968"
            ],
            []
        ]
    },
    {
        "id": "9b0c2101e0804d04",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "RelayStatus",
        "topic": "v1/devices/me/attributes",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "11",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 1330,
        "y": 1560,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "7c88bf71966f76e8",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Box2AirConRelayStatus",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "da0d36f433b2c5b3",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 1340,
        "y": 1120,
        "wires": [
            [
                "5c46abdf794cddf0",
                "39087e74c181a191"
            ],
            []
        ]
    },
    {
        "id": "13ec833e8b86762c",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "name": "Box2AirConStatus",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Input",
        "adr": "0",
        "quantity": "8",
        "rate": "2",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "da0d36f433b2c5b3",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 1350,
        "y": 1260,
        "wires": [
            [
                "05f56bd6bc5aee69",
                "cc3c3f300d352c2a"
            ],
            []
        ]
    },
    {
        "id": "778cac398a3c3c5c",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "name": "adl400n1-kW1",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "8204",
        "quantity": "6",
        "rate": "2",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "x": 130,
        "y": 2240,
        "wires": [
            [
                "47555bc6ce0d4e5f"
            ],
            []
        ]
    },
    {
        "id": "795eef5445b6f54c",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-amp1",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "7",
        "dataType": "HoldingRegister",
        "adr": "8204",
        "quantity": "2",
        "rate": "2",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 590,
        "y": 60,
        "wires": [
            [
                "d49b95394ea1beb9"
            ],
            []
        ]
    },
    {
        "id": "39c603ae9be5139e",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "bbd8743ed4f40463",
        "name": "adl200n-volt1",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "7",
        "dataType": "HoldingRegister",
        "adr": "8192",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 590,
        "y": 120,
        "wires": [
            [
                "9ac102533def3973"
            ],
            []
        ]
    },
    {
        "id": "7b84681ee3a2df7b",
        "type": "modbus-flex-write",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "MainBoxRelayControlADM",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "dbb746f7998c46e0",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2180,
        "y": 1440,
        "wires": [
            [
                "c98bd362c6cd428c"
            ],
            []
        ]
    },
    {
        "id": "9e51c555566d2cb5",
        "type": "modbus-flex-write",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Box2RelayControlADM",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "da0d36f433b2c5b3",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2870,
        "y": 640,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d4085c04dfcded16",
        "type": "modbus-flex-sequencer",
        "z": "5596b8303f231669",
        "name": "box4",
        "sequences": [
            {
                "name": "1",
                "unitid": "1",
                "fc": "FC3",
                "address": "12288",
                "quantity": "4"
            },
            {
                "name": "2",
                "unitid": "2",
                "fc": "FC3",
                "address": "12288",
                "quantity": "4"
            },
            {
                "name": "3",
                "unitid": "3",
                "fc": "FC3",
                "address": "12288",
                "quantity": "4"
            },
            {
                "name": "4",
                "unitid": "4",
                "fc": "FC3",
                "address": "12288",
                "quantity": "4"
            },
            {
                "name": "5",
                "unitid": "5",
                "fc": "FC3",
                "address": "12288",
                "quantity": "4"
            },
            {
                "name": "6",
                "unitid": "6",
                "fc": "FC3",
                "address": "12288",
                "quantity": "4"
            },
            {
                "name": "7",
                "unitid": "7",
                "fc": "FC3",
                "address": "12288",
                "quantity": "4"
            },
            {
                "name": "8",
                "unitid": "8",
                "fc": "FC4",
                "address": "5",
                "quantity": "4"
            },
            {
                "name": "9",
                "unitid": "9",
                "fc": "FC4",
                "address": "4",
                "quantity": "1"
            },
            {
                "name": "10",
                "unitid": "10",
                "fc": "FC4",
                "address": "5",
                "quantity": "4"
            }
        ],
        "server": "dbb746f7998c46e0",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 310,
        "y": 2660,
        "wires": [
            [
                "4b4475d6062d880b",
                "26fdc02b2fafd078",
                "1847d2e780e6790a",
                "533ff6cff3fca92d",
                "940504f23dad2443"
            ],
            []
        ]
    },
    {
        "id": "dd938721a26022f2",
        "type": "comment",
        "z": "5596b8303f231669",
        "name": "ADM Device",
        "info": "",
        "x": 2090,
        "y": 2740,
        "wires": []
    },
    {
        "id": "39fa7bcd075128de",
        "type": "comment",
        "z": "5596b8303f231669",
        "g": "b948bb12e7f7f6a6",
        "name": "3PhaseMeter Device",
        "info": "",
        "x": 920,
        "y": 1740,
        "wires": []
    },
    {
        "id": "968f930da5b2c2b2",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "SelectMode",
        "func": "if (!msg.payload) {\n    node.error(\"Error: msg.payload is missing\", msg);\n    return null;\n}\n\nif (typeof msg.payload.params === \"undefined\") {\n    node.error(\"Error: msg.payload.params is missing\", msg);\n    return null;\n}\n\n// กำหนดค่า DisabledState โดยตรงจาก params (ไม่ต้อง .DisabledState)\nmsg.payload.DisabledState = msg.payload.params;\n\n// Debug ดูค่าก่อนส่งไปต่อ\nnode.warn(\"DisabledState: \" + msg.payload.DisabledState);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1780,
        "wires": [
            [
                "a252c3e2c9c1dba2"
            ]
        ]
    },
    {
        "id": "a252c3e2c9c1dba2",
        "type": "mqtt out",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "SendMode",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 1930,
        "y": 1780,
        "wires": []
    },
    {
        "id": "0b084ca7907139cf",
        "type": "switch",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "Check RPC Method",
        "property": "payload.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "disableState",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "setRelayState",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1560,
        "y": 1780,
        "wires": [
            [
                "968f930da5b2c2b2"
            ],
            [
                "13d34a9ac0328814"
            ]
        ]
    },
    {
        "id": "57787dc47fd01688",
        "type": "rbe",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1850,
        "y": 1360,
        "wires": [
            [
                "27011c37b0deae9e",
                "7b84681ee3a2df7b"
            ]
        ]
    },
    {
        "id": "bc017de29d5b5e07",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 1700,
        "wires": []
    },
    {
        "id": "36b2e28259e4e6c3",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 1460,
        "wires": []
    },
    {
        "id": "b5b8364de27ff624",
        "type": "switch",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Check RPC Method",
        "property": "payload.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "disableState",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "setRelayState",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1600,
        "y": 1060,
        "wires": [
            [
                "f4d291e49d32029d"
            ],
            []
        ]
    },
    {
        "id": "f4d291e49d32029d",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "SelectMode",
        "func": "if (!msg.payload) {\n    node.error(\"Error: msg.payload is missing\", msg);\n    return null;\n}\n\nif (typeof msg.payload.params === \"undefined\") {\n    node.error(\"Error: msg.payload.params is missing\", msg);\n    return null;\n}\n\n// กำหนดค่า DisabledState โดยตรงจาก params (ไม่ต้อง .DisabledState)\nmsg.payload.DisabledState = msg.payload.params;\n\n// Debug ดูค่าก่อนส่งไปต่อ\nnode.warn(\"DisabledState: \" + msg.payload.DisabledState);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1060,
        "wires": [
            [
                "dc29b43b1ff9bae3",
                "ec72cc034e3c32b5"
            ]
        ]
    },
    {
        "id": "dc29b43b1ff9bae3",
        "type": "mqtt out",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "SendMode",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e60d06a0a8f09ffe",
        "x": 1990,
        "y": 1060,
        "wires": []
    },
    {
        "id": "79bbf36f3b20e9ea",
        "type": "comment",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "Light",
        "info": "",
        "x": 1310,
        "y": 1360,
        "wires": []
    },
    {
        "id": "b1f8e950c8d6fa22",
        "type": "comment",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Air",
        "info": "",
        "x": 1310,
        "y": 600,
        "wires": []
    },
    {
        "id": "f3d758b5e0e51fb6",
        "type": "inject",
        "z": "5596b8303f231669",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1960,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "26fdc02b2fafd078",
        "type": "function",
        "z": "5596b8303f231669",
        "name": "Conver Timestamp",
        "func": "let now = new Date();\nlet formatter = new Intl.DateTimeFormat('th-TH', {\n    timeZone: 'Asia/Bangkok',\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    // second: '2-digit',\n    hour12: false\n});\n\nmsg.payload = {\n    timestamp: formatter.format(now).replace(',', '')  // Format correctly\n};\n\nreturn msg;\n;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 3280,
        "wires": [
            [
                "71815a672e2a569f",
                "e7ef46292876830c"
            ]
        ]
    },
    {
        "id": "e7ef46292876830c",
        "type": "debug",
        "z": "5596b8303f231669",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 3280,
        "wires": []
    },
    {
        "id": "71815a672e2a569f",
        "type": "mqtt out",
        "z": "5596b8303f231669",
        "name": "Send timestamp",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 1200,
        "y": 3340,
        "wires": []
    },
    {
        "id": "74c90221ed585c2c",
        "type": "function",
        "z": "5596b8303f231669",
        "name": "CheckOnlineStatusGatewayADM",
        "func": "// let status = \"online\"; // ตั้งค่าเริ่มต้นเป็น Online\n// let now = new Date();\n// let timestamp = now.toISOString(); // ใช้ ISO8601 timestamp\n\n// // ถ้า msg.payload มีข้อมูลผิดปกติ (อุปกรณ์หยุดทำงาน)\n// if (!msg.payload || msg.payload.length === 0) {\n//     status = \"offline\";  // ถ้าไม่มีค่าให้เปลี่ยนเป็น offline\n// }\n\n// // กำหนดค่าที่จะส่งไปยัง ThingsBoard\n// msg.payload = {\n//     gateway_status: status,\n//     timestamp: timestamp\n// };\n\n// return msg;\n\nlet now = new Date();\nlet timestamp = now.toISOString(); // ISO8601 timestamp\n\nlet last_seen = global.get(\"gateway_last_seen\") || 0;\n\n// ถ้า payload มีข้อมูล → อัปเดต last_seen และเชื่อว่า online\nif (msg.payload && Object.keys(msg.payload).length > 0) {\n    global.set(\"gateway_last_seen\", now.getTime());\n    last_seen = now.getTime(); // รีเฟรชตัวแปรที่ใช้ใน if ด้านล่าง\n}\n\nlet status = \"online\";\n\n// ตรวจสอบว่าเวลาปัจจุบันห่างจาก last_seen เกิน 5 นาทีไหม\nif (now.getTime() - last_seen > 300000) {\n    status = \"offline\";\n}\n\nmsg.payload = {\n    gateway_status: status,\n    timestamp: timestamp\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 3040,
        "wires": [
            [
                "efc43b97e9cc3067",
                "01dae09d25bf4be7"
            ]
        ]
    },
    {
        "id": "efc43b97e9cc3067",
        "type": "debug",
        "z": "5596b8303f231669",
        "name": "GatewayOnlineBox4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 3220,
        "wires": []
    },
    {
        "id": "01dae09d25bf4be7",
        "type": "mqtt out",
        "z": "5596b8303f231669",
        "d": true,
        "name": "SendGatewayStatus",
        "topic": "v1/devices/me/attributes",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 800,
        "y": 3460,
        "wires": []
    },
    {
        "id": "d03e862955417fd6",
        "type": "inject",
        "z": "5596b8303f231669",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 3140,
        "wires": [
            [
                "74c90221ed585c2c"
            ]
        ]
    },
    {
        "id": "c438da07068f688c",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "function 12",
        "func": "const roomStatus = msg.payload.room_status;\nconst isAuto = msg.payload.params;\n\nif (isAuto !== true) {\n    return null;\n}\n\nconst airList = [\"211A\", \"211B\", \"212A\", \"212B\"];\nconst action = roomStatus === \"Available\" ? \"ON\" : \"OFF\";\n\nairList.forEach(room => {\n    const message = {\n        payload: {\n            params: {\n                switchNo: `${room}_${action}`\n            }\n        }\n    };\n    node.send(message);\n});\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 880,
        "wires": [
            [
                "4fa1a0a5fe16d131",
                "3a6fecd208ca379e"
            ]
        ]
    },
    {
        "id": "d49d8750923e437c",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "name": "CheckOnlinesSatusGatewayAir",
        "func": "// let now = new Date();\n// let timestamp = now.toISOString(); // ISO8601 timestamp\n\n// let devices = [\"adl400n1-kWh1\", \"adl400n1-kWh2\", \"adl400n1-kWh3\", \"adl400n1-kWh4\"];\n// let timeout = 300000; // 5 นาที\n// let device_status = {};\n\n// // Debug เช็คค่าก่อนคำนวณ\n// let debug_info = {};\n\n// devices.forEach(device => {\n//     let last_seen = global.get(device + \"_last_seen\") || 0;\n//     let status = \"offline\"; // ค่าเริ่มต้นเป็น offline\n\n//     if (now.getTime() - last_seen <= timeout) {\n//         status = \"online\"; // ถ้ายังส่งข้อมูลอยู่ใน 5 นาที ถือว่า Online\n//     }\n\n//     // กำหนดค่า Attribute แยกเป็นของแต่ละอุปกรณ์\n//     device_status[device + \"_status\"] = status;\n//     debug_info[device + \"_last_seen\"] = last_seen;\n//     debug_info[device + \"_status\"] = status;\n// });\n\n// // **แสดงค่า last_seen และ status ใน Debug Node**\n// node.warn(\"Device Status Debug: \" + JSON.stringify(debug_info, null, 2));\n\n// // ส่งค่าไป ThingsBoard เป็น Attributes แยกกัน\n// msg.payload = {\n//     timestamp: timestamp,  // Timestamp รวม\n//     ...device_status       // ข้อมูลแต่ละอุปกรณ์แยก Attribute\n// };\n\n// return msg;\n\nlet now = new Date();\nlet timestamp = now.toISOString(); // ISO8601 timestamp\n\nlet devices = [\"adl400n1-kWh1\", \"adl400n1-kWh2\", \"adl400n1-kWh3\", \"adl400n1-kWh4\"];\nlet timeout = 300000; // 5 นาที\n\nlet messages = [];\n\ndevices.forEach(device => {\n    let last_seen = global.get(device + \"_last_seen\") || 0;\n    let status = \"offline\";\n\n    if (now.getTime() - last_seen <= timeout) {\n        status = \"online\";\n    }\n\n    // key = ชื่ออุปกรณ์, value = status\n    let payload = {};\n    payload[device] = status;\n    payload.timestamp = timestamp;\n\n    messages.push({ payload: payload });\n});\n\n// ส่งแยก message\nreturn [messages];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2320,
        "wires": [
            [
                "aee53ab2873e05c3"
            ]
        ]
    },
    {
        "id": "aee53ab2873e05c3",
        "type": "debug",
        "z": "5596b8303f231669",
        "name": "GatewayOnlineAir",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 2240,
        "wires": []
    },
    {
        "id": "bb446bf293ea7854",
        "type": "inject",
        "z": "5596b8303f231669",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 2340,
        "wires": [
            [
                "d49d8750923e437c"
            ]
        ]
    },
    {
        "id": "e6e89902224f30e8",
        "type": "mqtt out",
        "z": "5596b8303f231669",
        "name": "SendStatusModbud_3Phase",
        "topic": "v1/devices/StatusGateway/attributes",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ae0562e5159bc84d",
        "x": 740,
        "y": 2340,
        "wires": []
    },
    {
        "id": "acb20e2774858eb2",
        "type": "modbus-flex-connector",
        "z": "5596b8303f231669",
        "name": "CompressorBox",
        "maxReconnectsPerMinute": 4,
        "emptyQueue": false,
        "showStatusActivities": false,
        "showErrors": false,
        "server": "29c9eb9186255316",
        "emptyMsgOnFail": false,
        "configMsgOnChange": false,
        "x": 140,
        "y": 3460,
        "wires": [
            []
        ]
    },
    {
        "id": "cfd8c3295b5d0231",
        "type": "comment",
        "z": "5596b8303f231669",
        "g": "e3a224fe0a1c6f3b",
        "name": "computer group",
        "info": "",
        "x": 1500,
        "y": 2500,
        "wires": []
    },
    {
        "id": "41630a3138c4d126",
        "type": "comment",
        "z": "5596b8303f231669",
        "g": "ce3c07d1175290fc",
        "name": "light group",
        "info": "",
        "x": 1680,
        "y": 2860,
        "wires": []
    },
    {
        "id": "2edf1c5743cb51c1",
        "type": "comment",
        "z": "5596b8303f231669",
        "name": "Total Active Energy",
        "info": "",
        "x": 1770,
        "y": 2700,
        "wires": []
    },
    {
        "id": "d78350918f208299",
        "type": "mqtt out",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "",
        "topic": "v1/devices/me/rpc/request/1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e60d06a0a8f09ffe",
        "x": 2580,
        "y": 540,
        "wires": []
    },
    {
        "id": "ba3f788d01e49339",
        "type": "mqtt out",
        "z": "5596b8303f231669",
        "name": "SendStatusModbus_ADM",
        "topic": "v1/devices/StatusGateway/attributes",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ae0562e5159bc84d",
        "x": 670,
        "y": 3360,
        "wires": []
    },
    {
        "id": "4fa1a0a5fe16d131",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "function12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2750,
        "y": 880,
        "wires": []
    },
    {
        "id": "9da302ae32e5c758",
        "type": "switch",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Check switchNo exists",
        "property": "payload.params.switchNo",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1680,
        "y": 660,
        "wires": [
            [
                "3a6fecd208ca379e",
                "6c7b4670657e68d1"
            ]
        ]
    },
    {
        "id": "6c7b4670657e68d1",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1940,
        "y": 600,
        "wires": []
    },
    {
        "id": "fc01659ff09e9a0d",
        "type": "join",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "room_status + DisabledState",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "2",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2250,
        "y": 980,
        "wires": [
            [
                "c438da07068f688c",
                "541c85cb011584e5"
            ]
        ]
    },
    {
        "id": "541c85cb011584e5",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "debug room_status + DisabledState",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2640,
        "y": 1040,
        "wires": []
    },
    {
        "id": "af-roomstatus-resend-switch",
        "type": "switch",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "check if DisabledState is true",
        "property": "payload.params",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1640,
        "y": 840,
        "wires": [
            [
                "af-roomstatus-resend-function"
            ]
        ]
    },
    {
        "id": "af-roomstatus-resend-function",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "resend current room_status",
        "func": "//flow.set(\"latest_room_status\");  //ส่งค่าจริง\n//flow.set(\"latest_params\");\n\n\n// ดึงค่าล่าสุดจาก flow context\nlet roomStatus = flow.get(\"latest_room_status\");\nlet params = flow.get(\"latest_params\");\n\nif (roomStatus === undefined || params === undefined) {\n    node.warn(\"❌ Resend failed: No room_status or params in context\");\n    return null; // ไม่ส่งออก เพราะยังไม่มีค่าพร้อม\n}\n\nreturn {\n    payload: {\n        room_status: roomStatus,\n        params: params\n    }\n};\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 840,
        "wires": [
            [
                "2698d99296e69421",
                "fc01659ff09e9a0d",
                "5759399d1e4b7c71"
            ]
        ]
    },
    {
        "id": "2698d99296e69421",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "debug resend",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2200,
        "y": 860,
        "wires": []
    },
    {
        "id": "aba32a9b3aad775f",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "function11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 580,
        "wires": []
    },
    {
        "id": "0b857a00928cba83",
        "type": "function",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "formatTelemetryForThingsBoard",
        "func": "// หาก msg.payload มี params อยู่ ให้ดึงค่าจริงออกมา\nif (msg.payload && msg.payload.params) {\n    msg.payload = msg.payload.params;\n}\n\n// ตรวจสอบว่ามี switchNo เพื่อดูว่าต้องส่งหรือไม่\nif (msg.payload && msg.payload.switchNo) {\n    return msg;\n}\n\n// ไม่งั้นไม่ต้องส่ง\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 540,
        "wires": [
            [
                "d78350918f208299",
                "5759399d1e4b7c71"
            ]
        ]
    },
    {
        "id": "79477aaf325342b8",
        "type": "modbus-read",
        "z": "5596b8303f231669",
        "d": true,
        "g": "96605e5f4ca80cbd",
        "name": "RelayStatus",
        "topic": "v1/devices/me/attributes",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "11",
        "dataType": "Input",
        "adr": "0",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 1330,
        "y": 1620,
        "wires": [
            [
                "2843af1687a67adf",
                "8d7dd5aef67d5dd3"
            ],
            []
        ]
    },
    {
        "id": "5759399d1e4b7c71",
        "type": "mqtt out",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "Box2AirConRelayStatusTB",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e60d06a0a8f09ffe",
        "x": 2760,
        "y": 740,
        "wires": []
    },
    {
        "id": "533ff6cff3fca92d",
        "type": "debug",
        "z": "5596b8303f231669",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 2580,
        "wires": []
    },
    {
        "id": "1847d2e780e6790a",
        "type": "modbus-response",
        "z": "5596b8303f231669",
        "name": "",
        "registerShowMax": 20,
        "x": 590,
        "y": 2520,
        "wires": []
    },
    {
        "id": "ec72cc034e3c32b5",
        "type": "debug",
        "z": "5596b8303f231669",
        "d": true,
        "g": "6d7dcbd9ddb5454f",
        "name": "debug select mode",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 1020,
        "wires": []
    },
    {
        "id": "940504f23dad2443",
        "type": "function",
        "z": "5596b8303f231669",
        "name": "gateway_last_seen",
        "func": "global.set(\"gateway_last_seen\", Date.now());\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2840,
        "wires": [
            [
                "74c90221ed585c2c"
            ]
        ]
    },
    {
        "id": "e68258c7b580b1e4",
        "type": "function",
        "z": "5596b8303f231669",
        "name": "function 3",
        "func": "let kWh1 = flow.get(\"CG-TotalkWh\");\nlet kWh2 = flow.get(\"Lighting-TotalkWh\");\nlet totalkWh = kWh1 + kWh2 ;\nmsg.payload = { \"totalEnergyConsumption\": totalkWh };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 2860,
        "wires": [
            [
                "54d32a808ab265cd"
            ]
        ]
    },
    {
        "id": "54d32a808ab265cd",
        "type": "debug",
        "z": "5596b8303f231669",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2140,
        "y": 2860,
        "wires": []
    },
    {
        "id": "a16cf6d06d0b7061",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "adl400-V1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 180,
        "wires": []
    },
    {
        "id": "9d60fa49570d1503",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "adl400n1-kWh1-volt",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": " 8192",
        "quantity": "6",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "7b24c8cad3fdc1a8"
            ],
            []
        ]
    },
    {
        "id": "7abe3cdac4099ffc",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "adl400n1-kWh2-volt",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "2",
        "dataType": "InputRegister",
        "adr": "8192",
        "quantity": "6",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 230,
        "y": 360,
        "wires": [
            [
                "e363004b14ea5b44"
            ],
            []
        ]
    },
    {
        "id": "5494f6a5d6e0dd95",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "adl400n1-kWh3-volt",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "3",
        "dataType": "InputRegister",
        "adr": "8192",
        "quantity": "6",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 230,
        "y": 480,
        "wires": [
            [
                "815b76421f480944"
            ],
            []
        ]
    },
    {
        "id": "d70eec653ecb1793",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "adl400n1-kWh4-volt",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "4",
        "dataType": "InputRegister",
        "adr": "8192",
        "quantity": "6",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 230,
        "y": 620,
        "wires": [
            [
                "abb1de2227f0c9b9"
            ],
            []
        ]
    },
    {
        "id": "466130a44284544f",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "adl400-V2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 280,
        "wires": []
    },
    {
        "id": "7a78933db8441867",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "adl400-V3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 440,
        "wires": []
    },
    {
        "id": "1fa012964d69f3fa",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "adl400-V4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 560,
        "wires": []
    },
    {
        "id": "7b24c8cad3fdc1a8",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "kwh1-Change Register to Floating Point",
        "func": "// รับค่าจาก Modbus\nlet registers = msg.payload;  // ตัวอย่าง: [17251,26214,17252,6554,17253,6554]\n\n// ฟังก์ชันแปลง 2 Registers (16-bit) เป็น Float (IEEE 754)\nfunction convertToFloat(high, low) {\n    let buffer = Buffer.alloc(4);\n    buffer.writeUInt16BE(high, 0);\n    buffer.writeUInt16BE(low, 2);\n    return buffer.readFloatBE(0);\n}\n\n// แปลงค่าแรงดันแต่ละเฟส\nlet voltageA = convertToFloat(registers[0], registers[1]);\nlet voltageB = convertToFloat(registers[2], registers[3]);\nlet voltageC = convertToFloat(registers[4], registers[5]);\n\n// ส่งค่าออกไปใช้งานต่อ\nmsg.payload = {\n    voltageA: voltageA,\n    voltageB: voltageB,\n    voltageC: voltageC\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 240,
        "wires": [
            [
                "a16cf6d06d0b7061",
                "29efe3bc53da3a55"
            ]
        ]
    },
    {
        "id": "e363004b14ea5b44",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "kwh2-Change Register to Floating Point",
        "func": "// รับค่าจาก Modbus\nlet registers = msg.payload;  // ตัวอย่าง: [17251,26214,17252,6554,17253,6554]\n\n// ฟังก์ชันแปลง 2 Registers (16-bit) เป็น Float (IEEE 754)\nfunction convertToFloat(high, low) {\n    let buffer = Buffer.alloc(4);\n    buffer.writeUInt16BE(high, 0);\n    buffer.writeUInt16BE(low, 2);\n    return buffer.readFloatBE(0);\n}\n\n// แปลงค่าแรงดันแต่ละเฟส\nlet voltageA = convertToFloat(registers[0], registers[1]);\nlet voltageB = convertToFloat(registers[2], registers[3]);\nlet voltageC = convertToFloat(registers[4], registers[5]);\n\n// ส่งค่าออกไปใช้งานต่อ\nmsg.payload = {\n    voltageA: voltageA,\n    voltageB: voltageB,\n    voltageC: voltageC\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 360,
        "wires": [
            [
                "466130a44284544f",
                "dbec85f0af8c531e"
            ]
        ]
    },
    {
        "id": "815b76421f480944",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "kwh3-Change Register to Floating Point",
        "func": "// รับค่าจาก Modbus\nlet registers = msg.payload;  // ตัวอย่าง: [17251,26214,17252,6554,17253,6554]\n\n// ฟังก์ชันแปลง 2 Registers (16-bit) เป็น Float (IEEE 754)\nfunction convertToFloat(high, low) {\n    let buffer = Buffer.alloc(4);\n    buffer.writeUInt16BE(high, 0);\n    buffer.writeUInt16BE(low, 2);\n    return buffer.readFloatBE(0);\n}\n\n// แปลงค่าแรงดันแต่ละเฟส\nlet voltageA = convertToFloat(registers[0], registers[1]);\nlet voltageB = convertToFloat(registers[2], registers[3]);\nlet voltageC = convertToFloat(registers[4], registers[5]);\n\n// ส่งค่าออกไปใช้งานต่อ\nmsg.payload = {\n    voltageA: voltageA,\n    voltageB: voltageB,\n    voltageC: voltageC\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 480,
        "wires": [
            [
                "7a78933db8441867",
                "f3788badb1d3b6c6"
            ]
        ]
    },
    {
        "id": "abb1de2227f0c9b9",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "kwh4-Change Register to Floating Point",
        "func": "// รับค่าจาก Modbus\nlet registers = msg.payload;  // ตัวอย่าง: [17251,26214,17252,6554,17253,6554]\n\n// ฟังก์ชันแปลง 2 Registers (16-bit) เป็น Float (IEEE 754)\nfunction convertToFloat(high, low) {\n    let buffer = Buffer.alloc(4);\n    buffer.writeUInt16BE(high, 0);\n    buffer.writeUInt16BE(low, 2);\n    return buffer.readFloatBE(0);\n}\n\n// แปลงค่าแรงดันแต่ละเฟส\nlet voltageA = convertToFloat(registers[0], registers[1]);\nlet voltageB = convertToFloat(registers[2], registers[3]);\nlet voltageC = convertToFloat(registers[4], registers[5]);\n\n// ส่งค่าออกไปใช้งานต่อ\nmsg.payload = {\n    voltageA: voltageA,\n    voltageB: voltageB,\n    voltageC: voltageC\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 600,
        "wires": [
            [
                "1fa012964d69f3fa",
                "4bf15c1aff5fca2b"
            ]
        ]
    },
    {
        "id": "acc821f729452e13",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "Voltage",
        "info": "",
        "x": 150,
        "y": 180,
        "wires": []
    },
    {
        "id": "667cf1192349f430",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "adl400-A1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 760,
        "wires": []
    },
    {
        "id": "193474297e8df55a",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "adl400n1-kWh1-A",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": "8204",
        "quantity": "6",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 230,
        "y": 840,
        "wires": [
            [
                "661e55bcd9e15d21"
            ],
            []
        ]
    },
    {
        "id": "93c2da34a5bb4bc8",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "adl400n1-kWh2-A",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "2",
        "dataType": "InputRegister",
        "adr": "8204",
        "quantity": "6",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 230,
        "y": 940,
        "wires": [
            [
                "6e6f45cf1a9c3197"
            ],
            []
        ]
    },
    {
        "id": "ea67b08382555dd7",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "adl400n1-kWh3-A",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "3",
        "dataType": "InputRegister",
        "adr": "8204",
        "quantity": "6",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 230,
        "y": 1060,
        "wires": [
            [
                "1a792fbbe46dae16"
            ],
            []
        ]
    },
    {
        "id": "c81ec1b658a99154",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "adl400n1-kWh4-A",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "4",
        "dataType": "InputRegister",
        "adr": "8204",
        "quantity": "6",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 230,
        "y": 1200,
        "wires": [
            [
                "dbae0b9c2cc633f3"
            ],
            []
        ]
    },
    {
        "id": "a4ca5645aa081e1a",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "adl400-A2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 860,
        "wires": []
    },
    {
        "id": "087e92483d4d8409",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "adl400-A3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1020,
        "wires": []
    },
    {
        "id": "232a31c36d461d40",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "adl400-A4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1140,
        "wires": []
    },
    {
        "id": "661e55bcd9e15d21",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "kwh1-Change Register to Floating Point",
        "func": "// รับค่าจาก Modbus\nlet registers = msg.payload;\n\n// ฟังก์ชันแปลง 2 Registers เป็น Float (IEEE 754) แบบสลับ Byte\nfunction convertToFloat(low, high) {\n    let buffer = Buffer.alloc(4);\n    buffer.writeUInt16BE(low, 0);\n    buffer.writeUInt16BE(high, 2);\n    return buffer.readFloatBE(0);\n}\n\n// แปลงค่ากระแสไฟฟ้าแต่ละเฟส\nlet currentA = convertToFloat(registers[0], registers[1]); // เฟส A\nlet currentB = convertToFloat(registers[2], registers[3]); // เฟส B\nlet currentC = convertToFloat(registers[4], registers[5]); // เฟส C\n\n// ส่งค่าออกไปใช้งานต่อ\nmsg.payload = {\n    currentA: currentA,\n    currentB: currentB,\n    currentC: currentC\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 820,
        "wires": [
            [
                "667cf1192349f430",
                "1c7608a1a39046d7"
            ]
        ]
    },
    {
        "id": "6e6f45cf1a9c3197",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "kwh2-Change Register to Floating Point",
        "func": "// รับค่าจาก Modbus\nlet registers = msg.payload;\n\n// ฟังก์ชันแปลง 2 Registers เป็น Float (IEEE 754) แบบสลับ Byte\nfunction convertToFloat(low, high) {\n    let buffer = Buffer.alloc(4);\n    buffer.writeUInt16BE(low, 0);\n    buffer.writeUInt16BE(high, 2);\n    return buffer.readFloatBE(0);\n}\n\n// แปลงค่ากระแสไฟฟ้าแต่ละเฟส\nlet currentA = convertToFloat(registers[0], registers[1]); // เฟส A\nlet currentB = convertToFloat(registers[2], registers[3]); // เฟส B\nlet currentC = convertToFloat(registers[4], registers[5]); // เฟส C\n\n// ส่งค่าออกไปใช้งานต่อ\nmsg.payload = {\n    currentA: currentA,\n    currentB: currentB,\n    currentC: currentC\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 940,
        "wires": [
            [
                "a4ca5645aa081e1a",
                "55d49ba99e2ed1e0"
            ]
        ]
    },
    {
        "id": "1a792fbbe46dae16",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "kwh3-Change Register to Floating Point",
        "func": "// // รับค่าจาก Modbus\n// let registers = msg.payload;\n\n// // ฟังก์ชันแปลง 2 Registers (16-bit) เป็น Float (IEEE 754)\n// function convertToFloat(high, low) {\n//     let buffer = Buffer.alloc(4);\n//     buffer.writeUInt16BE(high, 0);\n//     buffer.writeUInt16BE(low, 2);\n//     return buffer.readFloatBE(0);\n// }\n\n// // แปลงค่ากระแสไฟฟ้าแต่ละเฟส\n// let currentA = convertToFloat(registers[0], registers[1]);\n// let currentB = convertToFloat(registers[2], registers[3]);\n// let currentC = convertToFloat(registers[4], registers[5]);\n\n// // ส่งค่าออกไปใช้งานต่อ\n// msg.payload = {\n//     currentA: currentA,\n//     currentB: currentB,\n//     currentC: currentC\n// };\n\n// return msg;\n\n// รับค่าจาก Modbus\nlet registers = msg.payload;\n\n// ฟังก์ชันแปลง 2 Registers เป็น Float (IEEE 754) แบบสลับ Byte\nfunction convertToFloat(low, high) {\n    let buffer = Buffer.alloc(4);\n    buffer.writeUInt16BE(low, 0);\n    buffer.writeUInt16BE(high, 2);\n    return buffer.readFloatBE(0);\n}\n\n// แปลงค่ากระแสไฟฟ้าแต่ละเฟส\nlet currentA = convertToFloat(registers[0], registers[1]); // เฟส A\nlet currentB = convertToFloat(registers[2], registers[3]); // เฟส B\nlet currentC = convertToFloat(registers[4], registers[5]); // เฟส C\n\n// ส่งค่าออกไปใช้งานต่อ\nmsg.payload = {\n    currentA: currentA,\n    currentB: currentB,\n    currentC: currentC\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1060,
        "wires": [
            [
                "087e92483d4d8409",
                "a662dfe7d7841cee"
            ]
        ]
    },
    {
        "id": "dbae0b9c2cc633f3",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "kwh4-Change Register to Floating Point",
        "func": "// รับค่าจาก Modbus\nlet registers = msg.payload;\n\n// ฟังก์ชันแปลง 2 Registers เป็น Float (IEEE 754) แบบสลับ Byte\nfunction convertToFloat(low, high) {\n    let buffer = Buffer.alloc(4);\n    buffer.writeUInt16BE(low, 0);\n    buffer.writeUInt16BE(high, 2);\n    return buffer.readFloatBE(0);\n}\n\n// แปลงค่ากระแสไฟฟ้าแต่ละเฟส\nlet currentA = convertToFloat(registers[0], registers[1]); // เฟส A\nlet currentB = convertToFloat(registers[2], registers[3]); // เฟส B\nlet currentC = convertToFloat(registers[4], registers[5]); // เฟส C\n\n// ส่งค่าออกไปใช้งานต่อ\nmsg.payload = {\n    currentA: currentA,\n    currentB: currentB,\n    currentC: currentC\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1180,
        "wires": [
            [
                "232a31c36d461d40",
                "0baf850f5468a2c6"
            ]
        ]
    },
    {
        "id": "168334e73d81e138",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "Current",
        "info": "",
        "x": 150,
        "y": 760,
        "wires": []
    },
    {
        "id": "376286cd5c333e3f",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "212A",
        "info": "",
        "x": 190,
        "y": 1020,
        "wires": []
    },
    {
        "id": "f19ec2c8607922ec",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "212A",
        "info": "",
        "x": 190,
        "y": 440,
        "wires": []
    },
    {
        "id": "187c3601b9ac2d69",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "adl400-Hz1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1340,
        "wires": []
    },
    {
        "id": "9d20b8ef9f265329",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "adl400n1-kWh1-Hz",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": "8244",
        "quantity": "2",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 230,
        "y": 1400,
        "wires": [
            [
                "3cd18aa3f9a06f90"
            ],
            []
        ]
    },
    {
        "id": "c8d86406ac61e932",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "adl400n1-kWh2-Hz",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "2",
        "dataType": "InputRegister",
        "adr": "8244",
        "quantity": "2",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 230,
        "y": 1500,
        "wires": [
            [
                "cad583eabc96a61d"
            ],
            []
        ]
    },
    {
        "id": "5da16bd214f6fee2",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "adl400n1-kWh3-Hz",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "3",
        "dataType": "InputRegister",
        "adr": "8244",
        "quantity": "2",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 230,
        "y": 1620,
        "wires": [
            [
                "82b9c052aa4e9de4"
            ],
            []
        ]
    },
    {
        "id": "874eb5fe2e529d61",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "adl400n1-kWh4-Hz",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "4",
        "dataType": "InputRegister",
        "adr": "8244",
        "quantity": "2",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 230,
        "y": 1760,
        "wires": [
            [
                "e162c8bdf11fabe5"
            ],
            []
        ]
    },
    {
        "id": "72d661678d908be0",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "adl400-Hz2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1460,
        "wires": []
    },
    {
        "id": "90e28ecce5504973",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "adl400-Hz3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1580,
        "wires": []
    },
    {
        "id": "295d94e73f3902b4",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "adl400-Hz4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1700,
        "wires": []
    },
    {
        "id": "3cd18aa3f9a06f90",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "kwh1-Change Register to Floating Point",
        "func": "// ค่า Modbus Registers ที่ได้รับ\nlet registers = msg.payload;  // ตัวอย่าง: [16968, 2621]\n\n// ฟังก์ชันแปลง 2 Registers เป็น Float (IEEE 754)\nfunction convertToFloat(high, low) {\n    let buffer = Buffer.alloc(4);\n    buffer.writeUInt16BE(high, 0);\n    buffer.writeUInt16BE(low, 2);\n    return buffer.readFloatBE(0);\n}\n\n// แปลงค่า Frequency\nlet frequency = convertToFloat(registers[0], registers[1]);\n\n// ส่งค่าออกไปใช้งานต่อ\nmsg.payload = { frequencykWh1: frequency };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1380,
        "wires": [
            [
                "187c3601b9ac2d69",
                "746bc2015fe2fd76"
            ]
        ]
    },
    {
        "id": "cad583eabc96a61d",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "kwh2-Change Register to Floating Point",
        "func": "// ค่า Modbus Registers ที่ได้รับ\nlet registers = msg.payload;  // ตัวอย่าง: [16968, 2621]\n\n// ฟังก์ชันแปลง 2 Registers เป็น Float (IEEE 754)\nfunction convertToFloat(high, low) {\n    let buffer = Buffer.alloc(4);\n    buffer.writeUInt16BE(high, 0);\n    buffer.writeUInt16BE(low, 2);\n    return buffer.readFloatBE(0);\n}\n\n// แปลงค่า Frequency\nlet frequency = convertToFloat(registers[0], registers[1]);\n\n// ส่งค่าออกไปใช้งานต่อ\nmsg.payload = { frequencykWh2: frequency };\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1500,
        "wires": [
            [
                "72d661678d908be0",
                "746bc2015fe2fd76"
            ]
        ]
    },
    {
        "id": "82b9c052aa4e9de4",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "kwh3-Change Register to Floating Point",
        "func": "// ค่า Modbus Registers ที่ได้รับ\nlet registers = msg.payload;  // ตัวอย่าง: [16968, 2621]\n\n// ฟังก์ชันแปลง 2 Registers เป็น Float (IEEE 754)\nfunction convertToFloat(high, low) {\n    let buffer = Buffer.alloc(4);\n    buffer.writeUInt16BE(high, 0);\n    buffer.writeUInt16BE(low, 2);\n    return buffer.readFloatBE(0);\n}\n\n// แปลงค่า Frequency\nlet frequency = convertToFloat(registers[0], registers[1]);\n\n// ส่งค่าออกไปใช้งานต่อ\nmsg.payload = { frequencykWh3: frequency };\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1620,
        "wires": [
            [
                "90e28ecce5504973",
                "746bc2015fe2fd76"
            ]
        ]
    },
    {
        "id": "e162c8bdf11fabe5",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "kwh4-Change Register to Floating Point",
        "func": "// ค่า Modbus Registers ที่ได้รับ\nlet registers = msg.payload;  // ตัวอย่าง: [16968, 2621]\n\n// ฟังก์ชันแปลง 2 Registers เป็น Float (IEEE 754)\nfunction convertToFloat(high, low) {\n    let buffer = Buffer.alloc(4);\n    buffer.writeUInt16BE(high, 0);\n    buffer.writeUInt16BE(low, 2);\n    return buffer.readFloatBE(0);\n}\n\n// แปลงค่า Frequency\nlet frequency = convertToFloat(registers[0], registers[1]);\n\n// ส่งค่าออกไปใช้งานต่อ\nmsg.payload = { frequencykWh4: frequency };\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1740,
        "wires": [
            [
                "295d94e73f3902b4",
                "746bc2015fe2fd76"
            ]
        ]
    },
    {
        "id": "3b2a37e3719ea1cc",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "Frequency",
        "info": "",
        "x": 160,
        "y": 1320,
        "wires": []
    },
    {
        "id": "670bc0165ee5e6f7",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "212A",
        "info": "",
        "x": 190,
        "y": 1580,
        "wires": []
    },
    {
        "id": "29efe3bc53da3a55",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "avgVoltage",
        "func": "// let vA = msg.payload.voltageA;\n// let vB = msg.payload.voltageB;\n// let vC = msg.payload.voltageC;\n\n// // คำนวณค่าแรงดันเฉลี่ย\n// let averageVoltage = (vA + vB + vC) / 3;\n\n// averageVoltage = parseFloat(averageVoltage.toFixed(3));\n\n// // ส่งออกทั้งค่าเฉลี่ยและรายเฟส (ถ้าต้องการ)\n// msg.payload = {\n//     // voltageA: vA,\n//     // voltageB: vB,\n//     // voltageC: vC,\n//     averageVoltageKhw1: averageVoltage\n// };\n\n// return msg;\n\nlet vA = msg.payload.voltageA;\nlet vB = msg.payload.voltageB;\nlet vC = msg.payload.voltageC;\n\n// คำนวณค่าแรงดันเฉลี่ย\nlet averageVoltage = (vA + vB + vC) / 3;\n\naverageVoltage = parseFloat(averageVoltage.toFixed(3));\n\n// ส่งออกทั้งค่าเฉลี่ยและรายเฟส (ถ้าต้องการ)\nmsg.payload = {\n    voltageA_Khw1: vA,\n    voltageB_Khw1: vB,\n    voltageC_Khw1: vC,\n    averageVoltageKhw1: averageVoltage\n    // averageVoltageKhw1: 500\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 240,
        "wires": [
            [
                "d1c4edd752c1d5de",
                "8b7e5968724a81e0"
            ]
        ]
    },
    {
        "id": "dbec85f0af8c531e",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "avgVoltage",
        "func": "let vA = msg.payload.voltageA;\nlet vB = msg.payload.voltageB;\nlet vC = msg.payload.voltageC;\n\n// คำนวณค่าแรงดันเฉลี่ย\nlet averageVoltage = (vA + vB + vC) / 3;\naverageVoltage = parseFloat(averageVoltage.toFixed(3));\n\n// ส่งออกทั้งค่าเฉลี่ยและรายเฟส (ถ้าต้องการ)\nmsg.payload = {\n    voltageA_Khw2: vA,\n    voltageB_Khw2: vB,\n    voltageC_Khw2: vC,\n    averageVoltageKhw2: averageVoltage\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 360,
        "wires": [
            [
                "679ba6712665d99e",
                "8b7e5968724a81e0"
            ]
        ]
    },
    {
        "id": "f3788badb1d3b6c6",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "avgVoltage",
        "func": "let vA = msg.payload.voltageA;\nlet vB = msg.payload.voltageB;\nlet vC = msg.payload.voltageC;\n\n// คำนวณค่าแรงดันเฉลี่ย\nlet averageVoltage = (vA + vB + vC) / 3;\naverageVoltage = parseFloat(averageVoltage.toFixed(3));\n\n// ส่งออกทั้งค่าเฉลี่ยและรายเฟส (ถ้าต้องการ)\nmsg.payload = {\n    voltageA_Khw3: vA,\n    voltageB_Khw3: vB,\n    voltageC_Khw3: vC,\n    averageVoltageKhw3: averageVoltage\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 480,
        "wires": [
            [
                "80f447cfc7273001",
                "8b7e5968724a81e0"
            ]
        ]
    },
    {
        "id": "4bf15c1aff5fca2b",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "avgVoltage",
        "func": "let vA = msg.payload.voltageA;\nlet vB = msg.payload.voltageB;\nlet vC = msg.payload.voltageC;\n\n// คำนวณค่าแรงดันเฉลี่ย\nlet averageVoltage = (vA + vB + vC) / 3;\naverageVoltage = parseFloat(averageVoltage.toFixed(3));\n\n// ส่งออกทั้งค่าเฉลี่ยและรายเฟส (ถ้าต้องการ)\nmsg.payload = {\n    voltageA_Khw4: vA,\n    voltageB_Khw4: vB,\n    voltageC_Khw4: vC,\n    averageVoltageKhw4: averageVoltage\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 600,
        "wires": [
            [
                "65188e1484fd940a",
                "8b7e5968724a81e0"
            ]
        ]
    },
    {
        "id": "d1c4edd752c1d5de",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "adl400-avgV1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 180,
        "wires": []
    },
    {
        "id": "679ba6712665d99e",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "adl400-avgV2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 320,
        "wires": []
    },
    {
        "id": "80f447cfc7273001",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "adl400-avgV3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 440,
        "wires": []
    },
    {
        "id": "65188e1484fd940a",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "adl400-avgV4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 560,
        "wires": []
    },
    {
        "id": "1c7608a1a39046d7",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "avgCurrent",
        "func": "let iA = msg.payload.currentA;\nlet iB = msg.payload.currentB;\nlet iC = msg.payload.currentC;\n\n// คำนวณเฉลี่ย\nlet averageCurrent = (iA + iB + iC) / 3;\n\n// ปัดทศนิยมให้เหลือ 3 ตำแหน่ง\naverageCurrent = parseFloat(averageCurrent.toFixed(3));\n\n// ส่งออก\nmsg.payload = {\n    currentA_kWh1: iA,\n    currentB_kWh1: iB,\n    currentC_kWh1: iC,\n    averageCurrentkWh1: averageCurrent\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 820,
        "wires": [
            [
                "02da94b1ba091bd7",
                "22b161cc16833238"
            ]
        ]
    },
    {
        "id": "55d49ba99e2ed1e0",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "avgCurrent",
        "func": "let iA = msg.payload.currentA;\nlet iB = msg.payload.currentB;\nlet iC = msg.payload.currentC;\n\n// คำนวณเฉลี่ย\nlet averageCurrent = (iA + iB + iC) / 3;\n\n// ปัดทศนิยมให้เหลือ 3 ตำแหน่ง\naverageCurrent = parseFloat(averageCurrent.toFixed(3));\n\n// ส่งออก\nmsg.payload = {\n    currentA_kWh2: iA,\n    currentB_kWh2: iB,\n    currentC_kWh2: iC,\n    averageCurrentkWh2: averageCurrent\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 940,
        "wires": [
            [
                "2b3c079bdb9eea64",
                "22b161cc16833238"
            ]
        ]
    },
    {
        "id": "a662dfe7d7841cee",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "avgCurrent",
        "func": "let iA = msg.payload.currentA;\nlet iB = msg.payload.currentB;\nlet iC = msg.payload.currentC;\n\n// คำนวณเฉลี่ย\nlet averageCurrent = (iA + iB + iC) / 3;\n\n// ปัดทศนิยมให้เหลือ 3 ตำแหน่ง\naverageCurrent = parseFloat(averageCurrent.toFixed(3));\n\n// ส่งออก\nmsg.payload = {\n    currentA_kWh3: iA,\n    currentB_kWh3: iB,\n    currentC_kWh3: iC,\n    averageCurrentkWh3: averageCurrent\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1060,
        "wires": [
            [
                "29a88ad39d8a418b",
                "22b161cc16833238"
            ]
        ]
    },
    {
        "id": "0baf850f5468a2c6",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "avgCurrent",
        "func": "let iA = msg.payload.currentA;\nlet iB = msg.payload.currentB;\nlet iC = msg.payload.currentC;\n\n// คำนวณเฉลี่ย\nlet averageCurrent = (iA + iB + iC) / 3;\n\n// ปัดทศนิยมให้เหลือ 3 ตำแหน่ง\naverageCurrent = parseFloat(averageCurrent.toFixed(3));\n\n// ส่งออก\nmsg.payload = {\n    currentA_kWh4: iA,\n    currentB_kWh4: iB,\n    currentC_kWh4: iC,\n    averageCurrentkWh4: averageCurrent\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1180,
        "wires": [
            [
                "90c1d1cfa51a371f",
                "22b161cc16833238"
            ]
        ]
    },
    {
        "id": "90c1d1cfa51a371f",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "adl400-avgI4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1140,
        "wires": []
    },
    {
        "id": "29a88ad39d8a418b",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "adl400-avgI3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1060,
        "wires": []
    },
    {
        "id": "2b3c079bdb9eea64",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "adl400-avgI2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 940,
        "wires": []
    },
    {
        "id": "02da94b1ba091bd7",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "adl400-avgI1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 820,
        "wires": []
    },
    {
        "id": "8b7e5968724a81e0",
        "type": "mqtt out",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "A/CEnergyMQTTOutToThingsBoard",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "22a2b25621754385",
        "x": 1300,
        "y": 400,
        "wires": []
    },
    {
        "id": "22b161cc16833238",
        "type": "mqtt out",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "A/CEnergyMQTTOutToThingsBoard",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "22a2b25621754385",
        "x": 1280,
        "y": 1000,
        "wires": []
    },
    {
        "id": "746bc2015fe2fd76",
        "type": "mqtt out",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "A/CEnergyMQTTOutToThingsBoard",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "22a2b25621754385",
        "x": 1020,
        "y": 1520,
        "wires": []
    },
    {
        "id": "edcf8d5fbdb360a9",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "212B",
        "info": "",
        "x": 190,
        "y": 1160,
        "wires": []
    },
    {
        "id": "323f810693357ab5",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "212B",
        "info": "",
        "x": 190,
        "y": 1720,
        "wires": []
    },
    {
        "id": "187274ec4e1d195b",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "212B",
        "info": "",
        "x": 190,
        "y": 580,
        "wires": []
    },
    {
        "id": "786982ba041f72c4",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "211A",
        "info": "",
        "x": 190,
        "y": 220,
        "wires": []
    },
    {
        "id": "36e675a6886349aa",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "211A",
        "info": "",
        "x": 190,
        "y": 800,
        "wires": []
    },
    {
        "id": "6341b972e1113dc7",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "211A",
        "info": "",
        "x": 190,
        "y": 1360,
        "wires": []
    },
    {
        "id": "2d3cc6188ba06e52",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "34c14c64b43476ca",
        "name": "211B",
        "info": "",
        "x": 190,
        "y": 320,
        "wires": []
    },
    {
        "id": "edc6a7a85cc18cdf",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "cf666bf942b0cfd0",
        "name": "211B",
        "info": "",
        "x": 190,
        "y": 900,
        "wires": []
    },
    {
        "id": "22a72dddd296a621",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "59a3775b6a1fa638",
        "name": "211B",
        "info": "",
        "x": 190,
        "y": 1460,
        "wires": []
    },
    {
        "id": "c3d9fb1534b897e7",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "adl400-kWh1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2080,
        "y": 180,
        "wires": []
    },
    {
        "id": "e92a99a26f7520d9",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "adl400n1-kWh1",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "5",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 1700,
        "y": 280,
        "wires": [
            [
                "d936cb25167c5fdf"
            ],
            []
        ]
    },
    {
        "id": "aae8ea16b442dcd7",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "adl400n1-kWh2",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "2",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "5",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 1700,
        "y": 380,
        "wires": [
            [
                "eb2e0a93aca55a44"
            ],
            []
        ]
    },
    {
        "id": "9195a16e66fff9a5",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "adl400n1-kWh3",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "3",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "5",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 1700,
        "y": 500,
        "wires": [
            [
                "1ca960c03824a549"
            ],
            []
        ]
    },
    {
        "id": "670aab34d414b2b8",
        "type": "modbus-read",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "adl400n1-kWh4",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "4",
        "dataType": "HoldingRegister",
        "adr": "12288",
        "quantity": "4",
        "rate": "5",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "6a2fde34a04406db",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 1700,
        "y": 640,
        "wires": [
            [
                "2d944ac2014a5a2c"
            ],
            []
        ]
    },
    {
        "id": "ece15c25724c01e7",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "adl400-kWh2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2080,
        "y": 320,
        "wires": []
    },
    {
        "id": "c92e677e56a93dc4",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "adl400-kWh3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2080,
        "y": 460,
        "wires": []
    },
    {
        "id": "eb92af694112bc62",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "adl400-kWh4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2080,
        "y": 580,
        "wires": []
    },
    {
        "id": "d936cb25167c5fdf",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "kWh1",
        "func": "let registers = msg.payload;\n\nfunction convertRegistersToDouble(reg) {\n    let buffer = Buffer.alloc(8);\n    buffer.writeUInt16BE(reg[0], 0);\n    buffer.writeUInt16BE(reg[1], 2);\n    buffer.writeUInt16BE(reg[2], 4);\n    buffer.writeUInt16BE(reg[3], 6);\n    return buffer.readDoubleBE(0);\n}\n\nlet totalEnergy = convertRegistersToDouble(registers);\n// totalEnergy = parseFloat(totalEnergy.toFixed(3));\n\nmsg.payload = totalEnergy;\nmsg.topic = \"kWh1\";   // ✅ เพิ่มบรรทัดนี้\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 260,
        "wires": [
            [
                "c3d9fb1534b897e7",
                "c5334dfe8374d34f"
            ]
        ]
    },
    {
        "id": "eb2e0a93aca55a44",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "kwh2",
        "func": "let registers = msg.payload;\n\nfunction convertRegistersToDouble(reg) {\n    let buffer = Buffer.alloc(8);\n    buffer.writeUInt16BE(reg[0], 0);\n    buffer.writeUInt16BE(reg[1], 2);\n    buffer.writeUInt16BE(reg[2], 4);\n    buffer.writeUInt16BE(reg[3], 6);\n    return buffer.readDoubleBE(0);\n}\n\nlet totalEnergy = convertRegistersToDouble(registers);\n// totalEnergy = parseFloat(totalEnergy.toFixed(3));\n\nmsg.payload = totalEnergy;\nmsg.topic = \"kWh2\";   // ✅ เพิ่มบรรทัดนี้\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 380,
        "wires": [
            [
                "ece15c25724c01e7",
                "c5334dfe8374d34f"
            ]
        ]
    },
    {
        "id": "1ca960c03824a549",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "kwh3",
        "func": "let registers = msg.payload;\n\nfunction convertRegistersToDouble(reg) {\n    let buffer = Buffer.alloc(8);\n    buffer.writeUInt16BE(reg[0], 0);\n    buffer.writeUInt16BE(reg[1], 2);\n    buffer.writeUInt16BE(reg[2], 4);\n    buffer.writeUInt16BE(reg[3], 6);\n    return buffer.readDoubleBE(0);\n}\n\nlet totalEnergy = convertRegistersToDouble(registers);\n// totalEnergy = parseFloat(totalEnergy.toFixed(3));\n\nmsg.payload = totalEnergy;\nmsg.topic = \"kWh3\";   // ✅ เพิ่มบรรทัดนี้\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 500,
        "wires": [
            [
                "c92e677e56a93dc4",
                "c5334dfe8374d34f"
            ]
        ]
    },
    {
        "id": "2d944ac2014a5a2c",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "kwh4",
        "func": "// // รับข้อมูลจาก Modbus (4 คำ = 4 registers = 8 bytes)\n// let registers = msg.payload;\n\n// // ฟังก์ชันแปลง 4 registers เป็น Double (IEEE 754, 64-bit)\n// function convertRegistersToDouble(reg) {\n//     let buffer = Buffer.alloc(8);\n//     buffer.writeUInt16BE(reg[0], 0); // High word 1\n//     buffer.writeUInt16BE(reg[1], 2); // Low word 1\n//     buffer.writeUInt16BE(reg[2], 4); // High word 2\n//     buffer.writeUInt16BE(reg[3], 6); // Low word 2\n//     return buffer.readDoubleBE(0);\n// }\n\n// // แปลงค่า Total Energy (kWh)\n// let totalEnergy = convertRegistersToDouble(registers);\n\n// // ปัดเศษให้เหลือ 3 ตำแหน่ง (ถ้าต้องการความสวยงาม)\n// totalEnergy = parseFloat(totalEnergy.toFixed(3));\n\n// // 🔸 บันทึกค่าไว้ใน flow context สำหรับ function 4\n// flow.set(\"kWh4\", totalEnergy);\n\n// // ส่งค่าออก\n// msg.payload = {\n//     totalActiveEnergy_kWh4: totalEnergy\n// };\n\n// return msg;\n\nlet registers = msg.payload;\n\nfunction convertRegistersToDouble(reg) {\n    let buffer = Buffer.alloc(8);\n    buffer.writeUInt16BE(reg[0], 0);\n    buffer.writeUInt16BE(reg[1], 2);\n    buffer.writeUInt16BE(reg[2], 4);\n    buffer.writeUInt16BE(reg[3], 6);\n    return buffer.readDoubleBE(0);\n}\n\nlet totalEnergy = convertRegistersToDouble(registers);\n// totalEnergy = parseFloat(totalEnergy.toFixed(3));\n\nmsg.payload = totalEnergy;\nmsg.topic = \"kWh4\";   // ✅ เพิ่มบรรทัดนี้\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 620,
        "wires": [
            [
                "eb92af694112bc62",
                "c5334dfe8374d34f"
            ]
        ]
    },
    {
        "id": "cc1fc00acc22a648",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "Total Energy 6 นาทีส่งค่า",
        "info": "",
        "x": 1680,
        "y": 200,
        "wires": []
    },
    {
        "id": "9895cc057e327ef9",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "212A",
        "info": "",
        "x": 1670,
        "y": 460,
        "wires": []
    },
    {
        "id": "da8189362ef73e64",
        "type": "mqtt out",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "A/CEnergyMQTTOutToThingsBoard",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "51f796d92c532e29",
        "x": 2780,
        "y": 420,
        "wires": []
    },
    {
        "id": "de85a41190348821",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "212B",
        "info": "",
        "x": 1670,
        "y": 600,
        "wires": []
    },
    {
        "id": "f2ee9c1603884ab0",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "211A",
        "info": "",
        "x": 1670,
        "y": 240,
        "wires": []
    },
    {
        "id": "ed5f85918ca8a80d",
        "type": "comment",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "211B",
        "info": "",
        "x": 1670,
        "y": 340,
        "wires": []
    },
    {
        "id": "cdf8822138412a7b",
        "type": "debug",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2400,
        "y": 360,
        "wires": []
    },
    {
        "id": "26d71fd2ae5a5406",
        "type": "function",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "function 4",
        "func": "// รับ Object จาก Join node\n// ตัวอย่าง input: { kWh1: 123.45, kWh2: 125.11, kWh3: 122.33, kWh4: 120.80 }\n\nlet data = msg.payload;\n\nlet kWh1 = data.kWh1 || 0;\nlet kWh2 = data.kWh2 || 0;\nlet kWh3 = data.kWh3 || 0;\nlet kWh4 = data.kWh4 || 0;\n\nlet total = kWh1 + kWh2 + kWh3 + kWh4;\ntotal = parseFloat(total.toFixed(3));\n\nmsg.payload = {\n    // kWh1: kWh1,\n    // kWh2: kWh2,\n    // kWh3: kWh3,\n    // kWh4: kWh4,\n    ACtotalEnergy_kWh_ST: total\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 440,
        "wires": [
            [
                "cdf8822138412a7b",
                "da8189362ef73e64"
            ]
        ]
    },
    {
        "id": "c5334dfe8374d34f",
        "type": "join",
        "z": "a413c66ea5885fbd",
        "g": "a529d2c2ae1dc88d",
        "name": "join",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2250,
        "y": 420,
        "wires": [
            [
                "26d71fd2ae5a5406"
            ]
        ]
    },
    {
        "id": "6a19e0db83c2ae8a",
        "type": "inject",
        "z": "4b1b5ee444aaf88c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1280,
        "wires": [
            [
                "a0f22cc77c17c350",
                "e38179ae6d1747de",
                "3aa8b23a1176b856"
            ]
        ]
    },
    {
        "id": "18b69d7d6638ebe4",
        "type": "modbus-response",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "",
        "registerShowMax": 20,
        "x": 610,
        "y": 60,
        "wires": []
    },
    {
        "id": "a0f22cc77c17c350",
        "type": "modbus-flex-sequencer",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "box4-Voltage",
        "sequences": [
            {
                "name": "ComG1",
                "unitid": "1",
                "fc": "FC3",
                "address": "11",
                "quantity": "2"
            },
            {
                "name": "ComG2",
                "unitid": "2",
                "fc": "FC3",
                "address": "11",
                "quantity": "2"
            },
            {
                "name": "ComG3",
                "unitid": "3",
                "fc": "FC3",
                "address": "11",
                "quantity": "2"
            },
            {
                "name": "ComG4",
                "unitid": "4",
                "fc": "FC3",
                "address": "11",
                "quantity": "2"
            },
            {
                "name": "Instructor",
                "unitid": "5",
                "fc": "FC3",
                "address": "11",
                "quantity": "2"
            },
            {
                "name": "Normal-Line",
                "unitid": "6",
                "fc": "FC3",
                "address": "11",
                "quantity": "2"
            },
            {
                "name": "Emergency-Line",
                "unitid": "7",
                "fc": "FC3",
                "address": "11",
                "quantity": "2"
            }
        ],
        "server": "dbb746f7998c46e0",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 390,
        "y": 160,
        "wires": [
            [
                "18b69d7d6638ebe4",
                "8bb0f22d12ce1e98"
            ],
            []
        ]
    },
    {
        "id": "8bb0f22d12ce1e98",
        "type": "switch",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "Match-adl200n_Voltage",
        "property": "unitid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 630,
        "y": 200,
        "wires": [
            [
                "64229bd1e39693de"
            ],
            [
                "9dfea100925ad79f"
            ],
            [
                "b83cc4f5d4e44574"
            ],
            [
                "92a4adbe4ff95b2b"
            ],
            [
                "c8ea9fa07464d0db"
            ],
            [
                "7d0a0bc3eca53d90"
            ],
            [
                "f887ff593daba409"
            ]
        ]
    },
    {
        "id": "64229bd1e39693de",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "convert int to real unit-G1",
        "func": "let raw = msg.payload;  // ค่า Register ที่อ่านได้ (Array)\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 10.0;  // แปลงค่าเป็น Volt (หาร 10)\n\n    // เปลี่ยนตรงนี้เป็น key ที่ต้องการ เช่น ComG1_voltage\n    msg.payload = {\n        \"ComG1_voltage\": value\n        // \"ComG1_voltage\": 0\n    };\n\n    // // (ถ้าต้องการใช้กับ join node ให้เพิ่ม topic ด้วย)\n    // msg.topic = \"ComG1_voltage\";\n\n} else {\n    msg.payload = { \"ComG1_voltage\": \"Invalid Data\" };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 120,
        "wires": [
            [
                "bf422610d71af8f2",
                "d756b41a67920c9f"
            ]
        ]
    },
    {
        "id": "bf422610d71af8f2",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "adl200n-ComG1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 80,
        "wires": []
    },
    {
        "id": "1e1682c46cf26deb",
        "type": "modbus-read",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "3954618d0304767a",
        "name": "adl200n1-ComGr1",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "2",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 1930,
        "y": 480,
        "wires": [
            [
                "0c047b8ef3aa155c"
            ],
            []
        ]
    },
    {
        "id": "559dbd57a9346134",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "3954618d0304767a",
        "name": "adl200n-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2360,
        "y": 480,
        "wires": []
    },
    {
        "id": "0c047b8ef3aa155c",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "3954618d0304767a",
        "name": "function 15",
        "func": "let raw = msg.payload;  // ค่า Register ที่อ่านได้จาก Modbus\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[0] * 65536) + raw[1];  // รวมค่า 2 Registers เป็น 32-bit Integer\n    msg.payload = energy / 100.0;  // แปลงค่าเป็น kWh\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 480,
        "wires": [
            [
                "559dbd57a9346134"
            ]
        ]
    },
    {
        "id": "e4e3bed5c3b2c3a7",
        "type": "modbus-read",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "name": "adl200n1-Code-ComGr1",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "10",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 230,
        "y": 1220,
        "wires": [
            [
                "6bc3992d2f1d048e"
            ],
            []
        ]
    },
    {
        "id": "ec3d57127631b53d",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1220,
        "wires": []
    },
    {
        "id": "6bc3992d2f1d048e",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "name": "function 16",
        "func": "let raw = msg.payload;  // ค่า Register ที่อ่านได้จาก Modbus\n\nif (Array.isArray(raw) && raw.length > 0) {\n    msg.payload = raw[0];  // ค่า Code ที่ Address 10\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1260,
        "wires": [
            [
                "ec3d57127631b53d"
            ]
        ]
    },
    {
        "id": "9dfea100925ad79f",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "convert int to real unit-G2",
        "func": "let raw = msg.payload;  // ค่า Register ที่อ่านได้ (Array)\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 10.0;  // แปลงค่าเป็น Volt (หาร 10)\n\n    // เปลี่ยนตรงนี้เป็น key ที่ต้องการ เช่น ComG1_voltage\n    msg.payload = {\n        \"ComG2_voltage\": value\n    };\n\n    // // (ถ้าต้องการใช้กับ join node ให้เพิ่ม topic ด้วย)\n    // msg.topic = \"ComG1_voltage\";\n\n} else {\n    msg.payload = { \"ComG2_voltage\": \"Invalid Data\" };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 160,
        "wires": [
            [
                "8e6acd1e28986b09",
                "d756b41a67920c9f"
            ]
        ]
    },
    {
        "id": "b83cc4f5d4e44574",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "convert int to real unit-G3",
        "func": "let raw = msg.payload;  // ค่า Register ที่อ่านได้ (Array)\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 10.0;  // แปลงค่าเป็น Volt (หาร 10)\n\n    // เปลี่ยนตรงนี้เป็น key ที่ต้องการ เช่น ComG1_voltage\n    msg.payload = {\n        \"ComG3_voltage\": value\n    };\n\n    // // (ถ้าต้องการใช้กับ join node ให้เพิ่ม topic ด้วย)\n    // msg.topic = \"ComG1_voltage\";\n\n} else {\n    msg.payload = { \"ComG3_voltage\": \"Invalid Data\" };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 220,
        "wires": [
            [
                "f64aa8eb75b93330",
                "d756b41a67920c9f"
            ]
        ]
    },
    {
        "id": "92a4adbe4ff95b2b",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "convert int to real unit-G4",
        "func": "let raw = msg.payload;  // ค่า Register ที่อ่านได้ (Array)\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 10.0;  // แปลงค่าเป็น Volt (หาร 10)\n\n    // เปลี่ยนตรงนี้เป็น key ที่ต้องการ เช่น ComG1_voltage\n    msg.payload = {\n        \"ComG4_voltage\": value\n    };\n\n    // // (ถ้าต้องการใช้กับ join node ให้เพิ่ม topic ด้วย)\n    // msg.topic = \"ComG1_voltage\";\n\n} else {\n    msg.payload = { \"ComG4_voltage\": \"Invalid Data\" };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 260,
        "wires": [
            [
                "07f742170e1dcd8b",
                "d756b41a67920c9f"
            ]
        ]
    },
    {
        "id": "7d0a0bc3eca53d90",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "convert int to real unit-NormalLine",
        "func": "let raw = msg.payload;  // ค่า Register ที่อ่านได้ (Array)\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 10.0;  // แปลงค่าเป็น Volt (หาร 10)\n\n    // เปลี่ยนตรงนี้เป็น key ที่ต้องการ เช่น ComG1_voltage\n    msg.payload = {\n        \"NormalLine_voltage\": value\n    };\n\n    // // (ถ้าต้องการใช้กับ join node ให้เพิ่ม topic ด้วย)\n    // msg.topic = \"NormalLine_voltage\";\n\n} else {\n    msg.payload = { \"NormalLine_voltage\": \"Invalid Data\" };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 360,
        "wires": [
            [
                "516905746465ba49",
                "d756b41a67920c9f"
            ]
        ]
    },
    {
        "id": "f887ff593daba409",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "convert int to real unit-EmergencyLine",
        "func": "let raw = msg.payload;  // ค่า Register ที่อ่านได้ (Array)\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 10.0;  // แปลงค่าเป็น Volt (หาร 10)\n\n    // เปลี่ยนตรงนี้เป็น key ที่ต้องการ เช่น ComG1_voltage\n    msg.payload = {\n        \"EmergencyLine_voltage\": 300\n        // \"EmergencyLine_voltage\": value\n    };\n\n    // // (ถ้าต้องการใช้กับ join node ให้เพิ่ม topic ด้วย)\n    // msg.topic = \"EmergencyLine_voltage\";\n\n} else {\n    msg.payload = { \"EmergencyLine_voltage\": \"Invalid Data\" };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 400,
        "wires": [
            [
                "834329b85a295e13",
                "d756b41a67920c9f"
            ]
        ]
    },
    {
        "id": "c8ea9fa07464d0db",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "convert int to real unit-Instructor",
        "func": "let raw = msg.payload;  // ค่า Register ที่อ่านได้ (Array)\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 10.0;  // แปลงค่าเป็น Volt (หาร 10)\n\n    // เปลี่ยนตรงนี้เป็น key ที่ต้องการ เช่น ComG1_voltage\n    msg.payload = {\n        \"Instructor_voltage\": value\n    };\n\n    // // (ถ้าต้องการใช้กับ join node ให้เพิ่ม topic ด้วย)\n    // msg.topic = \"Instructor_voltage\";\n\n} else {\n    msg.payload = { \"Instructor_voltage\": \"Invalid Data\" };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 320,
        "wires": [
            [
                "06971d0993042ab2",
                "d756b41a67920c9f"
            ]
        ]
    },
    {
        "id": "8e6acd1e28986b09",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "adl200n-ComG2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 140,
        "wires": []
    },
    {
        "id": "f64aa8eb75b93330",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "adl200n-ComG3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 180,
        "wires": []
    },
    {
        "id": "07f742170e1dcd8b",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "adl200n-ComG4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 220,
        "wires": []
    },
    {
        "id": "06971d0993042ab2",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "adl200n-Instructor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 280,
        "wires": []
    },
    {
        "id": "516905746465ba49",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "adl200n-NormalLine",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 320,
        "wires": []
    },
    {
        "id": "834329b85a295e13",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "adl200n-EmergencyLine",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 380,
        "wires": []
    },
    {
        "id": "e38179ae6d1747de",
        "type": "modbus-flex-sequencer",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "box4-Current",
        "sequences": [
            {
                "name": "ComG1",
                "unitid": "1",
                "fc": "FC3",
                "address": "12",
                "quantity": "1"
            },
            {
                "name": "ComG2",
                "unitid": "2",
                "fc": "FC3",
                "address": "12",
                "quantity": "1"
            },
            {
                "name": "ComG3",
                "unitid": "3",
                "fc": "FC3",
                "address": "12",
                "quantity": "1"
            },
            {
                "name": "ComG4",
                "unitid": "4",
                "fc": "FC3",
                "address": "12",
                "quantity": "1"
            },
            {
                "name": "Instructor",
                "unitid": "5",
                "fc": "FC3",
                "address": "12",
                "quantity": "1"
            },
            {
                "name": "Normal-Line",
                "unitid": "6",
                "fc": "FC3",
                "address": "12",
                "quantity": "1"
            },
            {
                "name": "Emergency-Line",
                "unitid": "7",
                "fc": "FC3",
                "address": "12",
                "quantity": "1"
            }
        ],
        "server": "dbb746f7998c46e0",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 260,
        "y": 640,
        "wires": [
            [
                "069f50838c7f5f1e",
                "1dcfff385e58f350"
            ],
            []
        ]
    },
    {
        "id": "069f50838c7f5f1e",
        "type": "switch",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "Match-adl200n_Current",
        "property": "unitid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 590,
        "y": 620,
        "wires": [
            [
                "de7a6f38f1aaca14"
            ],
            [
                "f115677e7df2599a"
            ],
            [
                "96e684e27677f277"
            ],
            [
                "2970c46ec59741f8"
            ],
            [
                "7e9326c7705950f7"
            ],
            [
                "a78d50d1215142e9"
            ],
            [
                "9ad8295c1f1252af"
            ]
        ]
    },
    {
        "id": "de7a6f38f1aaca14",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "convert int to real unit-G1",
        "func": "let raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 100.0;  // แปลงเป็น Amp\n    msg.payload = {\n        \"ComG1_current\": value,\n        // \"ComG1_status\": value > 0 ? 1 : 0\n        \"ComG1_status\": value > 1.5 ? 1 : 0\n        // \"ComG1_current\": 780\n    };\n} else {\n    msg.payload = {\n        \"ComG1_current\": \"Invalid Data\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 560,
        "wires": [
            [
                "57304a4b63c0f763",
                "c8ce3c5fc4febc46"
            ]
        ]
    },
    {
        "id": "f115677e7df2599a",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "convert int to real unit-G2",
        "func": "let raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 100.0;  // แปลงเป็น Amp\n    msg.payload = {\n        \"ComG2_current\": value,\n        // \"ComG2_status\": value > 0 ? 1 : 0\n        \"ComG2_status\": value > 1.5 ? 1 : 0\n    };\n} else {\n    msg.payload = {\n        \"ComG2_current\": \"Invalid Data\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 620,
        "wires": [
            [
                "dda80c49b17db049",
                "c8ce3c5fc4febc46"
            ]
        ]
    },
    {
        "id": "96e684e27677f277",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "convert int to real unit-G3",
        "func": "let raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 100.0;  // แปลงเป็น Amp\n    msg.payload = {\n        \"ComG3_current\": value,\n        // \"ComG3_status\": value > 0 ? 1 : 0\n        \"ComG3_status\": value > 1.8 ? 1 : 0\n    };\n} else {\n    msg.payload = {\n        \"ComG3_current\": \"Invalid Data\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 680,
        "wires": [
            [
                "c77fb7458e70cce5",
                "c8ce3c5fc4febc46"
            ]
        ]
    },
    {
        "id": "2970c46ec59741f8",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "convert int to real unit-G4",
        "func": "let raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 100.0;  // แปลงเป็น Amp\n    msg.payload = {\n        \"ComG4_current\": value,\n        // \"ComG4_status\": value > 0 ? 1 : 0\n        \"ComG4_status\": value > 1.8 ? 1 : 0\n    };\n} else {\n    msg.payload = {\n        \"ComG4_current\": \"Invalid Data\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 740,
        "wires": [
            [
                "61afa7b871be307d",
                "c8ce3c5fc4febc46"
            ]
        ]
    },
    {
        "id": "7e9326c7705950f7",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "convert int to real unit-Instructor",
        "func": "let raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 100.0;  // แปลงเป็น Amp\n    msg.payload = {\n        \"Instructor_current\": value,\n        // \"Instructor_status\": value > 0 ? 1 : 0\n        \"Instructor_status\": value > 4 ? 1 : 0\n    };\n} else {\n    msg.payload = {\n        \"Instructor_current\": \"Invalid Data\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 800,
        "wires": [
            [
                "e682710f770c681d",
                "c8ce3c5fc4febc46"
            ]
        ]
    },
    {
        "id": "a78d50d1215142e9",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "convert int to real unit-NormalLine",
        "func": "let raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 100.0;  // แปลงเป็น Amp\n    msg.payload = {\n        \"NormalLine_current\": value\n    };\n} else {\n    msg.payload = {\n        \"NormalLine_current\": \"Invalid Data\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 860,
        "wires": [
            [
                "dfbca8f5e91ea80b",
                "c8ce3c5fc4febc46"
            ]
        ]
    },
    {
        "id": "9ad8295c1f1252af",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "convert int to real unit-EmergencyLine",
        "func": "let raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 100.0;  // แปลงเป็น Amp\n    msg.payload = {\n        \"EmergencyLine_current\": value\n    };\n} else {\n    msg.payload = {\n        \"EmergencyLine_current\": \"Invalid Data\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 920,
        "wires": [
            [
                "0280b59440f99eba",
                "c8ce3c5fc4febc46"
            ]
        ]
    },
    {
        "id": "57304a4b63c0f763",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "adl200n_G1_current",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 560,
        "wires": []
    },
    {
        "id": "dda80c49b17db049",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "adl200n_G2_current",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 620,
        "wires": []
    },
    {
        "id": "c77fb7458e70cce5",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "adl200n_G3_current",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 680,
        "wires": []
    },
    {
        "id": "61afa7b871be307d",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "adl200n_G4_current",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 740,
        "wires": []
    },
    {
        "id": "e682710f770c681d",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "adl200n_Ins_current",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 800,
        "wires": []
    },
    {
        "id": "dfbca8f5e91ea80b",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "adl200n_Normal_current",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 860,
        "wires": []
    },
    {
        "id": "0280b59440f99eba",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "adl200n_Emer_current",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 920,
        "wires": []
    },
    {
        "id": "96815fb95ea52770",
        "type": "modbus-flex-sequencer",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "box4-KWh",
        "sequences": [
            {
                "name": "ComG1",
                "unitid": "1",
                "fc": "FC3",
                "address": "0",
                "quantity": "2"
            },
            {
                "name": "ComG2",
                "unitid": "2",
                "fc": "FC3",
                "address": "0",
                "quantity": "2"
            },
            {
                "name": "ComG3",
                "unitid": "3",
                "fc": "FC3",
                "address": "0",
                "quantity": "2"
            },
            {
                "name": "ComG4",
                "unitid": "4",
                "fc": "FC3",
                "address": "0",
                "quantity": "2"
            },
            {
                "name": "Instructor",
                "unitid": "5",
                "fc": "FC3",
                "address": "0",
                "quantity": "2"
            },
            {
                "name": "Normal-Line",
                "unitid": "6",
                "fc": "FC3",
                "address": "0",
                "quantity": "2"
            },
            {
                "name": "Emergency-Line",
                "unitid": "7",
                "fc": "FC3",
                "address": "0",
                "quantity": "2"
            }
        ],
        "server": "dbb746f7998c46e0",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2110,
        "y": 160,
        "wires": [
            [
                "fc794c74b792fc0c"
            ],
            []
        ]
    },
    {
        "id": "fc794c74b792fc0c",
        "type": "switch",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "Match-adl200n_KWh",
        "property": "unitid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 2360,
        "y": 140,
        "wires": [
            [
                "81efaf4ebba19a16"
            ],
            [
                "b7f6fdd4da662e51"
            ],
            [
                "0dc03e2d36089f9a"
            ],
            [
                "afaf3597b77535da"
            ],
            [
                "b0bcc072aeca11f5"
            ],
            [
                "bee15d5fe68e1203"
            ],
            [
                "9cb6cb5c73db0b3c"
            ]
        ]
    },
    {
        "id": "a8fa216ec32fc0ae",
        "type": "inject",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2050,
        "y": 80,
        "wires": [
            [
                "96815fb95ea52770"
            ]
        ]
    },
    {
        "id": "81efaf4ebba19a16",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "total active energy",
        "func": "// let raw = msg.payload;\n\n// if (Array.isArray(raw) && raw.length === 2) {\n//     let energy = (raw[0] * 65536) + raw[1];  // รวม 2 Registers เป็น 32-bit Integer\n//     let value = energy / 100.0;  // แปลงเป็น kWh\n\n//     // ตั้งชื่อ payload เป็นของ ComG1\n//     msg.topic = \"comG1_kWh\"; // <-- สำคัญ!\n//     msg.payload = {\n//         \"comG1_kWh\": value\n//     };\n\n//     // ถ้าต้องการเก็บใน flow context ด้วย\n//     flow.set(\"comG1_kWh\", value);\n// } else {\n//     msg.payload = \"Invalid Data\";\n// }\n\n// return msg;\n\nlet raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[0] * 65536) + raw[1];\n    let value = energy / 100.0;\n\n    msg.topic = \"comG1_kWh\";         // ใช้กับ join node\n    msg.payload = value;             // ต้องเป็น number ตรงๆ\n    flow.set(\"comG1_kWh\", value);    // optional: เก็บไว้ใช้ที่อื่น\n\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 60,
        "wires": [
            [
                "d78a2b3bdb36b09f",
                "2608358110ca97ed",
                "586a23563a570cef"
            ]
        ]
    },
    {
        "id": "b7f6fdd4da662e51",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "total active energy",
        "func": "// let raw = msg.payload;\n\n// if (Array.isArray(raw) && raw.length === 2) {\n//     let energy = (raw[0] * 65536) + raw[1];  // รวม 2 Registers เป็น 32-bit Integer\n//     let value = energy / 100.0;  // แปลงเป็น kWh\n\n//     msg.topic = \"comG2_kWh\"; // <-- สำคัญ!\n\n//     // ตั้งชื่อ payload \n//     msg.payload = {\n//         \"comG2_kWh\": value\n//     };\n\n//     // ถ้าต้องการเก็บใน flow context ด้วย\n//     flow.set(\"comG2_kWh\", value);\n// } else {\n//     msg.payload = \"Invalid Data\";\n// }\n\n// return msg;\n\nlet raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[0] * 65536) + raw[1];\n    let value = energy / 100.0;\n\n    msg.topic = \"comG2_kWh\";         // ใช้กับ join node\n    msg.payload = value;             // ต้องเป็น number ตรงๆ\n    flow.set(\"comG2_kWh\", value);    // optional: เก็บไว้ใช้ที่อื่น\n\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 120,
        "wires": [
            [
                "939436d12dba0cbf",
                "2608358110ca97ed",
                "586a23563a570cef"
            ]
        ]
    },
    {
        "id": "0dc03e2d36089f9a",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "total active energy",
        "func": "// let raw = msg.payload;\n\n// if (Array.isArray(raw) && raw.length === 2) {\n//     let energy = (raw[0] * 65536) + raw[1];  // รวม 2 Registers เป็น 32-bit Integer\n//     let value = energy / 100.0;  // แปลงเป็น kWh\n\n//     msg.topic = \"comG3_kWh\"; // <-- สำคัญ!\n    \n//     /// ตั้งชื่อ payload \n//     msg.payload = {\n//         \"comG3_kWh\": value\n//     };\n\n//     // ถ้าต้องการเก็บใน flow context ด้วย\n//     flow.set(\"comG3_kWh\", value);\n// } else {\n//     msg.payload = \"Invalid Data\";\n// }\n\n// return msg;\n\nlet raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[0] * 65536) + raw[1];\n    let value = energy / 100.0;\n\n    msg.topic = \"comG3_kWh\";         // ใช้กับ join node\n    msg.payload = value;             // ต้องเป็น number ตรงๆ\n    flow.set(\"comG3_kWh\", value);    // optional: เก็บไว้ใช้ที่อื่น\n\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 180,
        "wires": [
            [
                "57f9b4e85e29343d",
                "2608358110ca97ed",
                "586a23563a570cef"
            ]
        ]
    },
    {
        "id": "afaf3597b77535da",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "total active energy",
        "func": "// let raw = msg.payload;\n\n// if (Array.isArray(raw) && raw.length === 2) {\n//     let energy = (raw[0] * 65536) + raw[1];  // รวม 2 Registers เป็น 32-bit Integer\n//     let value = energy / 100.0;  // แปลงเป็น kWh\n\n//     msg.topic = \"comG4_kWh\"; // <-- สำคัญ!\n    \n//     // ตั้งชื่อ payload \n//     msg.payload = {\n//         \"comG4_kWh\": value\n//     };\n\n//     // ถ้าต้องการเก็บใน flow context ด้วย\n//     flow.set(\"comG4_kWh\", value);\n// } else {\n//     msg.payload = \"Invalid Data\";\n// }\n\n// return msg;\nlet raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[0] * 65536) + raw[1];\n    let value = energy / 100.0;\n\n    msg.topic = \"comG4_kWh\";         // ใช้กับ join node\n    msg.payload = value;             // ต้องเป็น number ตรงๆ\n    flow.set(\"comG4_kWh\", value);    // optional: เก็บไว้ใช้ที่อื่น\n\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 240,
        "wires": [
            [
                "309f7193048920da",
                "2608358110ca97ed",
                "586a23563a570cef"
            ]
        ]
    },
    {
        "id": "b0bcc072aeca11f5",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "total active energy",
        "func": "// let raw = msg.payload;\n\n// if (Array.isArray(raw) && raw.length === 2) {\n//     let energy = (raw[0] * 65536) + raw[1];  // รวม 2 Registers เป็น 32-bit Integer\n//     let value = energy / 100.0;  // แปลงเป็น kWh\n\n//     msg.topic = \"Instructor_kWh\"; // <-- สำคัญ!\n    \n//     // ตั้งชื่อ payload \n//     msg.payload = {\n//         \"Instructor_kWh\": value\n//     };\n\n//     // ถ้าต้องการเก็บใน flow context ด้วย\n//     flow.set(\"Instructor_kWh\", value);\n// } else {\n//     msg.payload = \"Invalid Data\";\n// }\n\n// return msg;\n\n\nlet raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[0] * 65536) + raw[1];\n    let value = energy / 100.0;\n\n    msg.topic = \"Instructor_kWh\";         // ใช้กับ join node\n    msg.payload = value;             // ต้องเป็น number ตรงๆ\n    flow.set(\"Instructor_kWh\", value);    // optional: เก็บไว้ใช้ที่อื่น\n\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 300,
        "wires": [
            [
                "7dc0c9b3f1839e2b",
                "2608358110ca97ed",
                "586a23563a570cef"
            ]
        ]
    },
    {
        "id": "bee15d5fe68e1203",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "total active energy",
        "func": "// let raw = msg.payload;\n\n// if (Array.isArray(raw) && raw.length === 2) {\n//     let energy = (raw[0] * 65536) + raw[1];  // รวม 2 Registers เป็น 32-bit Integer\n//     let value = energy / 100.0;  // แปลงเป็น kWh\n\n//     msg.topic = \"Normal-Line\"; // <-- สำคัญ!\n    \n//     // ตั้งชื่อ payload \n//     msg.payload = {\n//         \"Normal-Line\": value\n//     };\n\n//     // ถ้าต้องการเก็บใน flow context ด้วย\n//     flow.set(\"Normal-Line_kWh\", value);\n// } else {\n//     msg.payload = \"Invalid Data\";\n// }\n\n// return msg;\n\n\n\nlet raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[0] * 65536) + raw[1];\n    let value = energy / 100.0;\n\n    msg.topic = \"Normal-Line_kWh\";         // ใช้กับ join node\n    msg.payload = value;             // ต้องเป็น number ตรงๆ\n    flow.set(\"Normal-Line_kWh\", value);    // optional: เก็บไว้ใช้ที่อื่น\n\n} else {\n    msg.payload = \"Normal-Line_kWh\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 360,
        "wires": [
            [
                "0621d8abf198d53a",
                "2608358110ca97ed",
                "d3379929b15f6aa8"
            ]
        ]
    },
    {
        "id": "9cb6cb5c73db0b3c",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "total active energy",
        "func": "// let raw = msg.payload;\n\n// if (Array.isArray(raw) && raw.length === 2) {\n//     let energy = (raw[0] * 65536) + raw[1];  // รวม 2 Registers เป็น 32-bit Integer\n//     let value = energy / 100.0;  // แปลงเป็น kWh\n\n//     msg.topic = \"Emergency-Line_kWh\"; // <-- สำคัญ!\n\n//     // ตั้งชื่อ payload \n//     msg.payload = {\n//         \"Emergency-Line_kWh\": value\n//     };\n\n//     // ถ้าต้องการเก็บใน flow context ด้วย\n//     flow.set(\"Emergency-Line_kWh\", value);\n// } else {\n//     msg.payload = \"Invalid Data\";\n// }\n\n// return msg;\n\nlet raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[0] * 65536) + raw[1];\n    let value = energy / 100.0;\n\n    msg.topic = \"Emergency-Line_kWh\";         // ใช้กับ join node\n    msg.payload = value;             // ต้องเป็น number ตรงๆ\n    flow.set(\"Emergency-Line_kWh\", value);    // optional: เก็บไว้ใช้ที่อื่น\n\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 420,
        "wires": [
            [
                "9c2e889fa205f019",
                "2608358110ca97ed",
                "d3379929b15f6aa8"
            ]
        ]
    },
    {
        "id": "d78a2b3bdb36b09f",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "adl200n-G1-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 60,
        "wires": []
    },
    {
        "id": "939436d12dba0cbf",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "adl200n-G2-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 120,
        "wires": []
    },
    {
        "id": "57f9b4e85e29343d",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "adl200n-G3-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 180,
        "wires": []
    },
    {
        "id": "309f7193048920da",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "adl200n-G4-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 240,
        "wires": []
    },
    {
        "id": "7dc0c9b3f1839e2b",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "adl200n-Ins-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 300,
        "wires": []
    },
    {
        "id": "0621d8abf198d53a",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "adl200n-Normal-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 360,
        "wires": []
    },
    {
        "id": "9c2e889fa205f019",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "adl200n-Emer-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 420,
        "wires": []
    },
    {
        "id": "cec6a521c3b74ded",
        "type": "modbus-read",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "f8528b6842fcf749",
        "name": "adl200n1-A-ComGr1",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "12",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 600,
        "y": 1820,
        "wires": [
            [
                "49b766911d365f37"
            ],
            []
        ]
    },
    {
        "id": "7f2601cbd404ae83",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "f8528b6842fcf749",
        "name": "adl200n_current",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 1820,
        "wires": []
    },
    {
        "id": "49b766911d365f37",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "f8528b6842fcf749",
        "name": "convert int to real unit(32bits)",
        "func": "let raw = msg.payload;  // ค่า Register ที่อ่านได้ (Array)\n\nif (Array.isArray(raw) && raw.length > 0) {\n    msg.payload = raw[0] / 100.0;  // แปลงค่าเป็น Amp (หาร 100)\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1820,
        "wires": [
            [
                "7f2601cbd404ae83"
            ]
        ]
    },
    {
        "id": "3aa8b23a1176b856",
        "type": "modbus-flex-sequencer",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "box4-Frequency",
        "sequences": [
            {
                "name": "ComG1",
                "unitid": "1",
                "fc": "FC3",
                "address": "17",
                "quantity": "1"
            },
            {
                "name": "ComG2",
                "unitid": "2",
                "fc": "FC3",
                "address": "17",
                "quantity": "1"
            },
            {
                "name": "ComG3",
                "unitid": "3",
                "fc": "FC3",
                "address": "17",
                "quantity": "1"
            },
            {
                "name": "ComG4",
                "unitid": "4",
                "fc": "FC3",
                "address": "17",
                "quantity": "1"
            },
            {
                "name": "Instructor",
                "unitid": "5",
                "fc": "FC3",
                "address": "17",
                "quantity": "1"
            },
            {
                "name": "Normal-Line",
                "unitid": "6",
                "fc": "FC3",
                "address": "17",
                "quantity": "1"
            },
            {
                "name": "Emergency-Line",
                "unitid": "7",
                "fc": "FC3",
                "address": "17",
                "quantity": "1"
            }
        ],
        "server": "dbb746f7998c46e0",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 380,
        "y": 1460,
        "wires": [
            [
                "07708fc0665b79ed",
                "a2f04095745460a9"
            ],
            []
        ]
    },
    {
        "id": "07708fc0665b79ed",
        "type": "switch",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "Match-adl200n_Frequency",
        "property": "unitid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 620,
        "y": 1440,
        "wires": [
            [
                "6f587e119f19fa9a"
            ],
            [
                "3708deb94b6cd326"
            ],
            [
                "60462aecfc3827ff"
            ],
            [
                "d6b7a2bae7f9a7b5"
            ],
            [
                "d98d9eb3a441a985"
            ],
            [
                "84489ad8523c038f"
            ],
            [
                "e8287dd494923223"
            ]
        ]
    },
    {
        "id": "6f587e119f19fa9a",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "convert int to real unit-G1",
        "func": "let raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 100.0;  // แปลงเป็น Hz\n    msg.payload = {\n        \"ComG1_Hz\": value\n    };\n} else {\n    msg.payload = {\n        \"ComG1_Hz\": \"Invalid Data\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1380,
        "wires": [
            [
                "48bf7c993d6e5845",
                "a979468af919986e"
            ]
        ]
    },
    {
        "id": "3708deb94b6cd326",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "convert int to real unit-G2",
        "func": "let raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 100.0;  // แปลงเป็น Hz\n    msg.payload = {\n        \"ComG2_Hz\": value\n    };\n} else {\n    msg.payload = {\n        \"ComG2_Hz\": \"Invalid Data\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1440,
        "wires": [
            [
                "0c8e4539e200c24f",
                "a979468af919986e"
            ]
        ]
    },
    {
        "id": "60462aecfc3827ff",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "convert int to real unit-G3",
        "func": "let raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 100.0;  // แปลงเป็น Hz\n    msg.payload = {\n        \"ComG3_Hz\": value\n    };\n} else {\n    msg.payload = {\n        \"ComG3_Hz\": \"Invalid Data\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1500,
        "wires": [
            [
                "027df6e410098993",
                "a979468af919986e"
            ]
        ]
    },
    {
        "id": "d6b7a2bae7f9a7b5",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "convert int to real unit-G4",
        "func": "let raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 100.0;  // แปลงเป็น Hz\n    msg.payload = {\n        \"ComG4_Hz\": value\n    };\n} else {\n    msg.payload = {\n        \"ComG4_Hz\": \"Invalid Data\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1560,
        "wires": [
            [
                "1bb0ac45335bda0e",
                "a979468af919986e"
            ]
        ]
    },
    {
        "id": "d98d9eb3a441a985",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "convert int to real unit-Instructor",
        "func": "let raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 100.0;  // แปลงเป็น Hz\n    msg.payload = {\n        \"Instructor_Hz\": value\n    };\n} else {\n    msg.payload = {\n        \"Instructor_Hz\": \"Invalid Data\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1620,
        "wires": [
            [
                "5891940a3edce9dd",
                "a979468af919986e"
            ]
        ]
    },
    {
        "id": "84489ad8523c038f",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "convert int to real unit-NormalLine",
        "func": "let raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 100.0;  // แปลงเป็น Hz\n    msg.payload = {\n        \"NormalLine_Hz\": value\n    };\n} else {\n    msg.payload = {\n        \"NormalLine_Hz\": \"Invalid Data\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1680,
        "wires": [
            [
                "6ad2585920ce0f2d",
                "a979468af919986e"
            ]
        ]
    },
    {
        "id": "e8287dd494923223",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "convert int to real unit-EmergencyLine",
        "func": "let raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length > 0) {\n    let value = raw[0] / 100.0;  // แปลงเป็น Hz\n    msg.payload = {\n        \"EmergencyLine_Hz\": value\n    };\n} else {\n    msg.payload = {\n        \"EmergencyLine_Hz\": \"Invalid Data\"\n    };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1740,
        "wires": [
            [
                "3a36c55563c46d35",
                "a979468af919986e"
            ]
        ]
    },
    {
        "id": "48bf7c993d6e5845",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "adl200n_G1_Hz",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1380,
        "wires": []
    },
    {
        "id": "0c8e4539e200c24f",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "adl200n_G2_Hz",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1440,
        "wires": []
    },
    {
        "id": "027df6e410098993",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "adl200n_G3_Hz",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1500,
        "wires": []
    },
    {
        "id": "1bb0ac45335bda0e",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "adl200n_G4_Hz",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1560,
        "wires": []
    },
    {
        "id": "5891940a3edce9dd",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "adl200n_Ins_Hz",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1620,
        "wires": []
    },
    {
        "id": "6ad2585920ce0f2d",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "adl200n_Normal_Hz",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1680,
        "wires": []
    },
    {
        "id": "3a36c55563c46d35",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "adl200n_Emer_Hz",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1740,
        "wires": []
    },
    {
        "id": "b6cb6366be5bdf49",
        "type": "modbus-read",
        "z": "4b1b5ee444aaf88c",
        "name": "adl200n1-A-NormalLine",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "6",
        "dataType": "HoldingRegister",
        "adr": "21250",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 460,
        "y": 1120,
        "wires": [
            [
                "0c8de9f81f95b077",
                "4cfffef17b59bd98"
            ],
            []
        ]
    },
    {
        "id": "0c8de9f81f95b077",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "name": "convert int to real unit(32bits)",
        "func": "let raw = msg.payload;  // ค่า Register ที่อ่านได้ (Array)\n\nif (Array.isArray(raw) && raw.length > 0) {\n    msg.payload = raw[0] / 100.0;  // แปลงค่าเป็น Amp (หาร 100)\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "4cfffef17b59bd98",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "name": "adl200n_current",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1140,
        "wires": []
    },
    {
        "id": "f3384f08587eb1ac",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "total_kWh",
        "func": "// // ดึงค่าจาก flow context\n// let g1 = flow.get(\"comG1_kWh\") || 0;\n// let g2 = flow.get(\"comG2_kWh\") || 0;\n// let g3 = flow.get(\"comG3_kWh\") || 0;\n// let g4 = flow.get(\"comG4_kWh\") || 0;\n// let instructor = flow.get(\"Instructor_kWh\") || 0;\n// let normal = flow.get(\"Normal-Line_kWh\") || 0;\n// let emergency = flow.get(\"Emergency-Line_kWh\") || 0;\n\n// // รวมค่าทั้งหมด\n// let total = g1 + g2 + g3 + g4 + instructor + normal + emergency;\n\n// // ส่งออก payload\n// msg.payload = {\n//     \"comG1_kWh\": g1,\n//     \"comG2_kWh\": g2,\n//     \"comG3_kWh\": g3,\n//     \"comG4_kWh\": g4,\n//     \"Instructor_kWh\" : instructor,\n//     \"Normal-Line_kWh\": normal,\n//     \"Emergency-Line_kWh\": emergency,\n//     \"total_kWh\": total\n// };\n\n// return msg;\nlet data = msg.payload;\n\nlet total =\n    (data[\"comG1_kWh\"] || 0) +\n    (data[\"comG2_kWh\"] || 0) +\n    (data[\"comG3_kWh\"] || 0) +\n    (data[\"comG4_kWh\"] || 0) +\n    (data[\"Instructor_kWh\"] || 0) +\n    (data[\"Normal-Line_kWh\"] || 0) +\n    (data[\"Emergency-Line_kWh\"] || 0);\n\ndata[\"total_kWh_ST\"] = parseFloat(total.toFixed(2)); // รวมและปัดทศนิยม\n\nmsg.payload = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 280,
        "wires": [
            [
                "32ba2eb5fbece778",
                "e1d1fce2ce9650e4"
            ]
        ]
    },
    {
        "id": "32ba2eb5fbece778",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "total_kWh",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3380,
        "y": 220,
        "wires": []
    },
    {
        "id": "2608358110ca97ed",
        "type": "join",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "join kWh",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3110,
        "y": 280,
        "wires": [
            [
                "f3384f08587eb1ac",
                "36a9750e75446b5e"
            ]
        ]
    },
    {
        "id": "36a9750e75446b5e",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "join value",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3160,
        "y": 220,
        "wires": []
    },
    {
        "id": "d756b41a67920c9f",
        "type": "mqtt out",
        "z": "4b1b5ee444aaf88c",
        "g": "64bd2d33d84681c2",
        "name": "MainBoxEnergyMQTTOutToThingsBoard",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 1540,
        "y": 240,
        "wires": []
    },
    {
        "id": "c8ce3c5fc4febc46",
        "type": "mqtt out",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "MainBoxEnergyMQTTOutToThingsBoard",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 1540,
        "y": 800,
        "wires": []
    },
    {
        "id": "a979468af919986e",
        "type": "mqtt out",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "MainBoxEnergyMQTTOutToThingsBoard",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 1540,
        "y": 1580,
        "wires": []
    },
    {
        "id": "1dcfff385e58f350",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "4c56f08f3e0f9784",
        "name": "adl200n_current",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 540,
        "wires": []
    },
    {
        "id": "a2f04095745460a9",
        "type": "modbus-response",
        "z": "4b1b5ee444aaf88c",
        "g": "f8528b6842fcf749",
        "name": "",
        "registerShowMax": 20,
        "x": 550,
        "y": 1540,
        "wires": []
    },
    {
        "id": "586a23563a570cef",
        "type": "join",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "join kWh",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3110,
        "y": 120,
        "wires": [
            [
                "877ffecefb90791f"
            ]
        ]
    },
    {
        "id": "877ffecefb90791f",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "CG-total_kWh",
        "func": "// // ดึงค่าจาก flow context\n// let g1 = flow.get(\"comG1_kWh\") || 0;\n// let g2 = flow.get(\"comG2_kWh\") || 0;\n// let g3 = flow.get(\"comG3_kWh\") || 0;\n// let g4 = flow.get(\"comG4_kWh\") || 0;\n// let instructor = flow.get(\"Instructor_kWh\") || 0;\n// let normal = flow.get(\"Normal-Line_kWh\") || 0;\n// let emergency = flow.get(\"Emergency-Line_kWh\") || 0;\n\n// // รวมค่าทั้งหมด\n// let total = g1 + g2 + g3 + g4 + instructor + normal + emergency;\n\n// // ส่งออก payload\n// msg.payload = {\n//     \"comG1_kWh\": g1,\n//     \"comG2_kWh\": g2,\n//     \"comG3_kWh\": g3,\n//     \"comG4_kWh\": g4,\n//     \"Instructor_kWh\" : instructor,\n//     \"Normal-Line_kWh\": normal,\n//     \"Emergency-Line_kWh\": emergency,\n//     \"total_kWh\": total\n// };\n\n// return msg;\n\nlet data = msg.payload;\n\nlet total =\n    (data[\"comG1_kWh\"] || 0) +\n    (data[\"comG2_kWh\"] || 0) +\n    (data[\"comG3_kWh\"] || 0) +\n    (data[\"comG4_kWh\"] || 0) +\n    (data[\"Instructor_kWh\"] || 0);\n// + (data[\"Normal-Line_kWh\"] || 0)\n// + (data[\"Emergency-Line_kWh\"] || 0);\n\nlet totalFormatted = parseFloat(total.toFixed(2));  // รวมและปัดทศนิยม\n\n// ส่งออกเฉพาะ total ที่ต้องการแสดง\nmsg.payload = {\n    CG_total_kWh_ST: totalFormatted\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3300,
        "y": 120,
        "wires": [
            [
                "7353de8527f23603",
                "e1d1fce2ce9650e4"
            ]
        ]
    },
    {
        "id": "abf56078d974f8dc",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "Light-total_kWh",
        "func": "// // ดึงค่าจาก flow context\n// let g1 = flow.get(\"comG1_kWh\") || 0;\n// let g2 = flow.get(\"comG2_kWh\") || 0;\n// let g3 = flow.get(\"comG3_kWh\") || 0;\n// let g4 = flow.get(\"comG4_kWh\") || 0;\n// let instructor = flow.get(\"Instructor_kWh\") || 0;\n// let normal = flow.get(\"Normal-Line_kWh\") || 0;\n// let emergency = flow.get(\"Emergency-Line_kWh\") || 0;\n\n// // รวมค่าทั้งหมด\n// let total = g1 + g2 + g3 + g4 + instructor + normal + emergency;\n\n// // ส่งออก payload\n// msg.payload = {\n//     \"comG1_kWh\": g1,\n//     \"comG2_kWh\": g2,\n//     \"comG3_kWh\": g3,\n//     \"comG4_kWh\": g4,\n//     \"Instructor_kWh\" : instructor,\n//     \"Normal-Line_kWh\": normal,\n//     \"Emergency-Line_kWh\": emergency,\n//     \"total_kWh\": total\n// };\n\n// return msg;\nlet data = msg.payload;\n\nlet total =\n    (data[\"Normal-Line_kWh\"] || 0) +\n    (data[\"Emergency-Line_kWh\"] || 0);\n\ndata[\"Lighting-total_kWh\"] = parseFloat(total.toFixed(2));\n\nmsg.payload = {\n    \"Lighting-total_kWh_ST\": parseFloat(total.toFixed(2))\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3320,
        "y": 380,
        "wires": [
            [
                "10212861d825b894",
                "e1d1fce2ce9650e4"
            ]
        ]
    },
    {
        "id": "d3379929b15f6aa8",
        "type": "join",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "join kWh",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3110,
        "y": 380,
        "wires": [
            [
                "abf56078d974f8dc"
            ]
        ]
    },
    {
        "id": "7353de8527f23603",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "CG-total_kWh",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3420,
        "y": 60,
        "wires": []
    },
    {
        "id": "10212861d825b894",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "Light-total_kWh",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3520,
        "y": 380,
        "wires": []
    },
    {
        "id": "e1d1fce2ce9650e4",
        "type": "mqtt out",
        "z": "4b1b5ee444aaf88c",
        "g": "3954618d0304767a",
        "name": "A/CEnergyMQTTOutToThingsBoard",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 3740,
        "y": 260,
        "wires": []
    },
    {
        "id": "947bb1e38720f382",
        "type": "modbus-flex-sequencer",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "box4-KWh",
        "sequences": [
            {
                "name": "ComG1",
                "unitid": "1",
                "fc": "FC3",
                "address": "0",
                "quantity": "2"
            },
            {
                "name": "ComG2",
                "unitid": "2",
                "fc": "FC3",
                "address": "0",
                "quantity": "2"
            },
            {
                "name": "ComG3",
                "unitid": "3",
                "fc": "FC3",
                "address": "0",
                "quantity": "2"
            },
            {
                "name": "ComG4",
                "unitid": "4",
                "fc": "FC3",
                "address": "0",
                "quantity": "2"
            },
            {
                "name": "Instructor",
                "unitid": "5",
                "fc": "FC3",
                "address": "0",
                "quantity": "2"
            },
            {
                "name": "Normal-Line",
                "unitid": "6",
                "fc": "FC3",
                "address": "0",
                "quantity": "2"
            },
            {
                "name": "Emergency-Line",
                "unitid": "7",
                "fc": "FC3",
                "address": "0",
                "quantity": "2"
            }
        ],
        "server": "dbb746f7998c46e0",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2110,
        "y": 700,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "785327542d0ae2e4",
        "type": "switch",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "Match-adl200n_KWh",
        "property": "unitid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 2360,
        "y": 680,
        "wires": [
            [
                "3dd3c49f83387e75"
            ],
            [
                "d43016c2faeabd76"
            ],
            [
                "8bd0ae669f6ec8d8"
            ],
            [
                "523e16e942c1a5c4"
            ],
            [
                "ef8c4b3f15b66a6b"
            ],
            [
                "33e045eff9194802"
            ],
            [
                "8ee4cb597080130a"
            ]
        ]
    },
    {
        "id": "1057f840b605dbc7",
        "type": "inject",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2050,
        "y": 620,
        "wires": [
            [
                "5dced4af14021595"
            ]
        ]
    },
    {
        "id": "3dd3c49f83387e75",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "total active energy",
        "func": "// let raw = msg.payload;\n\n// if (Array.isArray(raw) && raw.length === 2) {\n//     let energy = (raw[0] * 65536) + raw[1];  // รวม 2 Registers เป็น 32-bit Integer\n//     let value = energy / 100.0;  // แปลงเป็น kWh\n\n//     // ตั้งชื่อ payload เป็นของ ComG1\n//     msg.topic = \"comG1_kWh\"; // <-- สำคัญ!\n//     msg.payload = {\n//         \"comG1_kWh\": value\n//     };\n\n//     // ถ้าต้องการเก็บใน flow context ด้วย\n//     flow.set(\"comG1_kWh\", value);\n// } else {\n//     msg.payload = \"Invalid Data\";\n// }\n\n// return msg;\n\nlet raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[1] * 65536) + raw[0];\n    \n    let value = energy / 1000.0;\n\n    msg.topic = \"comG1_kWh\";         // ใช้กับ join node\n    msg.payload = value;             // ต้องเป็น number ตรงๆ\n    flow.set(\"comG1_kWh\", value);    // optional: เก็บไว้ใช้ที่อื่น\n\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 600,
        "wires": [
            [
                "88b210f49af8f075",
                "a91f2ddb77a104b2",
                "e256895e9d9103f9"
            ]
        ]
    },
    {
        "id": "d43016c2faeabd76",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "total active energy",
        "func": "// let raw = msg.payload;\n\n// if (Array.isArray(raw) && raw.length === 2) {\n//     let energy = (raw[0] * 65536) + raw[1];  // รวม 2 Registers เป็น 32-bit Integer\n//     let value = energy / 100.0;  // แปลงเป็น kWh\n\n//     msg.topic = \"comG2_kWh\"; // <-- สำคัญ!\n\n//     // ตั้งชื่อ payload \n//     msg.payload = {\n//         \"comG2_kWh\": value\n//     };\n\n//     // ถ้าต้องการเก็บใน flow context ด้วย\n//     flow.set(\"comG2_kWh\", value);\n// } else {\n//     msg.payload = \"Invalid Data\";\n// }\n\n// return msg;\n\nlet raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[1] * 65536) + raw[0];\n    let value = energy / 1000.0;\n\n    msg.topic = \"comG2_kWh\";         // ใช้กับ join node\n    msg.payload = value;             // ต้องเป็น number ตรงๆ\n    flow.set(\"comG2_kWh\", value);    // optional: เก็บไว้ใช้ที่อื่น\n\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 660,
        "wires": [
            [
                "74e5262d7f6becc9",
                "a91f2ddb77a104b2",
                "e256895e9d9103f9"
            ]
        ]
    },
    {
        "id": "8bd0ae669f6ec8d8",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "total active energy",
        "func": "// let raw = msg.payload;\n\n// if (Array.isArray(raw) && raw.length === 2) {\n//     let energy = (raw[0] * 65536) + raw[1];  // รวม 2 Registers เป็น 32-bit Integer\n//     let value = energy / 100.0;  // แปลงเป็น kWh\n\n//     msg.topic = \"comG3_kWh\"; // <-- สำคัญ!\n    \n//     /// ตั้งชื่อ payload \n//     msg.payload = {\n//         \"comG3_kWh\": value\n//     };\n\n//     // ถ้าต้องการเก็บใน flow context ด้วย\n//     flow.set(\"comG3_kWh\", value);\n// } else {\n//     msg.payload = \"Invalid Data\";\n// }\n\n// return msg;\n\nlet raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[0] * 65536) + raw[1];\n    let value = energy / 1000.0;\n\n    msg.topic = \"comG3_kWh\";         // ใช้กับ join node\n    msg.payload = value;             // ต้องเป็น number ตรงๆ\n    flow.set(\"comG3_kWh\", value);    // optional: เก็บไว้ใช้ที่อื่น\n\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 720,
        "wires": [
            [
                "0e1c7e12b99dc255",
                "a91f2ddb77a104b2",
                "e256895e9d9103f9"
            ]
        ]
    },
    {
        "id": "523e16e942c1a5c4",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "total active energy",
        "func": "// let raw = msg.payload;\n\n// if (Array.isArray(raw) && raw.length === 2) {\n//     let energy = (raw[0] * 65536) + raw[1];  // รวม 2 Registers เป็น 32-bit Integer\n//     let value = energy / 100.0;  // แปลงเป็น kWh\n\n//     msg.topic = \"comG4_kWh\"; // <-- สำคัญ!\n    \n//     // ตั้งชื่อ payload \n//     msg.payload = {\n//         \"comG4_kWh\": value\n//     };\n\n//     // ถ้าต้องการเก็บใน flow context ด้วย\n//     flow.set(\"comG4_kWh\", value);\n// } else {\n//     msg.payload = \"Invalid Data\";\n// }\n\n// return msg;\nlet raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[0] * 65536) + raw[1];\n    let value = energy / 1000.0;\n\n    msg.topic = \"comG4_kWh\";         // ใช้กับ join node\n    msg.payload = value;             // ต้องเป็น number ตรงๆ\n    flow.set(\"comG4_kWh\", value);    // optional: เก็บไว้ใช้ที่อื่น\n\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 780,
        "wires": [
            [
                "cfa584d62e6d4487",
                "a91f2ddb77a104b2",
                "e256895e9d9103f9"
            ]
        ]
    },
    {
        "id": "ef8c4b3f15b66a6b",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "total active energy",
        "func": "// let raw = msg.payload;\n\n// if (Array.isArray(raw) && raw.length === 2) {\n//     let energy = (raw[0] * 65536) + raw[1];  // รวม 2 Registers เป็น 32-bit Integer\n//     let value = energy / 100.0;  // แปลงเป็น kWh\n\n//     msg.topic = \"Instructor_kWh\"; // <-- สำคัญ!\n    \n//     // ตั้งชื่อ payload \n//     msg.payload = {\n//         \"Instructor_kWh\": value\n//     };\n\n//     // ถ้าต้องการเก็บใน flow context ด้วย\n//     flow.set(\"Instructor_kWh\", value);\n// } else {\n//     msg.payload = \"Invalid Data\";\n// }\n\n// return msg;\n\n\nlet raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[0] * 65536) + raw[1];\n    let value = energy / 1000.0;\n\n    msg.topic = \"Instructor_kWh\";         // ใช้กับ join node\n    msg.payload = value;             // ต้องเป็น number ตรงๆ\n    flow.set(\"Instructor_kWh\", value);    // optional: เก็บไว้ใช้ที่อื่น\n\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 840,
        "wires": [
            [
                "66fa475acc62d355",
                "a91f2ddb77a104b2",
                "e256895e9d9103f9"
            ]
        ]
    },
    {
        "id": "33e045eff9194802",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "total active energy",
        "func": "// let raw = msg.payload;\n\n// if (Array.isArray(raw) && raw.length === 2) {\n//     let energy = (raw[0] * 65536) + raw[1];  // รวม 2 Registers เป็น 32-bit Integer\n//     let value = energy / 100.0;  // แปลงเป็น kWh\n\n//     msg.topic = \"Normal-Line\"; // <-- สำคัญ!\n    \n//     // ตั้งชื่อ payload \n//     msg.payload = {\n//         \"Normal-Line\": value\n//     };\n\n//     // ถ้าต้องการเก็บใน flow context ด้วย\n//     flow.set(\"Normal-Line_kWh\", value);\n// } else {\n//     msg.payload = \"Invalid Data\";\n// }\n\n// return msg;\n\n\n\nlet raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[0] * 65536) + raw[1];\n    let value = energy / 1000.0;\n\n    msg.topic = \"Normal-Line_kWh\";         // ใช้กับ join node\n    msg.payload = value;             // ต้องเป็น number ตรงๆ\n    flow.set(\"Normal-Line_kWh\", value);    // optional: เก็บไว้ใช้ที่อื่น\n\n} else {\n    msg.payload = \"Normal-Line_kWh\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 900,
        "wires": [
            [
                "a68120b6c7ee01fb",
                "a91f2ddb77a104b2",
                "dcf01330c01f04e7"
            ]
        ]
    },
    {
        "id": "8ee4cb597080130a",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "total active energy",
        "func": "// let raw = msg.payload;\n\n// if (Array.isArray(raw) && raw.length === 2) {\n//     let energy = (raw[0] * 65536) + raw[1];  // รวม 2 Registers เป็น 32-bit Integer\n//     let value = energy / 100.0;  // แปลงเป็น kWh\n\n//     msg.topic = \"Emergency-Line_kWh\"; // <-- สำคัญ!\n\n//     // ตั้งชื่อ payload \n//     msg.payload = {\n//         \"Emergency-Line_kWh\": value\n//     };\n\n//     // ถ้าต้องการเก็บใน flow context ด้วย\n//     flow.set(\"Emergency-Line_kWh\", value);\n// } else {\n//     msg.payload = \"Invalid Data\";\n// }\n\n// return msg;\n\nlet raw = msg.payload;\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[0] * 65536) + raw[1];\n    let value = energy / 1000.0;\n\n    msg.topic = \"Emergency-Line_kWh\";         // ใช้กับ join node\n    msg.payload = value;             // ต้องเป็น number ตรงๆ\n    flow.set(\"Emergency-Line_kWh\", value);    // optional: เก็บไว้ใช้ที่อื่น\n\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 960,
        "wires": [
            [
                "0c5a36b67a8dc761",
                "a91f2ddb77a104b2",
                "dcf01330c01f04e7"
            ]
        ]
    },
    {
        "id": "88b210f49af8f075",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "adl200n-G1-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 600,
        "wires": []
    },
    {
        "id": "74e5262d7f6becc9",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "adl200n-G2-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 660,
        "wires": []
    },
    {
        "id": "0e1c7e12b99dc255",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "adl200n-G3-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 720,
        "wires": []
    },
    {
        "id": "cfa584d62e6d4487",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "adl200n-G4-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 780,
        "wires": []
    },
    {
        "id": "66fa475acc62d355",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "adl200n-Ins-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 840,
        "wires": []
    },
    {
        "id": "a68120b6c7ee01fb",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "adl200n-Normal-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2860,
        "y": 900,
        "wires": []
    },
    {
        "id": "0c5a36b67a8dc761",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "adl200n-Emer-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2850,
        "y": 960,
        "wires": []
    },
    {
        "id": "784433bd9b71cb60",
        "type": "modbus-read",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "adl200n1-ComGr1",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "2",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 1930,
        "y": 1020,
        "wires": [
            [
                "1a2674c1763b81e8"
            ],
            []
        ]
    },
    {
        "id": "cc32b217f328563c",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "adl200n-kWh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2360,
        "y": 1020,
        "wires": []
    },
    {
        "id": "1a2674c1763b81e8",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "function 1",
        "func": "let raw = msg.payload;  // ค่า Register ที่อ่านได้จาก Modbus\n\nif (Array.isArray(raw) && raw.length === 2) {\n    let energy = (raw[0] * 65536) + raw[1];  // รวมค่า 2 Registers เป็น 32-bit Integer\n    msg.payload = energy / 100.0;  // แปลงค่าเป็น kWh\n} else {\n    msg.payload = \"Invalid Data\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1020,
        "wires": [
            [
                "cc32b217f328563c"
            ]
        ]
    },
    {
        "id": "035bfc45fda2e9f4",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "total_kWh",
        "func": "// // ดึงค่าจาก flow context\n// let g1 = flow.get(\"comG1_kWh\") || 0;\n// let g2 = flow.get(\"comG2_kWh\") || 0;\n// let g3 = flow.get(\"comG3_kWh\") || 0;\n// let g4 = flow.get(\"comG4_kWh\") || 0;\n// let instructor = flow.get(\"Instructor_kWh\") || 0;\n// let normal = flow.get(\"Normal-Line_kWh\") || 0;\n// let emergency = flow.get(\"Emergency-Line_kWh\") || 0;\n\n// // รวมค่าทั้งหมด\n// let total = g1 + g2 + g3 + g4 + instructor + normal + emergency;\n\n// // ส่งออก payload\n// msg.payload = {\n//     \"comG1_kWh\": g1,\n//     \"comG2_kWh\": g2,\n//     \"comG3_kWh\": g3,\n//     \"comG4_kWh\": g4,\n//     \"Instructor_kWh\" : instructor,\n//     \"Normal-Line_kWh\": normal,\n//     \"Emergency-Line_kWh\": emergency,\n//     \"total_kWh\": total\n// };\n\n// return msg;\nlet data = msg.payload;\n\nlet total =\n    (data[\"comG1_kWh\"] || 0) +\n    (data[\"comG2_kWh\"] || 0) +\n    (data[\"comG3_kWh\"] || 0) +\n    (data[\"comG4_kWh\"] || 0) +\n    (data[\"Instructor_kWh\"] || 0) +\n    (data[\"Normal-Line_kWh\"] || 0) +\n    (data[\"Emergency-Line_kWh\"] || 0);\n\ndata[\"total_kWh\"] = parseFloat(total.toFixed(2)); // รวมและปัดทศนิยม\n\nmsg.payload = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 820,
        "wires": [
            [
                "12fa8030d18b18fa"
            ]
        ]
    },
    {
        "id": "12fa8030d18b18fa",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "total_kWh",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3380,
        "y": 760,
        "wires": []
    },
    {
        "id": "a91f2ddb77a104b2",
        "type": "join",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "join kWh",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3110,
        "y": 820,
        "wires": [
            [
                "035bfc45fda2e9f4",
                "90e911a56183a780"
            ]
        ]
    },
    {
        "id": "90e911a56183a780",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "join value",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3160,
        "y": 760,
        "wires": []
    },
    {
        "id": "e256895e9d9103f9",
        "type": "join",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "join kWh",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3110,
        "y": 660,
        "wires": [
            [
                "9d760be1997a136c"
            ]
        ]
    },
    {
        "id": "9d760be1997a136c",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "CG-total_kWh",
        "func": "// // ดึงค่าจาก flow context\n// let g1 = flow.get(\"comG1_kWh\") || 0;\n// let g2 = flow.get(\"comG2_kWh\") || 0;\n// let g3 = flow.get(\"comG3_kWh\") || 0;\n// let g4 = flow.get(\"comG4_kWh\") || 0;\n// let instructor = flow.get(\"Instructor_kWh\") || 0;\n// let normal = flow.get(\"Normal-Line_kWh\") || 0;\n// let emergency = flow.get(\"Emergency-Line_kWh\") || 0;\n\n// // รวมค่าทั้งหมด\n// let total = g1 + g2 + g3 + g4 + instructor + normal + emergency;\n\n// // ส่งออก payload\n// msg.payload = {\n//     \"comG1_kWh\": g1,\n//     \"comG2_kWh\": g2,\n//     \"comG3_kWh\": g3,\n//     \"comG4_kWh\": g4,\n//     \"Instructor_kWh\" : instructor,\n//     \"Normal-Line_kWh\": normal,\n//     \"Emergency-Line_kWh\": emergency,\n//     \"total_kWh\": total\n// };\n\n// return msg;\n\nlet data = msg.payload;\n\nlet total =\n    (data[\"comG1_kWh\"] || 0) +\n    (data[\"comG2_kWh\"] || 0) +\n    (data[\"comG3_kWh\"] || 0) +\n    (data[\"comG4_kWh\"] || 0) +\n    (data[\"Instructor_kWh\"] || 0);\n// + (data[\"Normal-Line_kWh\"] || 0)\n// + (data[\"Emergency-Line_kWh\"] || 0);\n\nlet totalFormatted = parseFloat(total.toFixed(2));  // รวมและปัดทศนิยม\n\n// ส่งออกเฉพาะ total ที่ต้องการแสดง\nmsg.payload = {\n    CG_total_kWh: totalFormatted\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3300,
        "y": 660,
        "wires": [
            [
                "13d8a3d0e1082d29"
            ]
        ]
    },
    {
        "id": "36b3d96a34fd8aa0",
        "type": "function",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "Light-total_kWh",
        "func": "// // ดึงค่าจาก flow context\n// let g1 = flow.get(\"comG1_kWh\") || 0;\n// let g2 = flow.get(\"comG2_kWh\") || 0;\n// let g3 = flow.get(\"comG3_kWh\") || 0;\n// let g4 = flow.get(\"comG4_kWh\") || 0;\n// let instructor = flow.get(\"Instructor_kWh\") || 0;\n// let normal = flow.get(\"Normal-Line_kWh\") || 0;\n// let emergency = flow.get(\"Emergency-Line_kWh\") || 0;\n\n// // รวมค่าทั้งหมด\n// let total = g1 + g2 + g3 + g4 + instructor + normal + emergency;\n\n// // ส่งออก payload\n// msg.payload = {\n//     \"comG1_kWh\": g1,\n//     \"comG2_kWh\": g2,\n//     \"comG3_kWh\": g3,\n//     \"comG4_kWh\": g4,\n//     \"Instructor_kWh\" : instructor,\n//     \"Normal-Line_kWh\": normal,\n//     \"Emergency-Line_kWh\": emergency,\n//     \"total_kWh\": total\n// };\n\n// return msg;\nlet data = msg.payload;\n\nlet total =\n    (data[\"Normal-Line_kWh\"] || 0) +\n    (data[\"Emergency-Line_kWh\"] || 0);\n\ndata[\"Lighting-total_kWh\"] = parseFloat(total.toFixed(2));\n\nmsg.payload = {\n    \"Lighting-total_kWh\": parseFloat(total.toFixed(2))\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3320,
        "y": 920,
        "wires": [
            [
                "2cda52f1c5459162"
            ]
        ]
    },
    {
        "id": "dcf01330c01f04e7",
        "type": "join",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "join kWh",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 3110,
        "y": 920,
        "wires": [
            [
                "36b3d96a34fd8aa0"
            ]
        ]
    },
    {
        "id": "13d8a3d0e1082d29",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "CG-total_kWh",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3420,
        "y": 600,
        "wires": []
    },
    {
        "id": "2cda52f1c5459162",
        "type": "debug",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "Light-total_kWh",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3520,
        "y": 920,
        "wires": []
    },
    {
        "id": "b02030168dc034a4",
        "type": "mqtt out",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "A/CEnergyMQTTOutToThingsBoard",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "51f796d92c532e29",
        "x": 3740,
        "y": 800,
        "wires": []
    },
    {
        "id": "5dced4af14021595",
        "type": "modbus-flex-sequencer",
        "z": "4b1b5ee444aaf88c",
        "d": true,
        "g": "9de92811d3e7f1b3",
        "name": "box4-KWh",
        "sequences": [
            {
                "name": "ComG1",
                "unitid": "1",
                "fc": "FC3",
                "address": "13",
                "quantity": "2"
            },
            {
                "name": "ComG2",
                "unitid": "2",
                "fc": "FC3",
                "address": "13",
                "quantity": "2"
            },
            {
                "name": "ComG3",
                "unitid": "3",
                "fc": "FC3",
                "address": "13",
                "quantity": "2"
            },
            {
                "name": "ComG4",
                "unitid": "4",
                "fc": "FC3",
                "address": "13",
                "quantity": "2"
            },
            {
                "name": "Instructor",
                "unitid": "5",
                "fc": "FC3",
                "address": "13",
                "quantity": "2"
            },
            {
                "name": "Normal-Line",
                "unitid": "6",
                "fc": "FC3",
                "address": "13",
                "quantity": "2"
            },
            {
                "name": "Emergency-Line",
                "unitid": "7",
                "fc": "FC3",
                "address": "13",
                "quantity": "2"
            }
        ],
        "server": "dbb746f7998c46e0",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2110,
        "y": 780,
        "wires": [
            [
                "785327542d0ae2e4"
            ],
            []
        ]
    },
    {
        "id": "c11d00d0486828a4",
        "type": "mqtt in",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Box2AirConControlRPC",
        "topic": "v1/devices/me/rpc/request/+",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "e60d06a0a8f09ffe",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 280,
        "wires": [
            [
                "64ec79cdf85726a1",
                "386eaf88265c170e",
                "796235c1ee08e9e5",
                "c373df4e45b0485a"
            ]
        ]
    },
    {
        "id": "64ec79cdf85726a1",
        "type": "debug",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "AirConControlThingsBoardRPCDebug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 200,
        "wires": []
    },
    {
        "id": "873df16fbdd75e28",
        "type": "modbus-flex-write",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Box2RelayControlADM",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "da0d36f433b2c5b3",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 3710,
        "y": 280,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "160e1c5c916e4f7d",
        "type": "debug",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Box2RelayControlAir",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3700,
        "y": 160,
        "wires": []
    },
    {
        "id": "dcacfbb5ebb00b69",
        "type": "mqtt out",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Box2AirConRelayStatusTB",
        "topic": "v1/devices/me/attributes",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e60d06a0a8f09ffe",
        "x": 800,
        "y": 1000,
        "wires": []
    },
    {
        "id": "111b3bb26cc59f27",
        "type": "function",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Box2RelayOption2Function",
        "func": "// const addressMap = {\n//     \"211A_OFF\": 0,\n//     \"211A_ON\": 1,\n//     \"211B_OFF\": 2,\n//     \"211B_ON\": 3,\n//     \"212A_OFF\": 4,\n//     \"212A_ON\": 5,\n//     \"212B_OFF\": 6,\n//     \"212B_ON\": 7\n// };\nconst addressMap = {\n    \"212B_OFF\": 0,\n    \"212B_ON\": 1,\n    \"211B_OFF\": 2,\n    \"211B_ON\": 3,\n    \"212A_OFF\": 4,\n    \"212A_ON\": 5,\n    \"211A_OFF\": 6,\n    \"211A_ON\": 7\n};\n\nconst switchNo = msg.payload.switchNo;\n//const value = msg.payload.params.value;\nconst modbusAddress = addressMap[switchNo];\n\nif (modbusAddress !== undefined) {\n    // Create an array to hold both ON and OFF messages\n    let messages = [];\n    \n    // Create the ON message\n    let onMessage = {\n        payload: {\n            value: true, // ON state\n            \"fc\": 5,\n            \"unitid\": \"1\",\n            \"quantity\": \"1\",\n            \"address\": modbusAddress\n        }\n    };\n\n    // Create the OFF message\n    let offMessage = {\n        payload: {\n            value: false, // OFF state\n            \"fc\": 5,\n            \"unitid\": \"1\",\n            \"quantity\": \"1\",\n            \"address\": modbusAddress\n        }\n    };\n\n    // Add ON message to the array\n    messages.push(onMessage);\n\n    // Add OFF message to the array after a 500ms delay\n    setTimeout(() => {\n        node.send(offMessage); // Send OFF message\n    }, 2000);\n\n    // Return the ON message immediately\n    return onMessage;\n} else {\n    node.error(\"Error: Invalid switch number\", msg);\n    return null; // Stop the flow\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3420,
        "y": 240,
        "wires": [
            [
                "160e1c5c916e4f7d",
                "873df16fbdd75e28"
            ]
        ]
    },
    {
        "id": "89f9d32fcb6c0167",
        "type": "function",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "On/Off Cooldown",
        "func": "// โหลดค่าจาก flow context (เก็บสถานะปัจจุบัน)\nlet states = flow.get(\"states_withTimeStamp\") || {\n    \"211A\": 0,\n    \"211B\": 0,\n    \"212A\": 0,\n    \"212B\": 0\n};\n\nlet lastChangeTimes = flow.get(\"ON_OFF_lastChangeTimes\") || {\n    \"211A\": 0,\n    \"211B\": 0,\n    \"212A\": 0,\n    \"212B\": 0\n};\n\n// ตั้งค่าช่วงเวลาหน่วง (15 นาที)\nconst COOLDOWN_PERIOD = 15 * 60 * 1000; // 15 นาที (900,000 มิลลิวินาที)\nconst currentTime = Date.now();\n\n// Initialize outputs\nlet output1 = null; // ใช้สำหรับเปลี่ยนสถานะ (ส่งค่าไป ThingsBoard)\nlet output2 = null; // ใช้สำหรับแจ้งเตือน (Cooldown หรือ Error)\n\n// ตรวจสอบ payload\nif (!msg.payload || !msg.payload.params || !msg.payload.params.switchNo) {\n    msg.payload = { \"error\": \"Invalid input: switchNo is missing\" };\n    return [null, msg]; // ส่ง error ไปยัง output2\n}\n\n// ดึงค่าหมายเลขสวิตช์\nconst switchNo = msg.payload.params.switchNo;\nconst parts = switchNo.split('_');\n\nif (parts.length !== 2) {\n    msg.payload = { \"error\": \"Invalid switchNo format. Expected format: 'XXX_ON' or 'XXX_OFF'\" };\n    return [null, msg];\n}\n\nconst baseSwitchNo = parts[0]; // เช่น \"211A\"\nconst operation = parts[1]; // เช่น \"ON\" หรือ \"OFF\"\n\nconst elapsed = currentTime - (lastChangeTimes[baseSwitchNo] || 0);\nconst remainingMs = COOLDOWN_PERIOD - elapsed;\nconst remainingMinutes = Math.ceil(remainingMs / (60 * 1000));\n\n// สร้าง payload ที่จะส่งไปยัง ThingsBoard\nlet telemetryData = {\n    \"switchNo\": switchNo,\n    \"ready\": elapsed >= COOLDOWN_PERIOD ? \"ready\" : \"cooldown\",\n    \"remaining_time\": elapsed >= COOLDOWN_PERIOD ? 0 : remainingMinutes\n};\n\nif (operation === \"ON\") {\n    if (states[baseSwitchNo] === 1) {\n        msg.payload = { \"warning\": \"It is already ON\", \"switchNo\": switchNo };\n        output2 = msg;\n    } else if (elapsed < COOLDOWN_PERIOD) {\n        msg.payload = { \"warning\": `Wait ${remainingMinutes} minutes before turning ON!`, \"switchNo\": switchNo };\n        output2 = msg;\n    } else {\n        states[baseSwitchNo] = 1;\n        lastChangeTimes[baseSwitchNo] = currentTime;\n        telemetryData[\"Switch1\"] = \"ON\";\n        telemetryData[\"Last Change Time\"] = new Date(lastChangeTimes[baseSwitchNo]).toISOString();\n        output1 = { payload: telemetryData };\n    }\n} else if (operation === \"OFF\") {\n    if (states[baseSwitchNo] === 0) {\n        msg.payload = { \"warning\": \"It is already OFF\", \"switchNo\": switchNo };\n        output2 = msg;\n    } else if (elapsed < COOLDOWN_PERIOD) {\n        msg.payload = { \"warning\": `Wait ${remainingMinutes} minutes before turning OFF!`, \"switchNo\": switchNo };\n        output2 = msg;\n    } else {\n        states[baseSwitchNo] = 0;\n        lastChangeTimes[baseSwitchNo] = currentTime;\n        telemetryData[\"Switch1\"] = \"OFF\";\n        telemetryData[\"Last Change Time\"] = new Date(lastChangeTimes[baseSwitchNo]).toISOString();\n        output1 = { payload: telemetryData };\n    }\n} else {\n    msg.payload = { \"error\": \"Invalid operation. Expected 'ON' or 'OFF'\" };\n    return [null, msg];\n}\n\n// บันทึกค่าลง flow\nflow.set(\"states_withTimeStamp\", states);\nflow.set(\"ON_OFF_lastChangeTimes\", lastChangeTimes);\n\n// คืนค่าผลลัพธ์\nreturn [output1, output2];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3090,
        "y": 260,
        "wires": [
            [
                "ee68e749a9cdcfd5",
                "111b3bb26cc59f27",
                "0949f071b7c75887",
                "70509297170be64e"
            ],
            [
                "70509297170be64e",
                "9e260abfcfe2ff3c"
            ]
        ]
    },
    {
        "id": "ee68e749a9cdcfd5",
        "type": "debug",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "operation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3360,
        "y": 160,
        "wires": []
    },
    {
        "id": "386eaf88265c170e",
        "type": "switch",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Select Mode",
        "property": "payload.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "disableState",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 840,
        "wires": [
            [
                "5ef3440d42c16127"
            ]
        ]
    },
    {
        "id": "5ef3440d42c16127",
        "type": "function",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Select Mode",
        "func": "if (!msg.payload) {\n    node.error(\"Error: msg.payload is missing\", msg);\n    return null;\n}\n\nif (typeof msg.payload.params === \"undefined\") {\n    node.error(\"Error: msg.payload.params is missing\", msg);\n    return null;\n}\n\n// กำหนดค่า DisabledState โดยตรงจาก params (ไม่ต้อง .DisabledState)\nmsg.payload.DisabledState = msg.payload.params;\n\n// Debug ดูค่าก่อนส่งไปต่อ\nnode.warn(\"DisabledState: \" + msg.payload.DisabledState);\n//msg.topic = \"params\";\nflow.set(\"latest_params\", msg.payload.params);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 840,
        "wires": [
            [
                "7c2c7550836d912a",
                "a5879f8e4840a955",
                "f51b70d7ee6b2f15"
            ]
        ]
    },
    {
        "id": "7c2c7550836d912a",
        "type": "mqtt out",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "SendMode",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e60d06a0a8f09ffe",
        "x": 950,
        "y": 740,
        "wires": []
    },
    {
        "id": "84bef34c26910b85",
        "type": "comment",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Air",
        "info": "",
        "x": 130,
        "y": 220,
        "wires": []
    },
    {
        "id": "6fc684c9a1043afe",
        "type": "function",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "On/Off Auto",
        "func": "const roomStatus = msg.payload.room_status;\nconst isAuto = msg.payload.params;\n\nif (isAuto !== true) {\n    return null;\n}\n\nconst airList = [\"211A\", \"211B\", \"212A\", \"212B\"];\nconst action = roomStatus === \"Available\" ? \"ON\" : \"OFF\";\n\nairList.forEach(room => {\n    const message = {\n        payload: {\n            params: {\n                switchNo: `${room}_${action}`\n            }\n        }\n    };\n    node.send(message);\n});\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 440,
        "wires": [
            [
                "310524b44728bf22",
                "89f9d32fcb6c0167"
            ]
        ]
    },
    {
        "id": "310524b44728bf22",
        "type": "debug",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "On/Off Auto",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3110,
        "y": 440,
        "wires": []
    },
    {
        "id": "796235c1ee08e9e5",
        "type": "switch",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Check Auto",
        "property": "payload.params",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 400,
        "wires": [
            [],
            [
                "9255fc6469b588dc"
            ]
        ]
    },
    {
        "id": "1a7872be8d797f02",
        "type": "function",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "resend current room_status&params",
        "func": "let roomStatus = flow.get(\"latest_room_status\");\nlet params = flow.get(\"latest_params\");\n\nif (roomStatus === undefined && params === undefined) {\n    node.warn(\"❌ Resend failed: BOTH room_status and params are missing in context\");\n    return null;\n}\nif (roomStatus === undefined) {\n    node.warn(\"❌ Resend failed: room_status is missing in context\");\n    return null;\n}\nif (params === undefined) {\n    node.warn(\"❌ Resend failed: params (DisabledState) is missing in context\");\n    return null;\n}\n\nnode.warn(`✅ Resend ready: room_status=${roomStatus}, params=${params}`);\nreturn {\n    payload: {\n        room_status: roomStatus,\n        params: params\n    }\n};\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 400,
        "wires": [
            [
                "aaed738d91f88626",
                "4717ba891da19c3c",
                "11f8ccebcc15d5b9"
            ]
        ]
    },
    {
        "id": "aaed738d91f88626",
        "type": "debug",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "debug resend",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2700,
        "y": 320,
        "wires": []
    },
    {
        "id": "0949f071b7c75887",
        "type": "debug",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "On/Off Cooldown",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3390,
        "y": 120,
        "wires": []
    },
    {
        "id": "70509297170be64e",
        "type": "mqtt out",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Box2AirConRelayStatusTB",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e60d06a0a8f09ffe",
        "x": 3420,
        "y": 320,
        "wires": []
    },
    {
        "id": "a5879f8e4840a955",
        "type": "debug",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "debug select mode",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 800,
        "wires": []
    },
    {
        "id": "310c9cf76cd7ce1a",
        "type": "modbus-read",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Box2AirConStatus",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Input",
        "adr": "0",
        "quantity": "8",
        "rate": "2",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "da0d36f433b2c5b3",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 170,
        "y": 1040,
        "wires": [
            [
                "ab63e189b485136f",
                "f20606f668223743"
            ],
            []
        ]
    },
    {
        "id": "f20606f668223743",
        "type": "function",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Box2RelayStatusFunction",
        "func": "let statuses = msg.payload;\n\nlet gauge1 = statuses[0] ? 0 : 1 ; //AC211A\nlet gauge2 = statuses[1] ? 0 : 1 ; //AC212A\nlet gauge3 = statuses[2] ? 0 : 1 ; //AC211B\nlet gauge4 = statuses[3] ? 0 : 1 ;  //AC212B\n\n//edit\nmsg.payload = {\n    \"AC212B\":gauge4,\n    \"AC211B\":gauge3,\n    \"AC212A\":gauge2,\n    \"AC211A\":gauge1\n};\n// msg.payload = {\n//     \"AC211A\":gauge4,\n//     \"AC211B\":gauge3,\n//     \"AC212A\":gauge2,\n//     \"AC212B\":gauge1\n// };\nflow.set(\"ACStatusNode\",msg.payload);\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1080,
        "wires": [
            [
                "dcacfbb5ebb00b69",
                "162a374b4d4e10a3"
            ]
        ]
    },
    {
        "id": "162a374b4d4e10a3",
        "type": "debug",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Box2AirConStatusDebug-Funtion",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1080,
        "wires": []
    },
    {
        "id": "ab63e189b485136f",
        "type": "debug",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Box2AirConStatusDebug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 1000,
        "wires": []
    },
    {
        "id": "a94240aedbe66b3d",
        "type": "inject",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Start",
        "props": [],
        "repeat": "",
        "crontab": "*/2 8-20 * * 1,2,3,4,5,6",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 390,
        "y": 580,
        "wires": [
            [
                "026281ec6ed965f7"
            ]
        ]
    },
    {
        "id": "bd4118096ef81bc2",
        "type": "function",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Prepare Login Payload",
        "func": "msg.method = \"POST\";\nmsg.url = \"http://10.34.112.192:8080/api/auth/login\";\nmsg.headers = { \"Content-Type\": \"application/json\" };\nmsg.payload = {\n    username: \"papavarin.khm@student.mahidol.edu\",\n    password: \"ict555\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 580,
        "wires": [
            [
                "8a13cbc0699f9930"
            ]
        ]
    },
    {
        "id": "8a13cbc0699f9930",
        "type": "http request",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Login to ThingsBoard",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 960,
        "y": 580,
        "wires": [
            [
                "0dc44af802c3e4f7"
            ]
        ]
    },
    {
        "id": "0dc44af802c3e4f7",
        "type": "function",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Build Request to Get Shared Attribute",
        "func": "const jwt = msg.payload.token;\nconst deviceId = \"390c9ec0-f96b-11ef-8636-93168e2858a5\"; // Air Con\n\nmsg.method = \"GET\";\nmsg.url = `http://10.34.112.192:8080/api/plugins/telemetry/DEVICE/${deviceId}/values/attributes/SHARED_SCOPE`;\nmsg.headers = {\n    \"X-Authorization\": `Bearer ${jwt}`\n};\ndelete msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 580,
        "wires": [
            [
                "7b40ebceb8feefe1"
            ]
        ]
    },
    {
        "id": "7b40ebceb8feefe1",
        "type": "http request",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Get Shared Attribute",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1500,
        "y": 580,
        "wires": [
            [
                "8521b24da888f486"
            ]
        ]
    },
    {
        "id": "2e568986d52d7472",
        "type": "debug",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Shared Attr Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 580,
        "wires": []
    },
    {
        "id": "8521b24da888f486",
        "type": "function",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Get RoomStatus",
        "func": "//msg.payload = msg.payload[0].value;\n//msg.topic = \"room_status\";\n//flow.set(\"latest_room_status\", msg.payload.room_status);\n//return msg;\n\nconst roomStatus = msg.payload[0].value;\nflow.set(\"latest_room_status\", roomStatus);\nmsg.payload = roomStatus;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 580,
        "wires": [
            [
                "2e568986d52d7472",
                "9a8702797b9536a7",
                "6461f71a422fcca3"
            ]
        ]
    },
    {
        "id": "9e260abfcfe2ff3c",
        "type": "debug",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "warning",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3360,
        "y": 380,
        "wires": []
    },
    {
        "id": "f51b70d7ee6b2f15",
        "type": "switch",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Check Auto Mode",
        "property": "payload.params",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 970,
        "y": 700,
        "wires": [
            [
                "trigger-get-room-status"
            ]
        ]
    },
    {
        "id": "trigger-get-room-status",
        "type": "function",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Trigger Get RoomStatus",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 700,
        "wires": [
            [
                "bd4118096ef81bc2"
            ]
        ]
    },
    {
        "id": "9255fc6469b588dc",
        "type": "delay",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 980,
        "y": 400,
        "wires": [
            [
                "1a7872be8d797f02"
            ]
        ]
    },
    {
        "id": "026281ec6ed965f7",
        "type": "delay",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 580,
        "wires": [
            [
                "bd4118096ef81bc2"
            ]
        ]
    },
    {
        "id": "4717ba891da19c3c",
        "type": "mqtt out",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Box2AirConRelayStatusTB",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e60d06a0a8f09ffe",
        "x": 2740,
        "y": 380,
        "wires": []
    },
    {
        "id": "9a8702797b9536a7",
        "type": "function",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "ForceAutoModeIfRoomStatusChangedInManual",
        "func": "// รับค่าล่าสุดที่เคยส่งไว้ก่อนหน้า\n//const prevStatus = flow.get(\"prev_room_status\");\n//const currentStatus = msg.payload;\n\n// ดึงสถานะ DisabledState ล่าสุดจาก context\n//const isManualMode = flow.get(\"latest_params\") === false;\n\n// เช็คว่าอยู่ Manual Mode และ room_status เปลี่ยน\n//if (isManualMode && currentStatus !== prevStatus) {\n    // อัปเดตค่าล่าสุด\n//    flow.set(\"prev_room_status\", currentStatus);\n\n    // เตรียม payload เพื่อส่งไปยัง node SelectMode เพื่อสั่งเปลี่ยนเป็น Auto\n//    msg.payload = {\n//        method: \"disableState\",\n//        params: true\n//    };\n//    node.warn(`🔄 room_status changed while in Manual Mode! Switching to Auto Mode...`);\n//    return msg;\n//}\n//\n//return null; // ไม่ทำอะไรถ้าเงื่อนไขไม่ตรง\n\n\n// รับค่าล่าสุดที่เคยส่งไว้ก่อนหน้า\nconst prevStatus = flow.get(\"prev_room_status\");\nconst currentStatus = msg.payload;\n\n// ดึงสถานะ DisabledState ล่าสุดจาก context\nconst isManualMode = flow.get(\"latest_params\") === false;\n\n// เช็คว่าอยู่ Manual Mode และ room_status เปลี่ยน\nif (isManualMode && currentStatus !== prevStatus) {\n    // อัปเดตค่าล่าสุด\n    flow.set(\"prev_room_status\", currentStatus);\n\n    // ⬇️ เก็บค่าที่จะใช้ resend\n    flow.set(\"latest_room_status\", currentStatus);\n    flow.set(\"latest_params\", true);  // เปลี่ยน mode เป็น Auto\n\n    // เตรียม msg ว่างเพื่อเรียก resend node\n    node.warn(`🔄 room_status changed while in Manual Mode! Switching to Auto Mode...`);\n    return msg;\n}\n\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 840,
        "wires": [
            [
                "379d5c352952ced1",
                "1a7872be8d797f02",
                "5ef3440d42c16127"
            ]
        ]
    },
    {
        "id": "11f8ccebcc15d5b9",
        "type": "rbe",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "room_status changes",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload.room_status",
        "topi": "topic",
        "x": 2720,
        "y": 440,
        "wires": [
            [
                "6fc684c9a1043afe"
            ]
        ]
    },
    {
        "id": "379d5c352952ced1",
        "type": "debug",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "ForceAuto",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2310,
        "y": 840,
        "wires": []
    },
    {
        "id": "6461f71a422fcca3",
        "type": "delay",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1920,
        "y": 480,
        "wires": [
            [
                "1a7872be8d797f02"
            ]
        ]
    },
    {
        "id": "c373df4e45b0485a",
        "type": "switch",
        "z": "1b6bbf26415dcee7",
        "g": "b5e0e481b6a6835f",
        "name": "Check switchNo exists",
        "property": "payload.params.switchNo",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 980,
        "y": 280,
        "wires": [
            [
                "89f9d32fcb6c0167"
            ]
        ]
    },
    {
        "id": "75354b4fcfa7d827",
        "type": "modbus-read",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "RelayStatus",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "Coil",
        "adr": "1",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "ms",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 250,
        "y": 640,
        "wires": [
            [
                "7c2cbc90498b03c8",
                "6a1a38576955d0be"
            ],
            []
        ]
    },
    {
        "id": "90bca14fe46d03b4",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 660,
        "wires": []
    },
    {
        "id": "9cd796db15739e6b",
        "type": "mqtt in",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "MainBoxRelayControl",
        "topic": "v1/devices/me/rpc/request/+",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "ad30a05ccf560b61",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 160,
        "wires": [
            [
                "3ac8d5c28fdb0d3f",
                "1d6dad5164440ae5"
            ]
        ]
    },
    {
        "id": "3ac8d5c28fdb0d3f",
        "type": "function",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "แยกตาม method name",
        "func": "const addressMap = {\n    \"Switch1\": 0,\n    \"Switch2\": 1,\n    \"Switch3\": 2,\n    \"Switch4\": 3,\n    \"Switch5\": 4,\n    \"Switch6\": 5\n};\n\nconst switchNo = msg.payload.params.switchNo;\nconst value = msg.payload.params.value;\nconst modbusAddress = addressMap[switchNo];\n\nif (modbusAddress !== undefined) {\n    msg.payload = {\n        //\"value\": [value ? 0xFF00 : 0x0000],\n        value: value ? true : false,\n        \"fc\": 5,\n        \"unitid\": \"11\",\n        \"quantity\": \"1\",\n        \"address\": modbusAddress\n    };\n    return msg;\n} else {\n    node.error(\"Error\", msg);\n    return null; // stop the flow\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 200,
        "wires": [
            [
                "04bbe9ad1f60b397",
                "55c93433f7473e85"
            ]
        ]
    },
    {
        "id": "1d6dad5164440ae5",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 100,
        "wires": []
    },
    {
        "id": "04bbe9ad1f60b397",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 140,
        "wires": []
    },
    {
        "id": "799f0b02c1559827",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 180,
        "wires": []
    },
    {
        "id": "7c2cbc90498b03c8",
        "type": "function",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "function 5",
        "func": "let statuses = msg.payload;\n\nlet gauge1 = statuses[0] ? 1 : 0;\nlet gauge2 = statuses[1] ? 1 : 0;\nlet gauge3 = statuses[2] ? 1 : 0;\nlet gauge4 = statuses[3] ? 1 : 0;\nlet gauge5 = statuses[4] ? 1 : 0;\nlet gauge6 = statuses[5] ? 1 : 0;\nlet gauge7 = statuses[6] ? 1 : 0;\nlet gauge8 = statuses[7] ? 1 : 0;\n\nmsg.payload = {\n    \"gauge1\": gauge1,\n    \"gauge2\": gauge2,\n    \"gauge3\": gauge3,\n    \"gauge4\": gauge4,\n    \"gauge5\": gauge5,\n    \"gauge6\": gauge6,\n    \"gauge7\": gauge7,\n    \"gauge8\": gauge8\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 640,
        "wires": [
            [
                "90bca14fe46d03b4"
            ]
        ]
    },
    {
        "id": "6a1a38576955d0be",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 540,
        "wires": []
    },
    {
        "id": "ecbdd484de04db80",
        "type": "mqtt out",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "MainBoxRelayStatusTB",
        "topic": "v1/devices/me/attributes",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 770,
        "y": 580,
        "wires": []
    },
    {
        "id": "bb824cda8bc8f3ee",
        "type": "modbus-flex-write",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "dbb746f7998c46e0",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 870,
        "y": 180,
        "wires": [
            [
                "799f0b02c1559827"
            ],
            []
        ]
    },
    {
        "id": "55c93433f7473e85",
        "type": "function",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "function 6",
        "func": "msg.payload = msg.payload.map(val => !val);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 260,
        "wires": [
            [
                "bb824cda8bc8f3ee"
            ]
        ]
    },
    {
        "id": "19d5117c52027c29",
        "type": "function",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "Address ของ Relay ตัวที่ 0",
        "func": "msg.payload = {\n    value: 0xFF0 ,       // เปิดรีเลย์\n    fc: 6,              // Write Multiple Coils\n    unitid: 1,\n    address: 0,          // Relay ตัวที่ 1\n    quantity: 1\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 840,
        "wires": [
            [
                "35f8c26f66f949f8",
                "0f7a9869cb0cbb0f"
            ]
        ]
    },
    {
        "id": "43c10de9c301e332",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1060,
        "wires": []
    },
    {
        "id": "a8dd87ecf3a15a52",
        "type": "inject",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 760,
        "wires": [
            [
                "19d5117c52027c29"
            ]
        ]
    },
    {
        "id": "35f8c26f66f949f8",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 860,
        "wires": []
    },
    {
        "id": "5b8663330ead1822",
        "type": "modbus-read",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "11",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": true,
        "startDelayTime": "30",
        "server": "2c02a42164ec91cc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 210,
        "y": 1320,
        "wires": [
            [
                "52227dc65ef98c49",
                "6c4df45f2ce58823"
            ],
            []
        ]
    },
    {
        "id": "2d07e17305e3acf6",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "debug 22",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 1040,
        "wires": []
    },
    {
        "id": "0f7a9869cb0cbb0f",
        "type": "modbus-write",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "1",
        "server": "2c02a42164ec91cc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 600,
        "y": 800,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "relay1Switch",
        "type": "function",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "Send to Relay 1",
        "func": "// สมมุติว่า msg.payload = { relay_2_cmd: true }\nconst keys = Object.keys(msg.payload);\nconst key = keys[0]; // relay_2_cmd\nconst state = msg.payload[key]; // true or false\nconst index = parseInt(key.split('_')[1]) - 1; // จาก relay_2_cmd → 1\n\n// อ่านค่าล่าสุดจาก flow context (หรือกำหนดใหม่)\nlet bitArray = flow.get(\"relayBits\") || [false, false, false, false, false, false, false, false];\n\n// อัปเดตเฉพาะบิตที่ถูกสั่ง\nbitArray[index] = state;\n\n// แปลงเป็น binary แล้ว decimal\nlet binary = bitArray.map(b => b ? '1' : '0').reverse().join('');\nlet value = parseInt(binary, 2);\n\n// ส่งไปยัง Modbus\nmsg.payload = {\n    value: [value],\n    fc: 5,\n    unitid: 1,\n    address: 1,\n    quantity: 1\n};\n\n// เก็บไว้ใน flow สำหรับครั้งถัดไป\nflow.set(\"relayBits\", bitArray);\n\n// ส่งสถานะกลับ ThingsBoard\nmsg.attributes = {};\nmsg.attributes[`relay_${index + 1}_state`] = state ? \"on\" : \"off\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1160,
        "wires": [
            [
                "modbusWrite",
                "43c10de9c301e332"
            ]
        ]
    },
    {
        "id": "modbusWrite",
        "type": "modbus-flex-write",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "Write to Relay",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "2c02a42164ec91cc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 670,
        "y": 1160,
        "wires": [
            [
                "3a8d5026b417e114"
            ],
            []
        ]
    },
    {
        "id": "f98ac483ec31f059",
        "type": "mqtt in",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "",
        "topic": "v1/devices/me/attributes",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "4e6a5b74c5abf363",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 1160,
        "wires": [
            [
                "relay1Switch",
                "2d07e17305e3acf6"
            ]
        ]
    },
    {
        "id": "8aec15b6ea449725",
        "type": "mqtt out",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "",
        "topic": "v1/devices/me/attributes",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4e6a5b74c5abf363",
        "x": 1010,
        "y": 1160,
        "wires": []
    },
    {
        "id": "6c4df45f2ce58823",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "debug 23",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 1260,
        "wires": []
    },
    {
        "id": "52227dc65ef98c49",
        "type": "function",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "function 8",
        "func": "// msg.payload = [true] หรือ [false]\nlet relayState = msg.payload[0];\n\nmsg.payload = JSON.stringify({\n    relay_1_state: relayState\n});\n// msg.topic = \"v1/devices/me/rpc/response/1\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1340,
        "wires": [
            [
                "dee38c4397a3b9a5"
            ]
        ]
    },
    {
        "id": "dee38c4397a3b9a5",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1260,
        "wires": []
    },
    {
        "id": "3a8d5026b417e114",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 1300,
        "wires": []
    },
    {
        "id": "465601fd40700769",
        "type": "mqtt in",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "MainBoxRelayControl",
        "topic": "v1/devices/me/rpc/request/+",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "4e6a5b74c5abf363",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 1640,
        "wires": [
            [
                "1a03b9b25b37cf45",
                "1a49106bd8705dff"
            ]
        ]
    },
    {
        "id": "1a03b9b25b37cf45",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "MainBoxRelayDebug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 1580,
        "wires": []
    },
    {
        "id": "4e3f2c308792eacb",
        "type": "modbus-read",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "RelayStatus",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "11",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "ms",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 150,
        "y": 1760,
        "wires": [
            [
                "87e6740a5f01145c",
                "379f3ea14a3524d6"
            ],
            []
        ]
    },
    {
        "id": "87e6740a5f01145c",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "MainBoxRelayStatus",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 1700,
        "wires": []
    },
    {
        "id": "379f3ea14a3524d6",
        "type": "function",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "MainBoxRelayStatusFunction",
        "func": "let statuses = msg.payload;\n\nlet gauge1 = statuses[0] ? 1 : 0;\nlet gauge2 = statuses[1] ? 1 : 0;\nlet gauge3 = statuses[2] ? 1 : 0;\nlet gauge4 = statuses[3] ? 1 : 0;\nlet gauge5 = statuses[4] ? 1 : 0;\nlet gauge6 = statuses[5] ? 1 : 0;\nlet gauge7 = statuses[6] ? 1 : 0;\nlet gauge8 = statuses[7] ? 1 : 0;\n\nmsg.payload = {\n    \"gauge1\": gauge1,\n    \"gauge2\": gauge2,\n    \"gauge3\": gauge3,\n    \"gauge4\": gauge4,\n    \"gauge5\": gauge5,\n    \"gauge6\": gauge6,\n    \"gauge7\": gauge7,\n    \"gauge8\": gauge8\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1800,
        "wires": [
            [
                "42a63506866ef395"
            ]
        ]
    },
    {
        "id": "42a63506866ef395",
        "type": "rbe",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "MainBoxRelayStatusFilter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 570,
        "y": 1740,
        "wires": [
            [
                "e46266b5e5ba0b0e",
                "c6ac4d06da35d971"
            ]
        ]
    },
    {
        "id": "e46266b5e5ba0b0e",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "MainBoxRelayStatusDebug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1700,
        "wires": []
    },
    {
        "id": "c6ac4d06da35d971",
        "type": "mqtt out",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "MainBoxRelayStatusTB",
        "topic": "v1/devices/me/attributes",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4e6a5b74c5abf363",
        "x": 810,
        "y": 1780,
        "wires": []
    },
    {
        "id": "1a49106bd8705dff",
        "type": "function",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "MainBoxRelayControlFunction",
        "func": "const addressMap = {\n    \"Switch1\":0,\n    \"Switch2\":1,\n    \"Switch3\":2,\n    \"Switch4\":3,\n    \"Switch5\":4,\n    \"Switch6\":5\n};\n\nconst switchNo = msg.payload.params.switchNo;\nconst value = msg.payload.params.value;\nconst modbusAddress = addressMap[switchNo];\n\nif (modbusAddress !== undefined){\n    msg.payload = {\n        //\"value\": [value ? 0xFF00 : 0x0000],\n        value: value ? 1 : 0,\n        \"fc\": 5,\n        \"unitid\": \"11\",\n        \"quantity\": \"1\",\n        \"address\": modbusAddress\n    };\n    return msg;\n} else {\n    node.error(\"Error\", msg);\n    return null; // stop the flow\n}\n\n// const addressMap = {\n//     \"Switch1\": 0,\n//     \"Switch2\": 1,\n//     \"Switch3\": 2,\n//     \"Switch4\": 3,\n//     \"Switch5\": 4,\n//     \"Switch6\": 5\n// };\n\n// const switchNo = msg.payload.params.switchNo;\n// const value = msg.payload.params.value;\n// const modbusAddress = addressMap[switchNo];\n\n// if (modbusAddress !== undefined) {\n//     // Update relayBits manually to reflect change\n//     let relayBits = flow.get(\"relayBits\") || [false, false, false, false, false, false, false, false];\n//     relayBits[modbusAddress] = value;\n//     flow.set(\"relayBits\", relayBits);\n\n//     msg.payload = {\n//         value: relayBits,\n//         fc: 15,\n//         unitid: \"11\",\n//         quantity: 8,\n//         address: modbusAddress\n//     };\n//     return msg;\n// } else {\n//     node.error(\"Invalid switchNo\", msg);\n//     return null;\n// }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1620,
        "wires": [
            [
                "94a5b103db97cfa6",
                "dbdaab1301aa41c6"
            ]
        ]
    },
    {
        "id": "94a5b103db97cfa6",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "MainBoxRelayControlFunctionDebug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1560,
        "wires": []
    },
    {
        "id": "dbdaab1301aa41c6",
        "type": "modbus-flex-write",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "MainBoxRelayControlADM",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "dbb746f7998c46e0",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "10",
        "x": 1100,
        "y": 1620,
        "wires": [
            [
                "6c1522bc2bf60ea3",
                "87e570b28815eab5"
            ],
            [
                "028fb3d1fdcecccb"
            ]
        ]
    },
    {
        "id": "6c1522bc2bf60ea3",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "MainBoxRelayControlADM",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 1760,
        "wires": []
    },
    {
        "id": "028fb3d1fdcecccb",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 1560,
        "wires": []
    },
    {
        "id": "1f0937208be36009",
        "type": "inject",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 840,
        "y": 1460,
        "wires": [
            [
                "b50df5d59139d159"
            ]
        ]
    },
    {
        "id": "b50df5d59139d159",
        "type": "function",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "function 7",
        "func": "msg.payload = {\n    value: false,\n    fc: 5,\n    unitid: \"11\",\n    quantity: 1,\n    address: 5\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1480,
        "wires": [
            [
                "dbdaab1301aa41c6"
            ]
        ]
    },
    {
        "id": "87e570b28815eab5",
        "type": "modbus-response",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "3e59bc73e6af50a3",
        "name": "",
        "registerShowMax": 20,
        "x": 1350,
        "y": 1500,
        "wires": []
    },
    {
        "id": "5639e0fd73aa45a0",
        "type": "mqtt in",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "MainBoxRelayControl",
        "topic": "v1/devices/me/rpc/request/+",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "ad30a05ccf560b61",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 265,
        "y": 2000,
        "wires": [
            [
                "757a1d365ce48a0e",
                "2c0745a7e711696a"
            ]
        ],
        "l": false
    },
    {
        "id": "757a1d365ce48a0e",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "MainBoxRelayDebug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1940,
        "wires": []
    },
    {
        "id": "a0cb6011a347f058",
        "type": "modbus-read",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "RelayStatus",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "11",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 250,
        "y": 2120,
        "wires": [
            [
                "dae1a8bc6d93b776",
                "a62d22f4b84a196a"
            ],
            []
        ]
    },
    {
        "id": "dae1a8bc6d93b776",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "MainBoxRelayStatus",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 2060,
        "wires": []
    },
    {
        "id": "a62d22f4b84a196a",
        "type": "function",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "MainBoxRelayStatusFunction",
        "func": "let statuses = msg.payload;\n\nlet gauge1 = statuses[0] ? 1 : 0 ;\nlet gauge2 = statuses[1] ? 1 : 0 ; \nlet gauge3 = statuses[2] ? 1 : 0 ; \nlet gauge4 = statuses[3] ? 1 : 0 ; \nlet gauge5 = statuses[4] ? 1 : 0 ; \nlet gauge6 = statuses[5] ? 1 : 0 ; \nlet gauge7 = statuses[6] ? 1 : 0 ; \nlet gauge8 = statuses[7] ? 1 : 0 ; \n\nmsg.payload = {\n    \"gauge1\":gauge1,\n    \"gauge2\":gauge2,\n    \"gauge3\":gauge3,\n    \"gauge4\":gauge4,\n    \"gauge5\":gauge5,\n    \"gauge6\":gauge6,\n    \"gauge7\":gauge7,\n    \"gauge8\":gauge8\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2160,
        "wires": [
            [
                "bd35ce1ed27c2f42",
                "4f64f7e8aab2cf17",
                "360c1d98a618c509"
            ]
        ]
    },
    {
        "id": "bd35ce1ed27c2f42",
        "type": "rbe",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "MainBoxRelayStatusFilter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 610,
        "y": 2240,
        "wires": [
            [
                "360c1d98a618c509"
            ]
        ]
    },
    {
        "id": "360c1d98a618c509",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "MainBoxRelayStatusDebug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2060,
        "wires": []
    },
    {
        "id": "4f64f7e8aab2cf17",
        "type": "mqtt out",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "MainBoxRelayStatusTB",
        "topic": "v1/devices/me/attributes",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 910,
        "y": 2140,
        "wires": []
    },
    {
        "id": "2c0745a7e711696a",
        "type": "function",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "MainBoxRelayControlFunction",
        "func": "const addressMap = {\n    \"Switch1\":0,\n    \"Switch2\":1,\n    \"Switch3\":2,\n    \"Switch4\":3,\n    \"Switch5\":4,\n    \"Switch6\":5\n};\n\nconst switchNo = msg.payload.params.switchNo;\nconst value = msg.payload.params.value;\nconst modbusAddress = addressMap[switchNo];\n\nif (modbusAddress !== undefined){\n    msg.payload = {\n        //\"value\": [value ? 0xFF00 : 0x0000],\n        value: value ? true : false,\n        \"fc\": 5,\n        \"unitid\": \"11\",\n        \"quantity\": \"1\",\n        \"address\": modbusAddress\n    };\n    return msg;\n} else {\n    node.error(\"Error\", msg);\n    return null; // stop the flow\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1980,
        "wires": [
            [
                "8e204c57beeba35a",
                "3d259e7bc4ad3185"
            ]
        ]
    },
    {
        "id": "8e204c57beeba35a",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "MainBoxRelayControlFunctionDebug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1920,
        "wires": []
    },
    {
        "id": "3d259e7bc4ad3185",
        "type": "modbus-flex-write",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "MainBoxRelayControlADM",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "dbb746f7998c46e0",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1200,
        "y": 1980,
        "wires": [
            [
                "32da724035e3e0fd"
            ],
            []
        ]
    },
    {
        "id": "32da724035e3e0fd",
        "type": "debug",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "MainBoxRelayControlADM",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 2120,
        "wires": []
    },
    {
        "id": "cc919c5c0d120414",
        "type": "mqtt in",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "MainBoxRelayControl",
        "topic": "v1/devices/me/rpc/request/+",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "ad30a05ccf560b61",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 265,
        "y": 1940,
        "wires": [
            [
                "2c0745a7e711696a"
            ]
        ],
        "l": false
    },
    {
        "id": "120e05dd7330a26f",
        "type": "mqtt in",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "MainBoxRelayControl",
        "topic": "v1/devices/me/rpc/request/+",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "ad30a05ccf560b61",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 65,
        "y": 2460,
        "wires": [
            [
                "c0cd116cea37f534",
                "bc1dda776841f7c9",
                "cdff913a782f0120",
                "f41a442ce7f94082"
            ]
        ],
        "l": false
    },
    {
        "id": "c0cd116cea37f534",
        "type": "debug",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "MainBoxRelayDebug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 2500,
        "wires": []
    },
    {
        "id": "dee43fa3f2ed4816",
        "type": "modbus-read",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "RelayStatus",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "11",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "dbb746f7998c46e0",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 3040,
        "wires": [
            [
                "317bee3988b3c36b",
                "b9279e20a1a5c35c"
            ],
            []
        ]
    },
    {
        "id": "317bee3988b3c36b",
        "type": "debug",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "MainBoxRelayStatus",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 2980,
        "wires": []
    },
    {
        "id": "b9279e20a1a5c35c",
        "type": "function",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "MainBoxRelayStatusFunction",
        "func": "let statuses = msg.payload;\n\nlet gauge1 = statuses[0] ? 1 : 0 ;\nlet gauge2 = statuses[1] ? 1 : 0 ; \nlet gauge3 = statuses[2] ? 1 : 0 ; \nlet gauge4 = statuses[3] ? 1 : 0 ; \nlet gauge5 = statuses[4] ? 1 : 0 ; \nlet gauge6 = statuses[5] ? 1 : 0 ; \nlet gauge7 = statuses[6] ? 1 : 0 ; \nlet gauge8 = statuses[7] ? 1 : 0 ; \n\nmsg.payload = {\n    \"gauge1\":gauge1,\n    \"gauge2\":gauge2,\n    \"gauge3\":gauge3,\n    \"gauge4\":gauge4,\n    \"gauge5\":gauge5,\n    \"gauge6\":gauge6,\n    \"gauge7\":gauge7,\n    \"gauge8\":gauge8\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 3080,
        "wires": [
            [
                "6d83de751c302837",
                "cc83299223b11184"
            ]
        ]
    },
    {
        "id": "cc83299223b11184",
        "type": "debug",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "MainBoxRelayStatusDebug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 3000,
        "wires": []
    },
    {
        "id": "6d83de751c302837",
        "type": "mqtt out",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "MainBoxRelayStatusTB",
        "topic": "v1/devices/me/attributes",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 770,
        "y": 3080,
        "wires": []
    },
    {
        "id": "bc1dda776841f7c9",
        "type": "function",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "MainBoxRelayControlFunction",
        "func": "const addressMap = {\n    \"Switch1\":0,\n    \"Switch2\":1,\n    \"Switch3\":2,\n    \"Switch4\":3,\n    \"Switch5\":4,\n    \"Switch6\":5\n};\n\nconst switchNo = msg.payload.params.switchNo;\nconst value = msg.payload.params.value;\nconst modbusAddress = addressMap[switchNo];\n\nif (modbusAddress !== undefined){\n    msg.payload = {\n        //\"value\": [value ? 0xFF00 : 0x0000],\n        value: value ? true : false,\n        \"fc\": 5,\n        \"unitid\": \"11\",\n        \"quantity\": \"1\",\n        \"address\": modbusAddress\n    };\n    return msg;\n} else {\n    node.error(\"Error\", msg);\n    return null; // stop the flow\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 2420,
        "wires": [
            [
                "571626ddd36d0615",
                "c59549582893dfc7"
            ]
        ]
    },
    {
        "id": "571626ddd36d0615",
        "type": "debug",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "MainBoxRelayControlFunctionDebug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1840,
        "y": 2380,
        "wires": []
    },
    {
        "id": "c59549582893dfc7",
        "type": "modbus-flex-write",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "MainBoxRelayControlADM",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "server": "dbb746f7998c46e0",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1810,
        "y": 2480,
        "wires": [
            [
                "1bff5aa82f08ca4e"
            ],
            []
        ]
    },
    {
        "id": "1bff5aa82f08ca4e",
        "type": "debug",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "MainBoxRelayControlADM",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 2440,
        "wires": []
    },
    {
        "id": "0964a06901ac7763",
        "type": "mqtt in",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "MainBoxRelayControl",
        "topic": "v1/devices/me/rpc/request/+",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "ad30a05ccf560b61",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 65,
        "y": 2400,
        "wires": [
            [
                "bc1dda776841f7c9",
                "cdff913a782f0120",
                "f41a442ce7f94082"
            ]
        ],
        "l": false
    },
    {
        "id": "bc73d5c3896f48c6",
        "type": "function",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "resend current room_status&params",
        "func": "let roomStatus = flow.get(\"latest_room_status\");\nlet params = flow.get(\"latest_params\");\n\nif (roomStatus === undefined && params === undefined) {\n    node.warn(\"❌ Resend failed: BOTH room_status and params are missing in context\");\n    return null;\n}\nif (roomStatus === undefined) {\n    node.warn(\"❌ Resend failed: room_status is missing in context\");\n    return null;\n}\nif (params === undefined) {\n    node.warn(\"❌ Resend failed: params (DisabledState) is missing in context\");\n    return null;\n}\n\nnode.warn(`✅ Resend ready: room_status=${roomStatus}, params=${params}`);\nreturn {\n    payload: {\n        room_status: roomStatus,\n        params: params\n    }\n};\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2620,
        "wires": [
            [
                "6ca636fac26796bf",
                "f3c22d3f58c83ebb",
                "0e6bc0f950faaa57"
            ]
        ]
    },
    {
        "id": "f41a442ce7f94082",
        "type": "switch",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "Mode",
        "property": "payload.params",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 2560,
        "wires": [
            [
                "bc1dda776841f7c9"
            ],
            [
                "765cacc5b1e8cb89"
            ]
        ]
    },
    {
        "id": "765cacc5b1e8cb89",
        "type": "delay",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 2620,
        "wires": [
            [
                "bc73d5c3896f48c6"
            ]
        ]
    },
    {
        "id": "0e6bc0f950faaa57",
        "type": "rbe",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "room_status changes",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload.room_status",
        "topi": "topic",
        "x": 1080,
        "y": 2620,
        "wires": [
            [
                "2b5eca51ba17981e"
            ]
        ]
    },
    {
        "id": "6ca636fac26796bf",
        "type": "debug",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "debug resend",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 2680,
        "wires": []
    },
    {
        "id": "f3c22d3f58c83ebb",
        "type": "mqtt out",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "MainBoxTB",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 1050,
        "y": 2560,
        "wires": []
    },
    {
        "id": "2b5eca51ba17981e",
        "type": "function",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "Function Auto",
        "func": "const roomStatus = msg.payload.room_status;\nconst isAuto = msg.payload.params;\n\n// ถ้าไม่ใช่โหมดอัตโนมัติ (manual) ให้หยุด\nif (isAuto !== true) {\n    return null;\n}\n\nif (roomStatus !== \"Available\") {\n    return null;\n}\n\n// สวิตไฟที่ต้องควบคุม (Switch1 ถึง Switch6)\nconst switchList = [\"Switch1\", \"Switch2\", \"Switch3\", \"Switch4\", \"Switch5\", \"Switch6\"];\n\n// กำหนดการเปิด/ปิดตาม room_status\n//const value = roomStatus === \"Available\" ? true : false;\n\n// สร้างคำสั่งควบคุมสวิตช์แต่ละตัว\nswitchList.forEach(sw => {\n    const msgOut = {\n        payload: {\n            params: {\n                switchNo: sw,\n                value: true\n            }\n        }\n    };\n    node.send(msgOut);\n});\n\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 2620,
        "wires": [
            [
                "b81ff0216226047c",
                "bc1dda776841f7c9"
            ]
        ]
    },
    {
        "id": "b81ff0216226047c",
        "type": "debug",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "Function Auto",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 2620,
        "wires": []
    },
    {
        "id": "7144cc332c5b5e42",
        "type": "inject",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "Start",
        "props": [],
        "repeat": "",
        "crontab": "*/1 8-20 * * 1,2,3,4,5,6",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 2880,
        "wires": [
            [
                "aae9ef46a2d34c69"
            ]
        ]
    },
    {
        "id": "aae9ef46a2d34c69",
        "type": "delay",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 2880,
        "wires": [
            [
                "288ae2786e47e689"
            ]
        ]
    },
    {
        "id": "288ae2786e47e689",
        "type": "function",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "Prepare Login Payload",
        "func": "msg.method = \"POST\";\nmsg.url = \"http://10.34.112.192:8080/api/auth/login\";\nmsg.headers = { \"Content-Type\": \"application/json\" };\nmsg.payload = {\n    username: \"papavarin.khm@student.mahidol.edu\",\n    password: \"ict555\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2880,
        "wires": [
            [
                "64bd81a15786ee67"
            ]
        ]
    },
    {
        "id": "64bd81a15786ee67",
        "type": "http request",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "Login to ThingsBoard",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 640,
        "y": 2880,
        "wires": [
            [
                "4910c98a0c4b8977"
            ]
        ]
    },
    {
        "id": "4910c98a0c4b8977",
        "type": "function",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "Build Request to Get Shared Attribute",
        "func": "const jwt = msg.payload.token;\nconst deviceId = \"390c9ec0-f96b-11ef-8636-93168e2858a5\"; // Air Con\n\nmsg.method = \"GET\";\nmsg.url = `http://10.34.112.192:8080/api/plugins/telemetry/DEVICE/${deviceId}/values/attributes/SHARED_SCOPE`;\nmsg.headers = {\n    \"X-Authorization\": `Bearer ${jwt}`\n};\ndelete msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 2880,
        "wires": [
            [
                "7c25610a5f7cfd74"
            ]
        ]
    },
    {
        "id": "cdff913a782f0120",
        "type": "switch",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "Select Mode",
        "property": "payload.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "disableState",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 2740,
        "wires": [
            [
                "4fc861f3dbdb13e5"
            ]
        ]
    },
    {
        "id": "4fc861f3dbdb13e5",
        "type": "function",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "Select Mode",
        "func": "if (!msg.payload) {\n    node.error(\"Error: msg.payload is missing\", msg);\n    return null;\n}\n\nif (typeof msg.payload.params === \"undefined\") {\n    node.error(\"Error: msg.payload.params is missing\", msg);\n    return null;\n}\n\n// กำหนดค่า DisabledState โดยตรงจาก params (ไม่ต้อง .DisabledState)\nmsg.payload.DisabledState = msg.payload.params;\n\n// Debug ดูค่าก่อนส่งไปต่อ\nnode.warn(\"DisabledState: \" + msg.payload.DisabledState);\n//msg.topic = \"params\";\nflow.set(\"latest_params\", msg.payload.params);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2740,
        "wires": [
            [
                "5e1ac8ab976c7550",
                "32ed2712df29f221"
            ]
        ]
    },
    {
        "id": "5e1ac8ab976c7550",
        "type": "mqtt out",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "SendMode",
        "topic": "v1/devices/me/telemetry",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ad30a05ccf560b61",
        "x": 570,
        "y": 2740,
        "wires": []
    },
    {
        "id": "32ed2712df29f221",
        "type": "debug",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "debug select mode",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 2780,
        "wires": []
    },
    {
        "id": "7c25610a5f7cfd74",
        "type": "http request",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "Get Shared Attribute",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1180,
        "y": 2880,
        "wires": [
            [
                "a18b9a0b24b2999a"
            ]
        ]
    },
    {
        "id": "a18b9a0b24b2999a",
        "type": "function",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "Get RoomStatus",
        "func": "//msg.payload = msg.payload[0].value;\n//msg.topic = \"room_status\";\n//flow.set(\"latest_room_status\", msg.payload.room_status);\n//return msg;\n\nconst roomStatus = msg.payload[0].value;\nflow.set(\"latest_room_status\", roomStatus);\nmsg.payload = roomStatus;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 2880,
        "wires": [
            [
                "e7a307ab9e54d0b8",
                "bc73d5c3896f48c6"
            ]
        ]
    },
    {
        "id": "e7a307ab9e54d0b8",
        "type": "debug",
        "z": "349d863a9104bad1",
        "g": "fa0ee0548f5b861a",
        "name": "Shared Attr Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 2880,
        "wires": []
    },
    {
        "id": "2936e1a383647ec1",
        "type": "comment",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "On-Led(QoS1)",
        "info": "",
        "x": 160,
        "y": 1940,
        "wires": []
    },
    {
        "id": "ab61c48d0dbfca25",
        "type": "comment",
        "z": "349d863a9104bad1",
        "d": true,
        "g": "c6ac78d48d03ba38",
        "name": "OFF-Led(QoS0)",
        "info": "",
        "x": 150,
        "y": 2000,
        "wires": []
    }
]